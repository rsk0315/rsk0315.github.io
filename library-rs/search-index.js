var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","t":[0,0,14,0,0,14,14,14,0,0,0,3,3,3,3,3,5,0,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,0,0,5,0,5,5,11,11,11,11,11,11,11,11,5,0,0,5,5,11,11,11,11,11,11,11,0,0,5,0,0,5,5,5,0,5,11,11,5,5,0,0,5,0,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,3,11,11,11,5,5,5,5,5,5,5,3,11,11,5,5,5,5,5,5,5,3,3,3,11,11,11,5,11,11,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,3,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,3,11,11,8,3,11,11,11,10,10,11,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,3,11,3,11,11,11,11,11,11,11,3,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,3,11,11,11,3,8,10,11,11,11,11,10,10,11,10,3,3,11,11,11,11,11,11,5,0,5,0,11,11,11,11,11,11,0,11,11,5,0,11,0,11,11,11,11,11,11,11,11,5,5,3,11,5,3,11,8,8,3,3,3,8,8,8,8,8,8,8,8,8,8,3,3,8,8,3,3,3,8,3,6,6,8,8,8,8,8,16,16,16,16,3,3,3,8,3,3,18,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,0,5,0,11,11,10,0,11,11,11,11,11,11,11,0,10,0,10,11,11,11,11,11,0,10,10,0,10,0,10,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,10,10,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,10,0,0,10,0,0,10,0,10,0,5,0,10,0,10,11,11,11,11,11,11,11,11,11,10,11,11,5,0,11,11,11,0,0,0,0,10,5,0,5,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,8,10,8,3,16,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,3,3,11,11,11,11,11,11,5,8,10,11,8,3,16,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,8,8,10,10,8,10,8,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,8,10,3,11,11,11,3,11,11,8,10,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,8,10,3,11,11,11,11,11,11,8,10,8,10,5,8,10,3,4,3,8,3,3,6,6,8,8,8,3,18,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,3,11,11,11,11,11,3,8,11,11,11,11,11,10,11,11,11,11,11,11,8,10,5,5,5,3,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,8,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,16,8,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,16,8,16,16,8,8,8,8,8,8,8,8,8,8,0,10,10,0,11,0,10,0,0,10,0,10,10,10,10,10,0,0,10,11,10,10,0,10,0,10,0,10,10,10,0,10,0,10,10,10,11,11,11,10,10,11,0,10,0,10,11,10,0,10,11,10,10,10,10,11,10,10,10,10,11,10,10,10,0,10,10,10,10,0,0,10,0,11,11,10,10,10,10,10,0,10,10,10,10,0,11,10,0,10,10,11,8,16,10,8,16,16,10,10,10,8,8,8,10,16,8,8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,16,16,11,10,10,11,10,11,11,10,10,11,11,11,8,16,16,10,8,8,3,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,11,10,10,11,10,11,10,8,8,8,16,16,8,8,8,10,10,10,10,10,11,11,10,10,10,10,8,10,8,16,10,8,8,10,10,8,16,10,8,10,8,10,8,10,8,8,8,8,16,10,10,2,16,2,8,10,11,10,10,10,10,16,16,16,16,16,16,8,8,8,8,8,8,10,10,10,10,10,10,16,8,10,8,8,8,8,8,8,8,16,8,10,16,8,10,10,10,10,8,10,12,12,12,12,17,17,17,17,17,17,17,17,17,17,17,8,8,4,4,13,3,3,3,13,4,3,13,3,3,4,13,4,13,4,13,4,13,4,13,16,8,3,3,3,3,3,3,8,8,3,3,3,3,13,13,13,13,13,13,13,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,10,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,17,17,17,17,17,17,17,17,17,17,5,8,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,10,10,5,5,5,8,8,11,11,4,2,13,13,12,4,2,13,13,12,3,3,3,4,2,13,13,12,3,3,11,3,11,4,2,13,13,12,4,2,13,13,12,4,2,13,13,12,4,2,13,13,12,4,2,13,11,12,12,12,12,3,3,3,12,12,3,3,3,3,3,8,16,16,3,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11],"n":["algo","ds","e","graph","math","new_monoid","rand_gen","rand_gen_builder","seq","traits","utils","Backward","ExactCover","Forward","Larsch","Permutations","bisect","bisect_","bisect_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","convolve","cycle_mu_lambda","cycle_nth","default","exact_cover","extremum","extremum","extremum_float","extremum_float","extremum_slice","from","from","from","from","from","from","group_by","group_by","hilbert_mo","hilbert_mo_","index_order","index_order_by","index_order_by_key","into","into","into","into","into","into_iter","into_iter","karatsuba","larsch","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next","next","next_permutation","ordered_hash","ordered_hash_","parallel_bisect","parallel_bisect","permutation","prev_permutation","tortoise_hare","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","vzip","vzip","vzip","window_bisect","window_bisect","bisect","bisect_slice","ExactCover","all","any","from_matrix","extremum","extremum_slice","extremum_float","hilbert_mo","index_order_by","index_order_by_key","convolve","Larsch","new","solve","majority","minmax","minmax_by","minmax_by_key","mo","ordered_hash","parallel_bisect","Backward","Forward","Permutations","backward","forward","next","next_permutation","peek","prev","prev_permutation","cycle_mu_lambda","cycle_nth","window_bisect","BTreeBimap","BTreeMultiset","BicrementalMedian","BicrementalMedianDev","BitSet","CuckooHashMap","CuckooHashSet","DecrementalUsizeSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IncrementalLineSet","IntervalMap","IntervalSet","N1Rmq","PotentializedUnionFind","RemovableHeap","RsDict","SkewHeap","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","bit_set","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_bimap","btree_multiset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","count","count","count","count_3way","count_3way","cuckoo_hash_map","cuckoo_hash_set","decremental_usize_set","default","default","default","default","default","default","default","default","diff","disjoint_sparse_table","eq","eq","eq","eq","eq","extend","extend","extend","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","get_mut","get_mut","incremental_line_set","index","index","index","interval_map","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","len","len","n1_rmq","new","new","not","not","partial_cmp","pop","pop_back","pop_front","pop_front","potentialized_union_find","push","push_back","push_back","push_front","quantile","relate","removable_heap","repr","repr_diff","rs_dict","set_value","shl","shl","shl_assign","shr","shr","shr_assign","skew_heap","sub","sub","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","with","BitSet","Indices","Words","and","and_assign","autofix","borrow","borrow","borrow_mut","borrow_mut","capacity","contains","find_first","find_last","from","from","group_by","group_by","indices","insert","into","into","into_iter","into_iter","ior","ior_assign","is_empty","len","new","new","next","next","next_back","next_back","not","not_assign","or","or_assign","remove","reserve","reserve_exact","shl","shl_and","shl_and_assign","shl_and_self","shl_and_self_assign","shl_assign","shl_ior","shl_ior_assign","shl_ior_self","shl_ior_self_assign","shl_op","shl_op_assign","shl_op_self","shl_op_self_assign","shl_or","shl_or_assign","shl_or_self","shl_or_self_assign","shl_sub","shl_sub_assign","shl_sub_self","shl_sub_self_assign","shl_xor","shl_xor_assign","shl_xor_self","shl_xor_self_assign","shr","shr_and","shr_and_assign","shr_and_self","shr_and_self_assign","shr_assign","shr_ior","shr_ior_assign","shr_ior_self","shr_ior_self_assign","shr_op","shr_op_assign","shr_op_self","shr_op_self_assign","shr_or","shr_or_assign","shr_or_self","shr_or_self_assign","shr_sub","shr_sub_assign","shr_sub_self","shr_sub_self_assign","shr_xor","shr_xor_assign","shr_xor_self","shr_xor_self_assign","sub","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","words","xor","xor_assign","BTreeBimap","insert","is_empty","len","new","range_left","range_right","remove_left","remove_right","BTreeMultiset","Iter","borrow","borrow_mut","count","from","group_by","insert","insert_n","into","into_iter","is_empty","iter","len","max","min","new","new","next","remove","remove_n","try_from","try_into","type_id","usize_group_by","vzip","CuckooHashMap","contains_key","insert","is_empty","len","new","remove","CuckooHashSet","contains","insert","is_empty","len","new","remove","DecrementalUsizeSet","contains","greater","greater_equal","is_empty","len","less","less_equal","new","remove","universe_len","DisjointSparseTable","FoldableDeque","new","with","FoldableQueue","new","with","ChtInt","IncrementalLineSet","inner_len","min","new","on_line","oo","push","right","simplify","Interval","IntervalMap","borrow","borrow_mut","clone","clone_into","cmp","connection","eq","fmt","from","from_bounds","inf","insert","intersection","intersection_minus","intersects","into","is_connected_with","is_empty","is_empty","is_subset_of","is_superset_of","iter","new","partial_cmp","remove","sup","superset_of","to_owned","try_from","try_into","type_id","vzip","IntervalSet","clear","covering","has_range","insert","is_empty","iter","mex","new","remove","N1Rmq","min","PotentializedUnionFind","with_len","RemovableHeap","is_empty","len","new","peek","pop","push","remove","RsDict","rank","select","IntoIter","PeekMut","SkewHeap","borrow","borrow","borrow_mut","borrow_mut","clear","deref","deref_mut","drop","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","from","group_by","into","into","into_iter","is_empty","len","len","meld","new","next","peek","peek_mut","pop","pop","push","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","vzip","vzip","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","WmInt","bitlen","is_empty","len","rank","select","set","test","xored_quantile","zero","FunctionalGraph","TreeCata","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dijkstra","dijkstra_","dinic","dinic_","eq","fmt","from","from","from","from","functional_graph","into","into","scc","scc_","to_owned","tree_cata","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","dijkstra","dinic","FunctionalGraph","mu_lambda","scc","TreeCata","each_root","CarmichaelLambda","CommonQuot","CompactSieve","ConstDiv","ConstDiv2","DLog","DigitSum","Divisors","EquivMod","EquivModIter","EulerPhi","Factors","FactorsDup","Gcd","GcdRecip","HarmonicFloorSum","Interpolation","Lcm","LinearFloorSum","LinearSieve","Mod1000000007","Mod998244353","ModAckermann","ModFactorialBinom","ModInt1000000007","ModInt998244353","ModIntBase","ModOrd","ModPow","ModTetration","Modulus","Output","Output","Output","Output","SieveN2Plus1","SieveN2PlusNPlus1","SlopeFunction","Sqrt","StaticModInt","TwoSat","VALUE","add","add","add","add","add_assign","add_assign","bit_binom","bit_binom_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","carmichael_lambda","carmichael_lambda","checked_recip","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_quot","common_quot","compact_sieve","const_div","continued_fraction","continued_fraction_","default","default","digit_pow_sum","digit_sum","digit_sum","div","div","div","div","div_assign","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","eq","eq","equiv_mod","equiv_mod","equiv_mod","euler_phi","euler_phi","factors","factors","factors_dup","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gcd","gcd","gcd_recip","gcd_recip","get","get","harmonic_floor_sum","hash","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","mod_ackermann","mod_ackermann","mod_factorial_binom","mod_ord","mod_ord","mod_pow","mod_pow","mod_recip_table_","mod_recip_table_prime","mod_tetration","mod_tetration","modint","modulus","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","new","new_unchecked","new_unchecked","pow","prime_pi","prime_pi_","product","product","recip","sieve_n2_plus_1","sieve_n2_plus_n_plus_1","slope_function","sqrt","sqrt","sqrt_fraction","sqrt_fraction_","sqrt_fraction_fn","stern_brocot","stern_brocot_","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","bit_binom","CarmichaelLambda","carmichael_lambda","CommonQuot","CommonQuotStruct","Output","borrow","borrow_mut","common_quot","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","continued_fraction","DigitSum","digit_pow_sum","digit_sum","Divisors","DivisorsStruct","Output","borrow","borrow_mut","divisors","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","DLog","dlog","EquivMod","EquivModIter","equiv_mod","equiv_mod","EulerPhi","euler_phi","Factors","FactorsStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","FactorsDup","FactorsDupStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors_dup","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","Interpolation","interpolate","with","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","divisors_sum","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","recips","ModAckermann","mod_ackermann","ModFactorialBinom","binom","factorial","factorial_recip","new","perm","recip","ModOrd","mod_ord","ModPow","mod_pow","mod_recip_table_prime","ModTetration","mod_tetration","Barrett","DefaultId","DynamicModInt","DynamicModIntId","Mod1000000007","Mod998244353","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","add","add","add","add","add_assign","add_assign","barrett","barrett","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_recip","clone","clone","clone_into","clone_into","default","default","default","div","div","div","div","div_assign","div_assign","eq","eq","fmt","fmt","fmt","from","from","from","get","get","hash","hash","into","into","into","modulus","modulus","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","new","new","new_unchecked","new_unchecked","pow","product","product","recip","rem_euclid_u32","set_modulus","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","prime_pi","SieveN2Plus1","factors","factors_dup","is_prime","new","primes","SieveN2PlusNPlus1","factors","factors_dup","is_prime","new","primes","SlopeFunction","SlopeTrickInt","add_abs","add_const","add_left","add_right","argmin","doz","min","min_left","min_right","new","shift","window","Sqrt","sqrt","sqrt_fraction","sqrt_fraction_fn","stern_brocot","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","index","into","into","into","kmp","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","try_from","try_into","type_id","usize_group_by","vzip","SuffixArray","into_inner","lcpa","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","try_from","try_into","type_id","usize_group_by","vzip","z","Act","Action","AddAssoc","AddComm","Additive","Associative","Bisect","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","GroupBy","Hashed","Identity","Input","Input","Input","Input","Input","Input","Item","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","PotentialFunction","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","UsizeGroupBy","Zero","act","act","act","action","add","additive","additive","binop","bisect","bisect","count","count","count","count","count_3way","diff","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get_mut","get_mut","group_by","group_by","hash","id","is_empty","is_empty","is_empty","len","len","len","max","max","min","min","mul","mul_recip","multiplicative","multiplicative","neg","new","new","next","one","one","op","operand","operator","partial_recip","partition","pop","pop_back","pop_front","potential_function","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","relate","repr","repr_diff","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","usize_group_by","usize_group_by","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","operand","operator","AddAssoc","AddComm","Zero","zero","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","additive","id","mul","multiplicative","neg","one","op","partial_recip","recip","recip","zero","Bisect","Input","Output","bisect","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","fmt","from","ge","gt","into","le","lt","ne","new","to_owned","try_from","try_into","type_id","vzip","DisjointSet","count","equiv","is_empty","len","new","partition","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","GroupBy","group_by","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","CommutativeGroup","Item","Magma","PotentialFunction","diff","is_empty","len","new","relate","repr_diff","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","UsizeGroupBy","usize_group_by","0","0","0","1","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","MakeMax","MakeMin","OpAdd","OpAddCount","OpAddCountV","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAddV","OpAffine","OpAffineOnOpAddCount","OpAffineV","OpClosure","OpClosureOnOpClosure","OpGcd","OpGcdV","OpMax","OpMaxV","OpMin","OpMinV","OpMul","OpMulV","OpRollHash","OpRollHashV","Output","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PerLine","Pext","RandomGenerator","Scanner","SpaceSep","StrSep","VecMarker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","act","act","act","act","act","ascii","bitop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","charset","check_bounds","check_bounds_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","e_macro","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate","id","id","id","id","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","make_max","make_min","make_minmax","op","op","op","op","op","op","op","op","op","op_add","op_add_count","op_add_on_op_add_count","op_add_on_op_max","op_add_on_op_min","op_affine","op_affine_on_op_add_count","op_closure","op_closure_on_op_closure","op_gcd","op_max","op_min","op_mul","op_roll_hash","operand","operand","operand","operand","operand","operator","operator","operator","operator","operator","options","output","partial_recip","partial_recip","pdep","pext","rand_gen_macro","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","charset","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","Pext","get","get","get","get","get","new","new","new","new","new","pdep","pext","bounds_within","check_bounds","check_bounds_range","MakeMax","MakeMin","make_max","make_min","OpAdd","OpAddV","OpAddV","_Marker","0","OpAddCount","OpAddCountV","OpAddCountV","_Marker","0","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAffine","OpAffineV","OpAffineV","_Marker","0","OpAffineOnOpAddCount","OpClosure","new","OpClosureOnOpClosure","new","OpGcd","OpGcdV","OpGcdV","_Marker","0","OpMax","OpMaxV","OpMaxV","_Marker","0","OpMin","OpMinV","OpMinV","_Marker","0","OpMul","OpMulV","OpMulV","_Marker","0","OpRollHash","OpRollHashV","OpRollHashV","value_of","0","0","0","1","PerLine","SpaceSep","StrSep","0","0","Ascii","AsciiGen","AsciiString","AsciiStringOfCharset","AsciiStringOfDistribution","GenOptions","OptionType","Output","Permutation","RandomGenerator","SeedableRngInspect","VecMarker","VecOptionsMarker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","charset","charset","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","distinct","distribution","from","from","from","from","from","from","from","generate","inspect","into","into","into","into","into","into","into","new","new","options","options","options","sorted","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","provide","scan","to_string","try_from","try_into","type_id","vzip"],"q":["nekolib","","","","","","","","","","","nekolib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::algo::bisect_","","nekolib::algo::exact_cover","","","","nekolib::algo::extremum","","nekolib::algo::extremum_float","nekolib::algo::hilbert_mo_","nekolib::algo::index_order","","nekolib::algo::karatsuba","nekolib::algo::larsch","","","nekolib::algo::majority_","nekolib::algo::minmax","","","nekolib::algo::mo","nekolib::algo::ordered_hash_","nekolib::algo::parallel_bisect","nekolib::algo::permutation","","","","","","","","","","nekolib::algo::tortoise_hare","","nekolib::algo::window_bisect","nekolib::dsnekolib::ds::bicremental_median","","","","","nekolib::ds::bicremental_median_dev","","","","","","","nekolib::ds::bit_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::btree_bimap","","","","","","","","","nekolib::ds::btree_multiset","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::cuckoo_hash_map","","","","","","","nekolib::ds::cuckoo_hash_set","","","","","","","nekolib::ds::decremental_usize_set","","","","","","","","","","","nekolib::ds::disjoint_sparse_table","nekolib::ds::foldable_deque","","","nekolib::ds::foldable_queue","","","nekolib::ds::incremental_line_set","","","","","","","","","","nekolib::ds::interval_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::interval_set","","","","","","","","","","nekolib::ds::n1_rmq","","nekolib::ds::potentialized_union_find","","nekolib::ds::removable_heap","","","","","","","","nekolib::ds::rs_dict","","","nekolib::ds::skew_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::union_find","nekolib::ds::vec_act_segtree","","","","nekolib::ds::vec_segtree","","","","nekolib::ds::wavelet_matrix","","","","","","","","","","","nekolib::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::graph::dijkstra_","nekolib::graph::dinic_","nekolib::graph::functional_graph","","nekolib::graph::scc_","nekolib::graph::tree_cata","","nekolib::mathnekolib::math::bit_binom_","nekolib::math::carmichael_lambda","","nekolib::math::common_quot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::compact_sieve","","","","nekolib::math::const_div","","","","","","","","nekolib::math::continued_fraction_","nekolib::math::digit_sum","","","nekolib::math::divisors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::dlog","","nekolib::math::equiv_mod","","","","nekolib::math::euler_phi","","nekolib::math::factors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::factors_dup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::gcd","","nekolib::math::gcd_recip","","nekolib::math::harmonic_floor_sum","","","","nekolib::math::interpolation","","","nekolib::math::lcm","","nekolib::math::linear_floor_sum","","nekolib::math::linear_sieve","","","","","","","","","","","","","nekolib::math::mod_ackermann","","nekolib::math::mod_factorial_binom","","","","","","","nekolib::math::mod_ord","","nekolib::math::mod_pow","","nekolib::math::mod_recip_table_","nekolib::math::mod_tetration","","nekolib::math::modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::prime_pi_","nekolib::math::sieve_n2_plus_1","","","","","","nekolib::math::sieve_n2_plus_n_plus_1","","","","","","nekolib::math::slope_function","","","","","","","","","","","","","","nekolib::math::sqrt","","nekolib::math::sqrt_fraction_","","nekolib::math::stern_brocot_","nekolib::math::two_sat","","","","nekolib::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::seq::kmp","","","","","","","","","","","","","","","nekolib::seq::suffix_array","","","","","nekolib::seq::z_algo","","","","","","","","","","","","","","","","nekolib::traitsnekolib::traits::act","","","nekolib::traits::action","","","","","","nekolib::traits::additive","","","","nekolib::traits::binop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::bisect","","","","nekolib::traits::count","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::disjoint_set","","","","","","","","","","nekolib::traits::elastic_slice","","","","","","","","","","","","","","","","","","","nekolib::traits::find_nth","","nekolib::traits::fold","","","nekolib::traits::fold_bisect","","","","nekolib::traits::get_mut","","","nekolib::traits::group_by","","nekolib::traits::max","","nekolib::traits::min","","nekolib::traits::multiplicative","","","","","","","nekolib::traits::potential_function","","","","","","","","","","nekolib::traits::push_pop","","","","","","","","","","","","","","","","","","nekolib::traits::quantile","","","nekolib::traits::range_bounds","","","","","","","nekolib::traits::set_value","","","nekolib::traits::stateful_predicate","","","","","","nekolib::traits::usize_group_by","","nekolib::utilsnekolib::utils::OpAdd","nekolib::utils::OpAddCount","nekolib::utils::OpAffine","nekolib::utils::OpGcd","nekolib::utils::OpMax","nekolib::utils::OpMin","nekolib::utils::OpMul","nekolib::utils::ascii","","","","","","","","","","","","nekolib::utils::bitop","","","","","","","","","","","","","","","","","","","nekolib::utils::buf_range","","","nekolib::utils::make_minmax","","","","nekolib::utils::op_add","","","","nekolib::utils::op_add::OpAdd","nekolib::utils::op_add_count","","","","nekolib::utils::op_add_count::OpAddCount","nekolib::utils::op_add_on_op_add_count","nekolib::utils::op_add_on_op_max","nekolib::utils::op_add_on_op_min","nekolib::utils::op_affine","","","","nekolib::utils::op_affine::OpAffine","nekolib::utils::op_affine_on_op_add_count","nekolib::utils::op_closure","","nekolib::utils::op_closure_on_op_closure","","nekolib::utils::op_gcd","","","","nekolib::utils::op_gcd::OpGcd","nekolib::utils::op_max","","","","nekolib::utils::op_max::OpMax","nekolib::utils::op_min","","","","nekolib::utils::op_min::OpMin","nekolib::utils::op_mul","","","","nekolib::utils::op_mul::OpMul","nekolib::utils::op_roll_hash","","","","nekolib::utils::output","","","","","","","nekolib::utils::rand_gen_macro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::utils::scanner","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["アルゴリズムたち。","データ構造たち。","デバッグ用マクロ。","グラフに関するものたち。","数学関連のアルゴリズムたち。","","乱数生成マクロ。","","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","","Exact cover。","","LARSCH algorithm。","","二分探索で境界を探す。","二分探索。","二分探索で境界を探す。","","","","","","","","","","","Karatsuba 法。Карацуба 法？","周期検出を行う。","$n$ 項目を求める。","","Exact cover。","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Hilbert curve に基づく Mo’s algorithm。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","添字の順序。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Karatsuba 法。","LARSCH algorithm。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","","","辞書順で次の順列の生成。","座標圧縮。","座標圧縮。","並列二分探索。","並列二分探索を行う。","順列。","","周期検出。","","","","","","","","","","","","","","","","","","","","","","","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","Exact cover。","解を全て探す。","…","与えられた行列に対して前計算を行う。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","Karatsuba 法。Карацуба 法？","LARSCH algorithm。","","","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","座標圧縮。","並列二分探索を行う。","","","","","","","辞書順で次の順列の生成。","","","","周期検出を行う。","$n$ 項目を求める。","尺取り法で、各始端に対して境界を探す。","双方向連想配列。","多重集合。","中央値の管理。","中央値と偏差の管理。","Bit set。","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","直線の集合。","区間から値への対応づけ。","区間の集合。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","ポテンシャルつき union-find。","削除可能ヒープ。","rank/select 辞書。","","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","多重集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","","","","","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","直線の集合。","","","","区間から値への対応づけ。","区間の集合。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","線形 RMQ。","","","","","","","","","","ポテンシャルつき union-find。","","","","","","","削除可能ヒープ。","","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","","","","","","","","","","","","","","","","","","","","","","","","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","","Bit set。","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","","","","","","","","","多重集合。","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","","","","","","","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","","","","","","","<code>usize</code> の decremental set。","$i\\\\in S$ を返す。","$\\\\min_{j\\\\gt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\min_{j\\\\ge i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S=\\\\emptyset$ を返す。","$|S|$ を返す。","$\\\\max_{j\\\\lt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\max_{j\\\\le i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S\\\\gets\\\\{0, 1, \\\\dots, u-1\\\\}$ で初期化。","$S\\\\gets S\\\\setminus\\\\{i\\\\}$ で更新する。","$u$ を返す。","disjoint sparse table。","fold 可能両端キュー。","","","fold 可能キュー。","","","","直線の集合。","","","","","","","","","","区間から値への対応づけ。","","","","","","","","","Returns the argument unchanged.","","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{\\\\cup} (k…","","","","Calls <code>U::from(self)</code>.","","","$S=\\\\emptyset$ を返す。","","","","$S\\\\gets\\\\emptyset$ で初期化する。","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{…","","$T\\\\subseteq S$ かつ <code>b</code> を含む $T$ …","","","","","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","","ポテンシャルつき union-find。","","削除可能ヒープ。","空のとき <code>true</code> を返す。","要素数を返す。","空のヒープで初期化する。","最大値を取得する。","最大値を取り出す。","要素を追加する。","要素を削除する。","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","","","","","","","","function graph。","全方位木 DP。","","","","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","","","","Returns the argument unchanged.","Returns the argument unchanged.","","functional graph。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","lowlink に基づく強連結成分分解。","強連結成分分解。","","全方位木 DP。","","","","","","","","","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","function graph。","$(\\\\mu_i, \\\\lambda_i)$ を返す。","lowlink に基づく強連結成分分解。","全方位木 DP。","","Carmichael の $\\\\lambda$ 関数。","商が共通の区間の列挙。","篩。","定数除算。","定数除算。","離散対数。","桁和。","約数列挙。","Chinese remaindering。","Chinese remaindering。","Euler の $\\\\varphi$ 関数。","素因数分解。","素因数分解。","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","Lagrange 補間。","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","","","Ackermann 関数。","法 $p$ での二項係数。","","","","位数。","冪乗。","tetration。","","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","2-SAT。","","","","","","","","組合せのビット表現。","組合せのビット表現。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","","","","","","商が共通の区間の列挙。","","篩。","定数除算。","連分数展開。","連分数展開。","","","","桁和。","","","","","","","","約数列挙。","","離散対数。","","","","","","","Chinese remaindering","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","素因数分解。","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","最大公約数。","","最大公約数と逆元。","","","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","Lagrange 補間。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","Ackermann 関数。","","法 $p$ での二項係数。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","素数の数え上げ。","素数の数え上げ。","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","平方根の連分数展開。","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","Stern–Brocot tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","Carmichael の $\\\\lambda$ 関数。","","商が共通の区間の列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","篩。","","","","定数除算。","定数除算。","","","","","","","連分数展開。","桁和。","","","約数列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","離散対数。","","Chinese remaindering。","Chinese remaindering。","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","Lagrange 補間。","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$n$ の約数の総和を返す。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","法 $m$ での逆元を返す。","Ackermann 関数。","","法 $p$ での二項係数。","$i!/(j!\\\\cdot (i-j)!) \\\\bmod p$ を返す。","$i! \\\\bmod p$ を返す。","$i!^{-1} \\\\bmod p$ を返す。","$(0!, 1!, \\\\dots, n!)$ と $(0!^{-1}, 1!^{-1}, \\\\dots, …","$i!/(i-j)! \\\\bmod p$ を返す。","$i^{-1} \\\\bmod p$ を返す。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","素数の数え上げ。","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","$n^2+1$ の形の素数を返す。","$n^2+n+1$ 型素数の篩。","$n^2+n+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+n+1$ が素数のとき真を返す。","初期化する。","$n^2+n+1$ の形の素数を返す。","区分線形凸関数。","","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","平方根。","","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KMP 法。","","","接尾辞配列。","","","","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","接尾辞配列。","自身を消費し、内部表現を返す。","高さ配列を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","二分探索。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","イテレータのグルーピング。","","単位元を持つ。","","","","","代入される型。","","要素の型。","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","ポテンシャル関数。","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","イテレータのグルーピング。","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","","代数的構造に関するトレイトたちです。","二分探索。","","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","ポテンシャルの差を求める。","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合の要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","分割を返す。","","","","ポテンシャル関数。","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","ポテンシャルの差を定義する。","$u$ を含む集合の代表元を返す。","代表元とのポテンシャルの差を求める。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","イテレータのグルーピング。","Examples","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","","","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","","単位元を返す。","積 $x \\\\ast y$ を返す。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","加法 $\\\\circ$ の単位元 $0$ を返す。","二分探索。","","","","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","分割を返す。","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","","要素の型。","","ポテンシャル関数。","ポテンシャルの差を求める。","集合が空であれば <code>true</code> を返す。","集合の要素数 $n$ を返す。","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","ポテンシャルの差を定義する。","代表元とのポテンシャルの差を求める。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","イテレータのグルーピング。","Examples","","","","","","","","","","","","","","","","","","和を返す演算を持つ。","","","","","","","","","","任意の結合的な演算を持つ。","","","","最大値を返す演算を持つ。","","最小値を返す演算を持つ。","","積を返す演算を持つ。","","…","","","","","","","","","形式つき出力（改行区切り）。","","","スキャナ。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","","境界チェックを行う。","境界チェックを行う。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","加法に関する wrapper クラス。","加法に関する wrapper クラス。","","","","加法に関する wrapper クラス。","","クロージャの wrapper クラス。","","","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","","","","","","","","","形式つき出力。","","","","","乱数生成マクロ。","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","境界チェックを行う。","境界チェックを行う。","","","","","和を返す演算を持つ。","","","","","","","","","","","","","","","","","","","任意の結合的な演算を持つ。","","","","","","","","","最大値を返す演算を持つ。","","","","","最小値を返す演算を持つ。","","","","","積を返す演算を持つ。","","","","","…","","","","","","","","形式つき出力（改行区切り）。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","スキャナ。","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,9,15,16,5,21,9,15,16,5,0,0,0,5,0,0,0,0,0,0,21,9,9,15,16,5,15,16,0,0,0,0,0,21,9,15,16,5,15,16,0,0,0,0,0,0,0,0,0,0,15,16,0,0,0,0,0,0,0,0,21,9,15,16,5,21,9,15,16,5,21,9,15,16,5,15,16,21,9,15,16,5,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,21,21,0,0,0,0,0,0,0,0,0,0,9,9,9,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,0,0,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,23,44,44,39,40,44,44,0,0,0,48,23,27,32,33,34,22,41,37,0,24,26,23,28,36,48,23,29,30,44,39,48,24,26,23,23,27,28,29,30,32,33,34,35,36,39,22,41,58,32,33,22,41,22,41,22,41,0,0,66,58,58,58,60,60,48,44,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,39,40,22,22,22,41,41,41,48,23,29,30,22,41,0,58,44,41,0,0,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,48,28,35,35,37,40,0,37,40,23,23,23,33,32,32,33,0,33,32,33,32,44,37,0,40,37,0,41,23,23,23,23,23,23,0,23,23,23,23,23,23,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,0,40,0,0,66,58,60,48,44,24,26,23,27,28,29,30,32,33,34,35,36,37,38,39,40,22,41,0,0,24,24,24,24,0,26,26,26,26,26,26,0,0,0,23,23,23,62,61,62,61,23,23,23,23,62,61,62,61,23,23,62,61,62,61,23,23,23,23,61,23,62,61,62,61,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,62,61,62,61,62,61,62,61,62,61,23,23,23,0,27,27,27,27,27,27,27,27,0,0,65,65,28,65,65,28,28,65,65,28,28,28,28,28,65,28,65,28,28,65,65,65,65,65,0,29,29,29,29,29,29,0,30,30,30,30,30,30,0,66,66,66,66,66,66,66,66,66,66,0,0,32,32,0,33,33,0,0,34,34,34,57,57,34,57,57,0,0,68,68,68,68,68,68,68,68,68,68,68,35,68,68,68,68,68,68,35,68,68,35,35,68,35,68,35,68,68,68,68,68,0,36,36,36,36,36,36,36,36,36,0,60,0,37,0,38,38,38,38,38,38,38,0,39,39,0,0,0,72,71,72,71,48,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,71,72,72,71,72,48,48,72,48,48,72,48,48,48,71,48,72,72,71,72,71,72,71,72,72,71,0,0,22,22,22,0,41,41,41,0,0,43,44,44,44,44,43,43,44,43,0,0,75,73,75,73,73,73,0,0,0,0,73,73,75,75,73,73,0,75,73,0,0,73,0,75,73,75,73,75,73,75,73,0,0,0,73,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,159,0,0,0,0,0,0,76,77,77,77,77,77,77,0,0,94,98,99,100,106,77,78,79,80,81,82,83,84,85,94,98,99,100,106,77,78,79,80,81,82,83,84,85,0,160,161,77,78,79,80,81,82,83,84,85,77,78,79,80,81,82,83,84,85,0,156,0,0,0,0,77,85,162,0,162,77,77,77,77,77,77,0,157,0,163,77,78,79,80,81,0,164,165,0,166,0,158,0,159,77,77,80,81,82,83,84,85,94,98,99,100,106,77,78,79,80,81,82,83,84,85,0,167,0,168,161,77,0,77,0,94,98,99,100,106,77,78,79,80,81,82,83,84,85,0,169,0,170,0,0,171,0,0,172,0,173,0,0,0,174,0,161,77,77,77,77,77,77,77,77,161,161,77,161,0,0,77,77,161,0,0,0,0,175,0,0,0,0,0,77,77,77,77,77,77,77,77,77,78,79,80,81,82,83,84,85,77,94,98,99,100,106,77,78,79,80,81,82,83,84,85,94,98,99,100,106,77,78,79,80,81,82,83,84,85,0,94,98,99,100,106,77,78,79,80,81,82,83,84,85,94,98,99,100,106,77,78,79,80,81,82,83,84,85,0,0,160,0,0,156,90,90,156,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,94,94,94,0,0,80,81,80,81,80,81,0,0,162,162,0,0,157,95,95,157,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,163,0,0,164,165,0,166,0,0,158,96,96,96,96,96,96,96,96,96,96,96,96,96,96,158,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,0,159,97,97,97,97,97,97,97,97,97,97,97,97,97,97,159,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,167,0,168,0,82,82,82,0,98,98,0,169,0,170,0,99,99,99,99,99,99,99,99,99,99,99,99,0,171,0,100,100,100,100,100,100,0,172,0,173,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,76,102,102,102,102,102,102,101,104,103,102,104,103,102,104,161,102,104,102,104,103,103,102,102,102,102,102,102,102,102,104,102,102,104,103,102,104,161,102,102,104,103,102,104,161,102,102,102,102,102,102,102,102,102,161,103,161,102,161,102,102,161,87,102,102,102,102,102,102,102,102,102,102,104,102,103,102,104,103,102,104,103,102,104,103,102,104,0,0,83,83,83,83,83,0,84,84,84,84,84,0,0,85,85,85,85,85,105,85,85,85,85,85,85,0,175,0,0,0,0,106,106,106,0,0,0,108,109,110,108,109,110,108,109,110,108,109,110,108,109,110,108,109,110,108,108,109,109,109,110,110,109,108,109,110,0,108,108,0,108,109,110,108,109,110,108,109,110,108,109,110,108,109,110,0,0,0,112,112,112,112,112,112,112,108,112,112,112,112,112,0,109,109,109,109,0,0,114,114,114,114,114,114,114,110,114,114,114,114,114,110,0,176,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,179,180,181,182,183,18,184,0,0,0,0,0,0,0,0,177,0,185,185,179,186,187,188,189,190,191,192,0,0,0,0,0,0,0,0,0,0,0,178,0,193,177,0,0,0,0,0,0,0,0,0,0,0,176,185,0,177,0,177,0,0,179,0,194,195,18,196,184,0,0,197,195,198,199,0,200,0,186,0,201,202,197,0,187,0,203,178,204,195,197,184,195,184,197,0,122,0,119,177,188,0,177,177,195,184,18,205,177,193,185,185,206,195,189,191,190,0,18,180,182,181,0,0,192,0,207,208,184,195,184,197,18,0,183,209,210,197,0,195,195,0,211,118,177,0,176,176,0,185,185,185,185,185,0,0,0,118,177,0,0,0,0,0,0,0,0,0,0,0,177,0,0,0,0,193,177,177,177,204,177,177,177,177,193,206,207,208,177,0,179,179,179,0,0,0,47,47,47,47,194,196,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,195,195,195,195,195,195,195,195,195,0,0,0,178,178,0,0,0,197,198,199,197,178,197,197,197,209,210,197,0,200,0,186,186,0,0,201,202,0,187,187,0,203,0,122,0,119,0,0,0,0,188,188,205,0,184,0,0,184,184,184,184,184,184,180,181,182,189,190,191,0,0,0,0,0,0,189,191,190,180,182,181,192,0,192,0,0,0,0,0,0,0,183,0,183,18,0,18,18,18,18,0,211,141,142,143,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,131,0,0,133,0,0,0,135,0,136,0,137,0,138,0,139,212,0,0,0,0,0,0,0,0,0,0,0,0,0,131,132,133,135,136,137,138,115,121,123,124,125,0,0,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,0,0,0,0,0,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,131,132,115,121,123,133,124,134,125,135,136,137,138,139,0,131,132,133,135,136,137,138,139,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,131,132,115,121,123,133,124,134,125,135,136,137,138,139,141,142,143,144,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,212,131,132,133,134,135,136,137,138,139,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,213,214,0,131,132,133,134,135,136,137,138,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,121,123,124,125,115,121,123,124,125,140,0,131,138,215,216,0,131,0,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,141,142,143,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,141,142,143,144,126,127,128,129,130,131,132,115,121,123,133,124,134,125,135,136,137,138,139,140,217,218,219,220,221,222,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,127,128,129,130,126,127,128,129,130,215,216,0,0,0,0,0,213,214,0,0,131,131,217,0,0,132,132,218,0,0,0,0,0,133,133,219,0,0,134,0,125,0,0,135,135,220,0,0,136,136,221,0,0,137,137,222,0,0,138,138,223,0,0,139,139,141,142,143,143,0,0,0,146,151,0,0,0,0,0,0,224,212,0,0,0,0,0,145,146,147,150,148,149,151,145,146,147,150,148,149,151,146,148,146,147,150,148,149,151,146,147,150,148,149,151,145,146,145,146,147,150,148,149,151,212,225,145,146,147,150,148,149,151,149,140,224,146,148,145,146,147,150,148,149,151,145,146,147,150,148,149,151,145,146,147,150,148,149,151,145,146,147,150,148,149,151,145,146,147,150,148,149,151,154,0,0,0,152,152,152,152,152,152,144,144,144,144,144,152,144,144,144,152,154,152,152,152,152,152],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],1],0,[3,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[1],[[],5],0,0,[[[2,[1]],3]],0,[[[7,[6]],6,3]],[3],[[]],[[[4,[8]]],[[9,[8]]]],[[]],[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[4,12],0,0,[3,[[4,[1]]]],[3,[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],13],0,0,[[],13],[3,13],[[],13],0,[[4,[13,[1]]],4],[[[15,[[0,[14,8]]]]],13],[[[16,[[0,[14,8]]]]],13],[[],17],[[],[[11,[1]]]],0,0,[[18,4],[[4,[1]]]],0,[[],17],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[]],[[]],[[]],0,[[],[[4,[1]]]],[[[2,[1]],3],1],[3,1],0,[5,[[4,[[4,[1]]]]]],[5,[[13,[[4,[1]]]]]],[4,5],[[[2,[1]],3]],[3],[[[7,[6]],6,3]],[4,12],[3,[[4,[1]]]],[3,[[4,[1]]]],[[],4],0,[[1,1],21],[21],[[],13],[[],13],[3,13],[[],13],[[4,[13,[1]]],4],[[],[[11,[1]]]],[[18,4],[[4,[1]]]],0,0,0,[[[9,[[0,[8,14]]]],1],[[16,[[0,[8,14]]]]]],[[[9,[[0,[8,14]]]],1],[[15,[[0,[8,14]]]]]],[[[9,[8]]],17],[[],17],[[[9,[8]]]],[[[9,[8]]],17],[[],17],[[]],[1],[[],[[4,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[22],0,0,0,[[23,23],23],[[23,23],23],[[23,23],23],[[23,23],23],[[23,23]],[[23,23]],[[23,23],23],[[23,23],23],[[23,23],23],[[23,23],23],[[23,23]],[[23,23]],[[23,23],23],[[23,23],23],[[23,23],23],[[23,23],23],[[23,23]],[[23,23]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[24,[[0,[14,8,14]]]]],[[24,[[0,[14,8,14]]]]]],[[[26,[[0,[14,25]]]]],[[26,[[0,[14,25]]]]]],[23,23],[[[27,[[0,[14,8]],[0,[14,8]]]]],[[27,[[0,[14,8]],[0,[14,8]]]]]],[[[28,[14]]],[[28,[14]]]],[[[29,[14,14]]],[[29,[14,14]]]],[[[30,[14]]],[[30,[14]]]],[[[32,[[0,[14,31]]]]],[[32,[[0,[14,31]]]]]],[[[33,[[0,[14,31]]]]],[[33,[[0,[14,31]]]]]],[[[34,[[0,[14,8]]]]],[[34,[[0,[14,8]]]]]],[[[35,[14,14]]],[[35,[14,14]]]],[[[36,[[0,[14,8]]]]],[[36,[[0,[14,8]]]]]],[[[37,[[0,[14,25]]]]],[[37,[[0,[14,25]]]]]],[[[38,[14]]],[[38,[14]]]],[39,39],[40,40],[[[22,[14]]],[[22,[14]]]],[[[41,[14]]],[[41,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[23,23],42],[[[44,[43]],[45,[1]],43],1],[[[44,[43]],[45,[1]],[7,[43]]],1],[[39,[45,[1]],46],1],[[40,1],1],[[[44,[43]],[45,[1]],[7,[43]]],47],[[[44,[43]],[45,[1]],43],47],0,0,0,[[],[[48,[8]]]],[[],23],[[],[[27,[[0,[49,8]],[0,[49,8]]]]]],[[],[[32,[31]]]],[[],[[33,[31]]]],[[],[[34,[[0,[49,8]]]]]],[[],[[22,[49]]]],[[],41],[[[37,[25]],1,1],13],0,[[[24,[[0,[50,8,14]]]],24],17],[[[26,[[0,[50,25]]]],26],17],[[23,23],17],[[[28,[50]],28],17],[[[36,[[0,[50,8]]]],36],17],[[[48,[8]],51]],[23],[[[29,[[0,[52,53]]]]]],[[[30,[[0,[52,53]]]]]],[[[44,[43]],[45,[1]],43,1],[[13,[1]]]],[[39,[45,[1]],46,1],[[13,[1]]]],[[[48,[54]],55],56],[[[24,[[0,[54,8,14]]]],55],56],[[[26,[[0,[54,25]]]],55],56],[[23,55],56],[[23,55],56],[[[27,[[0,[54,8]],[0,[54,8]]]],55],56],[[[28,[54]],55],56],[[[29,[54,54]],55],56],[[[30,[54]],55],56],[[[32,[[0,[54,31]]]],55],56],[[[33,[[0,[54,31]]]],55],56],[[[34,[57]],55],56],[[[35,[[0,[8,54]],54]],55],56],[[[36,[[0,[54,8]]]],55],56],[[39,55],56],[[22,55],56],[[41,55],56],[58],[[[32,[31]],59]],[[[33,[31]],59]],[22],[41],[[22,1]],[[41,1]],[[22,1]],[[41,1]],0,0,[[]],[[]],[4,58],[[],58],[[]],[[[4,[[0,[14,8]]]]],[[60,[[0,[14,8]]]]]],[[]],[[]],[[[4,[43]]],[[44,[43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[17]]],39],[[]],[4,22],[[],22],[[]],[[]],[4,41],[[],41],[51,[[48,[8]]]],[[],23],[[],[[29,[[0,[52,53]]]]]],[[],[[30,[[0,[52,53]]]]]],[[22,1],[[13,[0]]]],[[41,1],[[13,[0]]]],0,[[58,1]],[[[44,[43]],1]],[[41,1]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[8]]]],[28],[[[35,[8,52]]]],[35],[[[37,[25]]],1],[40,1],0,[[1,25],[[37,[25]]]],[1,40],[23,23],[23,23],[[23,23],[[13,[42]]]],[[[33,[31]]],13],[[[32,[31]]],13],[[[32,[31]]],13],[[[33,[31]]],13],0,[[[33,[31]]]],[[[32,[31]]]],[[[33,[31]]]],[[[32,[31]]]],[[[44,[43]],[45,[1]],1],[[13,[43]]]],[[[37,[25]],1,1],[[19,[17]]]],0,[[40,1],1],[[[37,[25]],1]],0,[[41,1]],[[23,1],23],[[23,1],23],[[23,1]],[[23,1],23],[[23,1],23],[[23,1]],0,[[23,23],23],[[23,23],23],[[23,23],23],[[23,23],23],[[23,23]],[[23,23]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[40,1,1],17],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[24,[[0,[8,14]]]],[0,[8,14]]]],[[[24,[[0,[8,14]]]]],13],[[],[[24,[[0,[8,14]]]]]],[[[24,[[0,[8,14]]]]],17],0,[[[26,[25]]]],[[[26,[25]]],13],[[[26,[25]]]],[[],[[26,[25]]]],[[[26,[25]]],17],[25,[[26,[25]]]],0,0,0,[[23,23],23],[[23,23]],[[23,17]],[[]],[[]],[[]],[[]],[23,1],[[23,1],17],[[23,[45,[1]]],[[13,[1]]]],[[23,[45,[1]]],[[13,[1]]]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[[23,[45,[1]]],61],[[23,1]],[[]],[[]],[[]],[[]],[[23,23],23],[[23,23]],[23,17],[23,1],[[23,[2,[1]]],61],[1,23],[62,13],[61,13],[62,13],[61,13],[23,23],[23],[[23,23],23],[[23,23]],[[23,1]],[[23,1]],[[23,1]],[[23,1],23],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1,23,63],23],[[23,1,23,63]],[[23,1,63],23],[[23,1,63]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1],23],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1,23,63],23],[[23,1,23,63]],[[23,1,63],23],[[23,1,63]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,1,23],23],[[23,1,23]],[[23,1],23],[[23,1]],[[23,23],23],[[23,23]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[23,[45,[1]]],62],[[23,23],23],[[23,23]],0,[[[27,[[0,[14,8]],[0,[14,8]]]],[0,[14,8]],[0,[14,8]]]],[[[27,[[0,[14,8]],[0,[14,8]]]]],17],[[[27,[[0,[14,8]],[0,[14,8]]]]],1],[[],[[27,[[0,[14,8]],[0,[14,8]]]]]],[[[27,[[0,[14,8]],[0,[14,8]]]]],[[64,[[0,[14,8]],[0,[14,8]]]]]],[[[27,[[0,[14,8]],[0,[14,8]]]]],[[64,[[0,[14,8]],[0,[14,8]]]]]],[[[27,[[0,[14,8]],[0,[14,8]]]]]],[[[27,[[0,[14,8]],[0,[14,8]]]]]],0,0,[[]],[[]],[[[28,[8]]],1],[[]],[3,[[11,[[4,[10]],10]]]],[[[28,[8]],8]],[[[28,[8]],8,1]],[[]],[[]],[[[28,[8]]],17],[[[28,[8]]],[[65,[8]]]],[[[28,[8]]],1],[[[28,[8]]],13],[[[28,[8]]],13],[28,[[65,[8]]]],[[],[[28,[8]]]],[65,13],[[[28,[8]]]],[[[28,[8]],1]],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],0,[[[29,[[0,[52,53]]]]],17],[[[29,[[0,[52,53]]]],[0,[52,53]]],13],[[[29,[[0,[52,53]]]]],17],[[[29,[[0,[52,53]]]]],1],[[],[[29,[[0,[52,53]]]]]],[[[29,[[0,[52,53]]]]],13],0,[[[30,[[0,[52,53]]]]],17],[[[30,[[0,[52,53]]]],[0,[52,53]]],17],[[[30,[[0,[52,53]]]]],17],[[[30,[[0,[52,53]]]]],1],[[],[[30,[[0,[52,53]]]]]],[[[30,[[0,[52,53]]]]],17],0,[[66,1],17],[[66,1],[[13,[1]]]],[[66,1],[[13,[1]]]],[66,17],[66,1],[[66,1],[[13,[1]]]],[[66,1],[[13,[1]]]],[1,66],[[66,1],17],[66,1],0,0,[[],[[32,[31]]]],[31,[[32,[31]]]],0,[[],[[33,[31]]]],[31,[[33,[31]]]],0,0,[[[34,[57]]],1],[[[34,[57]],57],[[13,[57]]]],[[],[[34,[57]]]],[[]],[[]],[[[34,[57]]]],[[]],[[],67],0,0,[[]],[[]],[[[68,[14]]],[[68,[14]]]],[[]],[[[68,[8]],[68,[8]]],42],[[[68,[8]],[68,[8]]],[[13,[[68,[8]]]]]],[[[68,[50]],68],17],[[[68,[54]],55],56],[[]],[[[45,[[0,[8,14]]]]],[[68,[[0,[8,14]]]]]],[[[68,[8]]],13],[[[35,[[0,[8,14]],[0,[52,14]]]],[45,[[0,[8,14]]]],[0,[52,14]]]],[[[68,[8]],[68,[8]]],[[13,[[68,[8]]]]]],[[[68,[[0,[8,14]]]],[68,[[0,[8,14]]]]]],[[[68,[8]],[68,[8]]],17],[[]],[[[68,[8]],[68,[8]]],17],[[[68,[8]]],17],[[[35,[[0,[8,14]],[0,[52,14]]]]],17],[[[68,[8]],[68,[8]]],17],[[[68,[8]],[68,[8]]],17],[[[35,[[0,[8,14]],[0,[52,14]]]]],[[0,[12,69]]]],[[],[[35,[[0,[8,14]],[0,[52,14]]]]]],[[[68,[8]],[68,[8]]],[[13,[42]]]],[[[35,[[0,[8,14]],[0,[52,14]]]],[45,[[0,[8,14]]]]],4],[[[68,[8]]],13],[[[35,[[0,[8,14]],[0,[52,14]]]],[45,[[0,[8,14]]]]],13],[[]],[[],19],[[],19],[[],20],[[]],0,[[[36,[[0,[14,54,8]]]]]],[[[36,[[0,[14,54,8]]]]],13],[[[36,[[0,[14,54,8]]]]],17],[[[36,[[0,[14,54,8]]]],[45,[[0,[14,54,8]]]]]],[[[36,[[0,[14,54,8]]]]],17],[[[36,[[0,[14,54,8]]]]],[[0,[12,69]]]],[[[36,[[0,[14,54,8]]]]],70],[[],[[36,[[0,[14,54,8]]]]]],[[[36,[[0,[14,54,8]]]],[45,[[0,[14,54,8]]]]]],0,[[[60,[[0,[14,8]]]],1,1]],0,[1,[[37,[25]]]],0,[[[38,[8]]],17],[[[38,[8]]],1],[[],[[38,[8]]]],[[[38,[8]]],13],[[[38,[8]]],[[13,[8]]]],[[[38,[8]],8]],[[[38,[8]],8]],0,[[39,1,46],1],[[39,46,1],[[13,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[[48,[8]]]],[[[71,[8]]]],[[[71,[8]]]],[[[71,[8]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[]],[[[48,[8]]],17],[[[48,[8]]],1],[[[72,[8]]],1],[[[48,[8]],[48,[8]]]],[[],[[48,[8]]]],[[[72,[8]]],13],[[[48,[8]]],13],[[[48,[8]]],[[13,[[71,[8]]]]]],[[[48,[8]]],[[13,[8]]]],[[[71,[8]]],8],[[[48,[8]],8]],[[[72,[8]]]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],[[]],0,0,[22,17],[22,1],[1,22],0,[41,17],[41,1],[1,41],0,0,[[],1],[[[44,[43]]],17],[[[44,[43]]],1],[[[44,[43]],1,43],1],[[[44,[43]],43,1],[[13,[1]]]],[1],[1,17],[[[44,[43]],[45,[1]],1,43],[[13,[43]]]],[[]],0,0,[[]],[[]],[[]],[[]],[73,73],[[]],[[1,3,3],[[4,[13]]]],0,[[1,[0,[12,14]],[0,[63,74]],[0,[63,74]],[0,[63,74]]]],0,[[73,73],17],[[73,55],56],[[[4,[4]]],75],[[]],[[]],[[[4,[1]]],73],0,[[]],[[]],[[1,12,[0,[63,74]],[0,[63,74]]],[[4,[1]]]],0,[[]],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[1,3,3],[[4,[13]]]],[[1,[0,[12,14]],[0,[63,74]],[0,[63,74]],[0,[63,74]]]],0,[[73,1]],[[1,12,[0,[63,74]],[0,[63,74]]],[[4,[1]]]],0,[[75,14,3,3],[[4,[14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[77,[76]],77],[[77,[76]]]],[[77,[77,[76]]],[[77,[76]]]],[[[77,[76]],[77,[76]]],[[77,[76]]]],[[77,77],[[77,[76]]]],[[[77,[76]],[77,[76]]]],[[[77,[76]],77]],[[1,1],12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[],13],[[[77,[14]]],[[77,[14]]]],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[[[85,[[0,[14,8]]]]],[[85,[[0,[14,8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,[12,12],0,[[],[[77,[76]]]],[[],[[85,[[0,[49,8]]]]]],[86],0,[[]],[[77,[77,[76]]],[[77,[76]]]],[[77,77],[[77,[76]]]],[[[77,[76]],[77,[76]]],[[77,[76]]]],[[[77,[76]],77],[[77,[76]]]],[[[77,[76]],[77,[76]]]],[[[77,[76]],77]],0,[[]],0,[[],13],[[[77,[50]],77],17],[[78,78],17],[[79,79],17],[[80,80],17],[[81,81],17],0,[[],13],[[],13],0,[[]],0,[[]],0,[[]],[[[77,[76]],55],56],[[[77,[76]],55],56],[[80,55],56],[[81,55],56],[[82,55],56],[[83,55],56],[[84,55],56],[[[85,[[0,[54,8]]]],55],56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,[[]],[[],86],[[[77,[76]]],86],0,[[[77,[76]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,[[]],0,0,[[]],0,0,[[],13],0,[[]],0,[[46,46],[[4,[46]]]],0,[[]],0,[[],86],[[],86],[[77,77],[[77,[76]]]],[[[77,[76]],[77,[76]]],[[77,[76]]]],[[[77,[76]],77],[[77,[76]]]],[[77,[77,[76]]],[[77,[76]]]],[[[77,[76]],77]],[[[77,[76]],[77,[76]]]],[[[77,[76]]],[[77,[76]]]],[87],[86],[86,[[77,[76]]]],[46],[1,1],0,[[],[[77,[76]]]],[[],[[77,[76]]]],[[]],0,0,0,0,[[]],[88,12],0,[88],[[88,3,3],19],0,[[77,77],[[77,[76]]]],[[[77,[76]],77],[[77,[76]]]],[[77,[77,[76]]],[[77,[76]]]],[[[77,[76]],[77,[76]]],[[77,[76]]]],[[[77,[76]],[77,[76]]]],[[[77,[76]],77]],[[],[[77,[76]]]],[[],[[77,[76]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],89],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],12],0,[[]],0,0,0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[90,[46]]],13],[[[90,[1]]],13],[[[90,[91]]],13],[[[90,[86]]],13],[[[90,[92]]],13],[[[90,[93]]],13],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],0,[[94,1],17],[1,94],[94,12],0,0,[46,80],[46,81],[[80,46],46],[[81,46],46],[[80,46],46],[[81,46],46],[12,12],0,[86],[[]],0,0,0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[95,[46]]],[[13,[46]]]],[[[95,[91]]],[[13,[91]]]],[[[95,[86]]],[[13,[86]]]],[[[95,[92]]],[[13,[92]]]],[[[95,[93]]],[[13,[93]]]],[[[95,[1]]],[[13,[1]]]],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],0,[[],13],0,0,[[],13],[[],13],0,[[]],0,0,0,[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[96,[93]]],13],[[[96,[1]]],13],[[[96,[91]]],13],[[[96,[46]]],13],[[[96,[86]]],13],[[[96,[92]]],13],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],0,0,0,[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[97,[1]]],[[13,[1]]]],[[[97,[93]]],[[13,[93]]]],[[[97,[92]]],[[13,[92]]]],[[[97,[91]]],[[13,[91]]]],[[[97,[46]]],[[13,[46]]]],[[[97,[86]]],[[13,[86]]]],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],0,[[]],0,[[]],0,[1,82],[[82,[45,[1]]],1],[[82,[45,[1]]],1],0,[[98,46],46],[[[4,[46]],46],98],0,[[]],0,[[]],0,[[99,1],[[0,[12,69]]]],[[99,1],1],[[99,1],1],[[99,1],1],[[99,1],1],[[99,1],12],[[99,1],12],[[99,1],17],[[99,1],[[13,[1]]]],[1,99],[99,[[0,[12,69]]]],[[99,1,1],[[4,[1]]]],0,[[]],0,[[100,1,1],46],[[100,1],46],[[100,1],46],[[1,46],100],[[100,1,1],46],[[100,1],46],0,[[],13],0,[[]],[[46,46],[[4,[46]]]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[102,[101]],[102,[101]]],[[102,[101]]]],[[102,102],[[102,[101]]]],[[[102,[101]],102],[[102,[101]]]],[[102,[102,[101]]],[[102,[101]]]],[[[102,[101]],102]],[[[102,[101]],[102,[101]]]],[[],103],[[],103],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[[102,[14]]],[[102,[14]]]],[104,104],[[]],[[]],[[],103],[[],103],[[],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[102,[102,[101]]],[[102,[101]]]],[[102,102],[[102,[101]]]],[[[102,[101]],102],[[102,[101]]]],[[[102,[101]],102]],[[[102,[101]],[102,[101]]]],[[[102,[50]],102],17],[[104,104],17],[[[102,[101]],55],56],[[[102,[101]],55],56],[[104,55],56],[[]],[[]],[[]],[[],86],[[[102,[101]]],86],[[[102,[101]]]],[104],[[]],[[]],[[]],[[],86],[[],86],[[],86],[[102,[102,[101]]],[[102,[101]]]],[[102,102],[[102,[101]]]],[[[102,[101]],102],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],102]],[[[102,[101]],[102,[101]]]],[[[102,[101]]],[[102,[101]]]],[87],[86,103],[86],[86,[[102,[101]]]],[46],[[],[[102,[101]]]],[[],[[102,[101]]]],[[]],[86,86],[86],[[[102,[101]],102],[[102,[101]]]],[[102,102],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[102,[102,[101]]],[[102,[101]]]],[[[102,[101]],102]],[[[102,[101]],[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[]],[[]],[[],89],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],[1,1],0,[[83,1],12],[[83,1],12],[[83,1],17],[1,83],[83,12],0,[[84,1],12],[[84,1],12],[[84,1],17],[1,84],[84,12],0,0,[[[85,[105]],105]],[[[85,[105]],105]],[[[85,[105]],105]],[[[85,[105]],105]],[[[85,[105]]]],[[]],[[[85,[105]]],105],[[[85,[105]]]],[[[85,[105]]]],[[],[[85,[105]]]],[[[85,[105]],105]],[[[85,[105]],[7,[105]]]],0,[[]],[88,12],[88],[[88,3,3],19],0,[[106,107,107]],[1,106],[106,[[13,[[4,[17]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[108,[[0,[14,52]]]]],[[108,[[0,[14,52]]]]]],[[[109,[[0,[14,8]]]]],[[109,[[0,[14,8]]]]]],[[[110,[[0,[14,52]]]]],[[110,[[0,[14,52]]]]]],[[]],[[]],[[]],[[[108,[[0,[50,52]]]],108],17],[[[109,[[0,[50,8]]]],109],17],[[[110,[[0,[50,52]]]],110],17],[[[108,[[0,[54,52]]]],55],56],[[[109,[[0,[54,8]]]],55],56],[[[110,[[0,[54,52]]]],55],56],[[[4,[52]]],[[108,[52]]]],[[]],[[[4,[8]]],[[109,[8]]]],[[]],[89,[[109,[111]]]],[[]],[[[4,[[0,[14,52]]]]],[[110,[[0,[14,52]]]]]],[[[109,[8]],1],1],[[]],[[]],[[]],0,[[[108,[52]]],[[13,[1]]]],[[[108,[52]],52]],0,[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[112,[52]]],13],[[[108,[52]]],[[112,[52]]]],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],0,[[[109,[8]]],[[4,[1]]]],[[[109,[8]]],[[4,[1]]]],[[[109,[8]]],12],[[[109,[111]],113],12],0,0,[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[114,[52]]],13],[[[110,[52]]],[[114,[52]]]],[[],19],[[],19],[[],20],[3,[[4,[[4,[10]],10]]]],[[]],[[[110,[52]],1],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[]],0,[[]],0,0,[3],0,[[[45,[1]]],1],[1,1],[[],1],[[[45,[1]]],47],[[1,1],13],0,0,[[],1],[[1,1],17],[[]],[[]],0,[[[45,[1]],1],[[13,[1]]]],0,[[]],0,[1],[1],[[],1],0,[1,13],0,[3,[[11,[8,4]]]],[[]],[[]],[[],17],[[],17],[[],17],[[],1],[[],1],[[],1],0,[[]],0,[[]],[[]],[[]],0,[[]],[[]],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],[[4,[[4,[1]]]]]],[[],13],[[],13],[[],13],0,[[],17],[[]],[[]],[[]],0,0,[[[45,[1]],1],13],0,[[]],[[]],[[1,1],[[19,[17]]]],[1,1],[1],[[]],[[]],0,[[]],[[]],[[]],[[],1],0,[1,[[4,[1]]]],[[1,1],17],0,[3,[[4,[4]]]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],[[]],0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[]],[[]],[[]],0,0,0,[3],0,0,0,[[]],[[]],[47,47],[[]],[[[45,[1]]],1],[[[45,[1]]],47],[[47,47],17],[47,1],[[47,55],56],[[]],[47,1],[47,1],[[]],[47,1],[47,1],[47,1],[[1,1,1],47],[[]],[[],19],[[],19],[[],20],[[]],0,[1,1],[[1,1],17],[[],17],[[],1],[1],[[],[[4,[[4,[1]]]]]],[1,1],[1,[[4,[1]]]],[[1,1],17],0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[],1],[[]],[[],17],[[],1],[[]],[[]],[[]],[[],1],0,[[[45,[1]],1],[[13,[1]]]],0,0,[[]],0,0,[1],[1],0,0,[1,13],0,[3,[[11,[8,4]]]],0,[[]],0,[[]],0,0,0,0,0,[[]],[[]],0,0,0,0,[[1,1],13],[[],17],[[],1],[1],[[1,1],[[19,[17]]]],[1],0,0,0,0,0,0,0,0,0,0,0,0,[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,[[[45,[1]],1],13],0,0,0,0,0,0,0,0,0,[[]],0,0,[[],1],[[]],[[],17],[[]],0,[3,[[4,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[115],[[[121,[[0,[8,52,116,117,118,119,120]]]],[0,[8,52,116,117,118,119,120]],[0,[8,52,116,117,118,119,120]]],[[0,[8,52,116,117,118,119,120]]]],[[[123,[[0,[8,52,116,117,118,122,120]]]],[0,[8,52,116,117,118,122,120]],[0,[8,52,116,117,118,122,120]]],[[0,[8,52,116,117,118,122,120]]]],[124],[125],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[45,[1]],1],[[2,[1]]]],0,[[],91],[[1,1]],[[1,[0,[[45,[1]],54]]]],[126,126],[127,127],[128,128],[129,129],[130,130],[[[131,[14]]],[[131,[14]]]],[[[132,[14]]],[[132,[14]]]],[[[115,[14]]],[[115,[14]]]],[[[121,[14]]],[[121,[14]]]],[[[123,[14]]],[[123,[14]]]],[[[133,[14]]],[[133,[14]]]],[[[124,[14]]],[[124,[14]]]],[[[134,[14,[0,[14,63]],[0,[14,63]]]]],[[134,[14,[0,[14,63]],[0,[14,63]]]]]],[[[125,[14,14,14,14,14,14,14]]],[[125,[14,14,14,14,14,14,14]]]],[[[135,[14]]],[[135,[14]]]],[[[136,[14]]],[[136,[14]]]],[[[137,[14]]],[[137,[14]]]],[[[138,[14]]],[[138,[14]]]],[139,139],[[[140,[14]]],[[140,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],131],[[],132],[[],[[115,[49]]]],[[],[[121,[49]]]],[[],[[123,[49]]]],[[],133],[[],[[124,[49]]]],[[],[[134,[49,[0,[49,63]],[0,[49,63]]]]]],[[],[[125,[49,49,49,49,49,49,49]]]],[[],135],[[],136],[[],137],[[],138],[[],139],0,[[[131,[50]],131],17],[[[132,[50]],132],17],[[[133,[50]],133],17],[[[135,[50]],135],17],[[[136,[50]],136],17],[[[137,[50]],137],17],[[[138,[50]],138],17],[[139,139],17],[[141,55],56],[[141,55],56],[[141,55],56],[[141,55],56],[[141,55],56],[[141,55],56],[[141,55],56],[[141,55],56],[[141,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[142,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[143,55],56],[[[131,[54]],55],56],[[[132,[54]],55],56],[[[115,[54]],55],56],[[[121,[54]],55],56],[[[123,[54]],55],56],[[[133,[54]],55],56],[[[124,[54]],55],56],[[[134,[54,[0,[54,63]],[0,[54,63]]]],55],56],[[[125,[54,54,54,54,54,54,54]],55],56],[[[135,[54]],55],56],[[[136,[54]],55],56],[[[137,[54]],55],56],[[[138,[54]],55],56],[[139,55],56],[[]],[[]],[[]],[89,144],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[131],[132],[133],[[[134,[52,63,63]]],52],[135],[136],[137],[138],[139],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],0,[131],[132],[133],[[[134,[52,63,63]],52,52],52],[135],[136],[137],[138],[139],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[115],[[[121,[[0,[8,52,116,117,118,119,120]]]]]],[[[123,[[0,[8,52,116,117,118,122,120]]]]]],[124],[125],[115],[[[121,[[0,[8,52,116,117,118,119,120]]]]]],[[[123,[[0,[8,52,116,117,118,122,120]]]]]],[124],[125],[140,145],0,[131,13],[138,13],[[]],[[]],0,[131],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],89],[[],89],[[],89],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],91],0,0,0,0,0,0,0,[126,93],[127,92],[128,86],[129,46],[130,91],[93,126],[92,127],[86,128],[46,129],[91,130],[[]],[[]],[[[45,[1]],1],[[2,[1]]]],[[1,1]],[[1,[0,[[45,[1]],54]]]],0,0,[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[63,63],[[134,[52,63,63]]]],0,[[134,134],125],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[139,113]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[146,91],147],[[148,91],149],[146,146],[147,147],[150,150],[148,148],[149,149],[151,151],[[]],[[]],[[]],[[]],[[]],[[]],[145,145],[146,150],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],89],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,149],[1,140],[[]],[146,146],[148,148],[145,145],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[152,152],17],[[152,55],56],[[152,55],56],[[]],[[],[[19,[144,153]]]],[144,113],[144,113],[144],[144],[[]],[144,[[19,[154]]]],[144,19],[[144,1],[[19,[4]]]],[155],[113],[[],89],[[],19],[[],19],[[],20],[[]]],"p":[[15,"usize"],[3,"Range"],[8,"FnMut"],[3,"Vec"],[3,"ExactCover"],[15,"f64"],[3,"RangeInclusive"],[8,"Ord"],[3,"Permutations"],[3,"Global"],[3,"BTreeMap"],[8,"Iterator"],[4,"Option"],[8,"Clone"],[3,"Forward"],[3,"Backward"],[15,"bool"],[8,"StatefulPred"],[4,"Result"],[3,"TypeId"],[3,"Larsch"],[3,"VecActSegtree"],[3,"BitSet"],[3,"BicrementalMedian"],[8,"CommutativeGroup"],[3,"BicrementalMedianDev"],[3,"BTreeBimap"],[3,"BTreeMultiset"],[3,"CuckooHashMap"],[3,"CuckooHashSet"],[8,"Monoid"],[3,"FoldableDeque"],[3,"FoldableQueue"],[3,"IncrementalLineSet"],[3,"IntervalMap"],[3,"IntervalSet"],[3,"PotentializedUnionFind"],[3,"RemovableHeap"],[3,"RsDict"],[3,"UnionFind"],[3,"VecSegtree"],[4,"Ordering"],[8,"WmInt"],[3,"WaveletMatrix"],[8,"RangeBounds"],[15,"u64"],[3,"Count3wayResult"],[3,"SkewHeap"],[8,"Default"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Eq"],[8,"Hash"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"ChtInt"],[3,"DisjointSparseTable"],[3,"RangeFull"],[3,"N1Rmq"],[3,"Indices"],[3,"Words"],[8,"Fn"],[3,"Range"],[3,"Iter"],[3,"DecrementalUsizeSet"],[15,"i8"],[3,"Interval"],[8,"DoubleEndedIterator"],[4,"Bound"],[3,"PeekMut"],[3,"IntoIter"],[3,"FunctionalGraph"],[8,"Copy"],[3,"TreeCata"],[8,"Modulus"],[3,"StaticModInt"],[3,"Mod998244353"],[3,"Mod1000000007"],[3,"ConstDiv2"],[3,"ConstDiv"],[3,"HarmonicFloorSum"],[3,"SieveN2Plus1"],[3,"SieveN2PlusNPlus1"],[3,"SlopeFunction"],[15,"u32"],[8,"RemEuclidU32"],[15,"i128"],[3,"String"],[3,"CommonQuotStruct"],[15,"u128"],[15,"u16"],[15,"u8"],[3,"CompactSieve"],[3,"DivisorsStruct"],[3,"FactorsStruct"],[3,"FactorsDupStruct"],[3,"Interpolation"],[3,"LinearSieve"],[3,"ModFactorialBinom"],[8,"DynamicModIntId"],[3,"DynamicModInt"],[3,"Barrett"],[4,"DefaultId"],[8,"SlopeTrickInt"],[3,"TwoSat"],[15,"isize"],[3,"KmpSearcher"],[3,"SuffixArray"],[3,"ZSearcher"],[15,"char"],[3,"Occurrences"],[15,"str"],[3,"Occurrences"],[3,"OpAddOnOpAddCount"],[8,"Add"],[8,"AddAssoc"],[8,"Zero"],[8,"Min"],[8,"Sized"],[3,"OpAddOnOpMax"],[8,"Max"],[3,"OpAddOnOpMin"],[3,"OpAffineOnOpAddCount"],[3,"OpClosureOnOpClosure"],[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[4,"OpAdd"],[4,"OpAddCount"],[4,"OpAffine"],[3,"OpClosure"],[4,"OpGcd"],[4,"OpMax"],[4,"OpMin"],[4,"OpMul"],[4,"OpRollHash"],[3,"VecMarker"],[3,"SpaceSep"],[3,"PerLine"],[3,"StrSep"],[3,"Scanner"],[3,"VecOptionsMarker"],[3,"AsciiString"],[3,"AsciiStringOfCharset"],[3,"Ascii"],[3,"AsciiGen"],[3,"AsciiStringOfDistribution"],[3,"Permutation"],[3,"ScanTupleError"],[3,"Error"],[8,"Scan"],[3,"Demand"],[8,"CommonQuot"],[8,"Divisors"],[8,"Factors"],[8,"FactorsDup"],[8,"CarmichaelLambda"],[8,"ModIntBase"],[8,"DigitSum"],[8,"DLog"],[8,"EquivMod"],[8,"EquivModIter"],[8,"EulerPhi"],[8,"Gcd"],[8,"GcdRecip"],[8,"Lcm"],[8,"LinearFloorSum"],[8,"ModAckermann"],[8,"ModOrd"],[8,"ModPow"],[8,"ModTetration"],[8,"Sqrt"],[8,"Act"],[8,"Ring"],[8,"SliceHash"],[8,"Bisect"],[8,"Push"],[8,"PushFront"],[8,"PushBack"],[8,"SetValue"],[8,"PotentialFunction"],[8,"MonoidAction"],[8,"Fold"],[8,"GetMut"],[8,"MulRecip"],[8,"Pop"],[8,"PopFront"],[8,"PopBack"],[8,"Quantile"],[8,"Magma"],[8,"Count"],[8,"DisjointSet"],[8,"Count3way"],[8,"ElasticSlice"],[8,"ExpandBack"],[8,"ExpandFront"],[8,"FindNth"],[8,"FoldBisect"],[8,"FoldBisectRev"],[8,"GroupBy"],[8,"Identity"],[8,"One"],[8,"PartialRecip"],[8,"Recip"],[8,"Field"],[8,"ShrinkBack"],[8,"ShrinkFront"],[8,"UsizeGroupBy"],[8,"RandomGenerator"],[8,"MakeMax"],[8,"MakeMin"],[8,"Pdep"],[8,"Pext"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[8,"GenOptions"],[8,"SeedableRngInspect"]]},\
"nekolib_notes":{"doc":"<code>nekolib</code> …","t":[0],"n":["range_add_on_the_fly"],"q":["nekolib_notes"],"d":["区間加算 (imos 法 + on-the-fly で遅延解消)。"],"i":[0],"f":[0],"p":[]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
