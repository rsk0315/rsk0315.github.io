var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","t":"AAOAAOOOAAADDDIDDIIIFAFLLLLLLLLLLFFFLAAFAFFLLLLLLLLFAAFFLLLLLLLAKAAFAAFFFAFLLFFAAFAFAKLLKLLKLLALLLLLLLLLLLLLLLLLLLLLLAFFFDLLLFFFFFFIKFDLLFFFFFFFDDDLLLFLLFIIIAKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFDDDDDDDDDDDDDDDDDDDDDDDDLAAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLALLALLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALAALLLLLLLLLLLLLLLLLLLLLLLLADLLLLDLLLLLLIDDDKLLLLLLLLLLLLLLLLLLLLLKKLLLLLLKLLLLLLLLLLKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLDLLLLLLDLLLLLLLLLLDDLLDLLIDLLLKKLKKDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLDLDLDLLLLLLLDLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLDLLLDIKLLLLKKLKNNEDNEDNDALLLLLLLLLLLLLLLLLLFAFALLLLLLLLLLLLLLLLLFAALLLLLFALLLLALLLLLLLLLLLLLLLLLLLLFFFDLNNENEDNLLLLLLLLFDLEDIIDDDIIIEIIIDSIIIIIIDIIIDQQDIIIDNIDDIDGGIIIIIISQQQQSDDDDDIDDNSLLLLLLLLLLLLLLLLLLLLLLLLLFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFKLAKLLLLLLLLLLLLLLLLLLLLLLLLLAKAAFAAFFFFFFFFKKLLLKALAKLLLLLLLLLLLLLLLLLLLLLLLLAKAKLLLLLLLLAKKLLLLLLLLAKAKAKLLLLLLLLLLLLLLLAKKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAKAKKLLLALLLALLLLLLLLLLLLLLLLLLLLLLKAKAKAKAAAKAAKAKAFAKAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLALFALLLLLLLLLLLLLLLLLLLALLLLLLAAAAKFAFFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFIKIDQLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLDDLLLLLLFDSISSFLFKFFFFFFFFFIKLIDLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDQLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKIIKKIKIDQLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLIDQLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLEIDNSSINSKKKKKLKKKKKISSISKKLKKKIIQQKKIKIKDLLLDLLIKIKIKDLLLLLLLLLLLLLIKIKDLLLLLLIKIKFIKDEDIDDGGIIIDSKLLLLLLKLKLLLKLLKLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDLLLLDLLLLLDLLLLLDILLLLLKLLLLLLIKFFFDLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLALLLLLLLLLLLLLLLADDLLLLLLLLLLLLLLLLDLLLLLLDDLLLLLLLLLLLLLLLLLIQIIQIIIIIIIIIIIIIIIIIIIIIIIIIQIQQQQQQQIIIIIIIIQIQQQQQQQQQQIIIIIIIIIIIQIQQIIIIIIIIIIAKKALAKAAKAKKKKKAAKLKKAKAKAKKKAKAKKKLLLKKLAKAKLKAKLKKKKLKKKKLKKKAKKKKAAKALLKKKKKAKKKKALKAKKLIQKIQQKKKIIIKQIIIIIIIIIIIQIIIIQQLKKLKLLKKLLLIQQKIIDLLLLKKLLLLLLLLLLLLLLLLLIKLLKKLKLKIIIQQIIIKKKKKLLKKKKIKIQKIIKKIQKIKIKIKIIIIQKKCQCIKLKKKKQQQQQQIIIIIIKKKKKKQIKIIIIIIIQIKQIKKKKIKRRRRRRRRRRRIIEENDDDNEDNDDENENENENENQIDDDDDDIIDDDDNNNNNNNLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLAAAAAAAAAAAAAALLLLLLLLLLLALLKKALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRFIDDDDDILLLLLLLLLLKKFFFIILLECNNECNNDDDECNNDDLDLECNNECNNECNNECNNECNLDDDDDDDDIQQDIIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIDDLLLLLLLLLLLLLLLLKLLLLL","n":["algo","ds","e","graph","math","new_monoid","rand_gen","rand_gen_builder","seq","traits","utils","Backward","ExactCover","Forward","Inversion","Larsch","Permutations","Rle","RleBy","RleByKey","bisect","bisect_","bisect_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","convolve","cycle_mu_lambda","cycle_nth","default","exact_cover","extremum","extremum","extremum_float","extremum_float","extremum_slice","from","from","from","from","from","from","group_by","group_by","hilbert_mo","hilbert_mo_","index_order","index_order_by","index_order_by_key","into","into","into","into","into","into_iter","into_iter","inversion","inversion","karatsuba","larsch","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next","next","next_permutation","ordered_hash","ordered_hash_","parallel_bisect","parallel_bisect","permutation","prev_permutation","rle","rle","rle","rle","rle_by","rle_by","rle_by","rle_by_key","rle_by_key","rle_by_key","tortoise_hare","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","vzip","vzip","vzip","window_bisect","window_bisect","bisect","bisect_slice","ExactCover","all","any","from_matrix","extremum","extremum_slice","extremum_float","hilbert_mo","index_order_by","index_order_by_key","Inversion","inversion","convolve","Larsch","new","solve","majority","minmax","minmax_by","minmax_by_key","mo","ordered_hash","parallel_bisect","Backward","Forward","Permutations","backward","forward","next","next_permutation","peek","prev","prev_permutation","Rle","RleBy","RleByKey","rle","rle","rle_by","rle_by_key","Rle","RleBy","RleByKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","equiv_mod","equiv_mod","equiv_mod","from","from","from","group_by","group_by","group_by","into","into","into","into_iter","into_iter","into_iter","new","new","new","next","next","next","rle","rle","rle","rle_by","rle_by","rle_by","rle_by_key","rle_by_key","rle_by_key","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","usize_group_by","usize_group_by","usize_group_by","vzip","vzip","vzip","cycle_mu_lambda","cycle_nth","window_bisect","BTreeBimap","BTreeMultiset","BicrementalMedian","BicrementalMedianDev","BinaryTrie","BitSet","CuckooHashMap","CuckooHashSet","DecrementalUsizeSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IncrementalLineSet","IntervalMap","IntervalSet","N1Rmq","PotentializedUnionFind","RemovableHeap","RsDict","SkewHeap","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","binary_trie","bit_set","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_bimap","btree_multiset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","count","count","count","count_3way","count_3way","cuckoo_hash_map","cuckoo_hash_set","decremental_usize_set","default","default","default","default","default","default","default","default","diff","disjoint_sparse_table","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","get_mut","get_mut","incremental_line_set","index","index","index","interval_map","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","len","len","n1_rmq","new","new","not","not","partial_cmp","pop","pop_back","pop_front","pop_front","potentialized_union_find","push","push_back","push_back","push_front","quantile","relate","removable_heap","repr","repr_diff","rs_dict","set_value","shl","shl","shl_assign","shr","shr","shr_assign","skew_heap","sub","sub","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","with","BinaryInt","BinaryTrie","Bits","Iter","bits","borrow","borrow","borrow_mut","borrow_mut","equiv_mod","fmt","from","from","group_by","group_by","insert","into","into","into_iter","into_iter","iter","iter_dup","new","next","next","next_back","pop","push","rle","rle","rle_by","rle_by","rle_by_key","rle_by_key","test","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","zero","BitSet","Indices","Words","and","and_assign","autofix","borrow","borrow","borrow_mut","borrow_mut","capacity","contains","find_first","find_last","from","from","group_by","group_by","indices","insert","into","into","into_iter","into_iter","ior","ior_assign","is_empty","len","new","new","next","next","next_back","next_back","not","not_assign","or","or_assign","remove","reserve","reserve_exact","rle","rle","rle_by","rle_by","rle_by_key","rle_by_key","shl","shl_and","shl_and_assign","shl_and_self","shl_and_self_assign","shl_assign","shl_ior","shl_ior_assign","shl_ior_self","shl_ior_self_assign","shl_op","shl_op_assign","shl_op_self","shl_op_self_assign","shl_or","shl_or_assign","shl_or_self","shl_or_self_assign","shl_sub","shl_sub_assign","shl_sub_self","shl_sub_self_assign","shl_xor","shl_xor_assign","shl_xor_self","shl_xor_self_assign","shr","shr_and","shr_and_assign","shr_and_self","shr_and_self_assign","shr_assign","shr_ior","shr_ior_assign","shr_ior_self","shr_ior_self_assign","shr_op","shr_op_assign","shr_op_self","shr_op_self_assign","shr_or","shr_or_assign","shr_or_self","shr_or_self_assign","shr_sub","shr_sub_assign","shr_sub_self","shr_sub_self_assign","shr_xor","shr_xor_assign","shr_xor_self","shr_xor_self_assign","sub","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","words","xor","xor_assign","BTreeBimap","insert","is_empty","len","new","range_left","range_right","remove_left","remove_right","BTreeMultiset","Iter","borrow","borrow_mut","count","from","group_by","insert","insert_n","into","into_iter","is_empty","iter","len","max","min","new","new","next","remove","remove_n","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","CuckooHashMap","contains_key","insert","is_empty","len","new","remove","CuckooHashSet","contains","insert","is_empty","len","new","remove","DecrementalUsizeSet","contains","greater","greater_equal","is_empty","len","less","less_equal","new","remove","universe_len","DisjointSparseTable","FoldableDeque","new","with","FoldableQueue","new","with","ChtInt","IncrementalLineSet","inner_len","min","new","on_line","oo","push","right","simplify","Interval","IntervalMap","borrow","borrow_mut","clone","clone_into","cmp","connection","eq","equivalent","fmt","from","from_bounds","inf","insert","intersection","intersection_minus","intersects","into","is_connected_with","is_empty","is_empty","is_subset_of","is_superset_of","iter","new","partial_cmp","remove","sup","superset_of","to_owned","try_from","try_into","type_id","vzip","IntervalSet","clear","covering","has_range","insert","is_empty","iter","mex","new","remove","N1Rmq","min","PotentializedUnionFind","with_len","RemovableHeap","is_empty","len","new","peek","pop","push","remove","RsDict","rank","select","IntoIter","PeekMut","SkewHeap","borrow","borrow","borrow_mut","borrow_mut","clear","deref","deref_mut","drop","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","from","group_by","into","into","into_iter","is_empty","len","len","meld","new","next","peek","peek_mut","pop","pop","push","rle","rle_by","rle_by_key","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","vzip","vzip","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","WmInt","bitlen","is_empty","len","rank","select","set","test","xored_quantile","zero","Asc","Desc","Direction","FunctionalGraph","Heavy","HlEdge","Hld","Light","TreeCata","adjlist","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dijkstra","dijkstra_","dinic","dinic_","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_root","functional_graph","hld","into","into","into","into","into","scc","scc_","to_owned","to_owned","to_owned","to_owned","tree_cata","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","from_root","dijkstra","dinic","FunctionalGraph","mu_lambda","Asc","Desc","Direction","Heavy","HlEdge","Hld","Light","decode","encode","inner","lca_decoded","new","path","rev","subtree_range","scc","TreeCata","each_root","ApproxFrac","ButterflyCache","CarmichaelLambda","CommonQuot","CompactSieve","ConstDiv","ConstDiv2","CrtMod","CrtWrapping","DLog","DefaultId","DigitSum","Digits","Divisors","DynamicModInt","EXP","EquivMod","EquivModIter","EulerPhi","Factors","FactorsDup","FracApprox","FracApproxIter","FractionBisect","Gcd","GcdRecip","HarmonicFloorSum","I","I","Interpolation","IsCloseFloat","Lcm","LinearFloorSum","LinearSieve","Lower","MillerRabin","Mod1000000007","Mod998244353","ModAckermann","ModFactorialBinom","ModInt1000000007","ModInt998244353","ModIntBase","ModOrd","ModPow","ModTetration","Modulus","NttFriendly","ODD","Output","Output","Output","Output","PRIMITIVE_ROOT","Polynomial","SegmentedFactorSieve","SieveN2Plus1","SieveN2PlusNPlus1","SlopeFunction","Sqrt","StaticModInt","TwoSat","Upper","VALUE","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","barrett","bit_binom","bit_binom_","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","butterfly","butterfly_cache","butterfly_inv","cache","cache","carmichael_lambda","carmichael_lambda","checked_recip","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_quot","common_quot","compact_sieve","const_div","continued_fraction","continued_fraction_","convolution","convolve","convolve_u128","convolve_u128_mod","convolve_u32_mod","convolve_u64","convolve_u64_mod","convolve_wrapping_u128","convolve_wrapping_u64","crt_mod","crt_wrapping","default","default","default","digit_pow_sum","digit_sum","digit_sum","digits","digits","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","eq","eq","eq","eq","eq","equiv_mod","equiv_mod","equiv_mod","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","euler_phi","euler_phi","factors","factors","factors_dup","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_approx","frac_approx_iter","frac_approx_iter_bound","fraction_bisect","fraction_bisect","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","garner","gcd","gcd","gcd_recip","gcd_recip","get","get","get","group_by","harmonic_floor_sum","hash","hash","hash","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_close","is_close_float","is_prime","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","miller_rabin","mod_ackermann","mod_ackermann","mod_factorial_binom","mod_ord","mod_ord","mod_pow","mod_pow","mod_recip_table_","mod_recip_table_prime","mod_tetration","mod_tetration","modint","modulus","modulus","modulus","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","new","new_unchecked","new_unchecked","new_unchecked","next","polynomial","pow","prime_pi","prime_pi_","product","product","product","product","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rle_by","rle_by_key","segmented_factor_sieve","shl","shl","shl_assign","shr","shr","shr_assign","sieve_n2_plus_1","sieve_n2_plus_n_plus_1","slope_function","sqrt","sqrt","sqrt_fraction","sqrt_fraction_","sqrt_fraction_fn","stern_brocot","stern_brocot_","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usize_group_by","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","bit_binom","CarmichaelLambda","carmichael_lambda","CommonQuot","CommonQuotStruct","Output","borrow","borrow_mut","common_quot","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","continued_fraction","ButterflyCache","EXP","NttFriendly","ODD","PRIMITIVE_ROOT","butterfly","butterfly_cache","butterfly_inv","cache","convolve","convolve_u128","convolve_u128_mod","convolve_u32_mod","convolve_u64","convolve_u64_acl","convolve_u64_mod","convolve_wrapping_u128","convolve_wrapping_u64","DigitSum","digit_pow_sum","digit_sum","Digits","DigitsIter","borrow","borrow_mut","digits","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","new","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","Divisors","DivisorsStruct","Output","borrow","borrow_mut","divisors","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","DLog","dlog","EquivMod","EquivModIter","equiv_mod","equiv_mod","EulerPhi","euler_phi","Factors","FactorsStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","FactorsDup","FactorsDupStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors_dup","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","ApproxFrac","FracApprox","FracApproxIter","Lower","ONE","SIGNED","SbInt","Upper","ZERO","abs","avg","frac_approx_iter","frac_approx_iter_bound","highest_frac","into_inner","lowest_frac","lt1","neg","steps","zero_frac","FractionBisect","ONE","SIGNED","SbInt","ZERO","abs","avg","fraction_bisect","lt1","neg","steps","CrtMod","CrtWrapping","I","I","crt_mod","crt_wrapping","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","Interpolation","interpolate","with","IsCloseFloat","is_close","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","divisors_sum","dp","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","recips","MillerRabin","is_prime","ModAckermann","mod_ackermann","ModFactorialBinom","binom","factorial","factorial_recip","new","perm","recip","ModOrd","mod_ord","ModPow","mod_pow","mod_recip_table_prime","ModTetration","mod_tetration","Barrett","DefaultId","DynamicModInt","DynamicModIntId","Mod1000000007","Mod998244353","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","barrett","borrow","borrow_mut","checked_recip","default","default","from","get","into","modulus","modulus","new","new","new_unchecked","pow","recip","rem_euclid_u32","set_modulus","try_from","try_into","type_id","vzip","Polynomial","circular","cos","differential","differentiate","div_mod","div_nth","eval","exp","fft_butterfly","fft_butterfly_double","fft_inv_butterfly","fode","get","integral","integrate","into_inner","is_zero","len","log","new","polyeqn","pow","recip","ref_truncated","reverse","reversed","sin","tan","truncate","truncated","prime_pi","SegmentedFactorSieve","divisors","factors","factors_dup","new","SieveN2Plus1","factors","factors_dup","is_prime","new","primes","SieveN2PlusNPlus1","factors","factors_dup","is_prime","new","primes","SlopeFunction","SlopeTrickInt","add_abs","add_const","add_left","add_right","argmin","doz","min","min_left","min_right","new","shift","window","Sqrt","sqrt","sqrt_fraction","sqrt_fraction_fn","stern_brocot","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","index","into","into","into","kmp","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","SuffixArray","from_bytes","from_hashed","into_inner","lcpa","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","z","Act","Action","AddAssoc","AddComm","Additive","Associative","Bisect","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","GroupBy","Hashed","Identity","Input","Input","Input","Input","Input","Input","Item","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","PotentialFunction","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","UsizeGroupBy","Zero","act","act","act","action","add","additive","additive","binop","bisect","bisect","count","count","count","count","count_3way","diff","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get_mut","get_mut","group_by","group_by","hash","id","is_empty","is_empty","is_empty","len","len","len","max","max","min","min","mul","mul_recip","multiplicative","multiplicative","neg","new","new","next","one","one","op","operand","operator","partial_recip","partition","pop","pop_back","pop_front","potential_function","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","relate","repr","repr_diff","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","usize_group_by","usize_group_by","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","operand","operator","AddAssoc","AddComm","Zero","zero","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","additive","id","mul","multiplicative","neg","one","op","partial_recip","recip","recip","zero","Bisect","Input","Output","bisect","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","equivalent","fmt","from","ge","gt","into","le","lt","ne","new","to_owned","try_from","try_into","type_id","vzip","DisjointSet","count","equiv","is_empty","len","new","partition","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","GroupBy","group_by","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","CommutativeGroup","Item","Magma","PotentialFunction","diff","is_empty","len","new","relate","repr_diff","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","UsizeGroupBy","usize_group_by","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","MakeMax","MakeMin","OpAdd","OpAddCount","OpAddCountV","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAddV","OpAffine","OpAffineOnOpAddCount","OpAffineV","OpClosure","OpClosureOnOpClosure","OpGcd","OpGcdV","OpMax","OpMaxV","OpMin","OpMinV","OpMul","OpMulV","OpRollHash","OpRollHashV","Output","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PerLine","Pext","RandomGenerator","Scanner","SpaceSep","StrSep","VecMarker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","act","act","act","act","act","ascii","bitop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","charset","check_bounds","check_bounds_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","e_macro","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate","id","id","id","id","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","make_max","make_min","make_minmax","op","op","op","op","op","op","op","op","op","op_add","op_add_count","op_add_on_op_add_count","op_add_on_op_max","op_add_on_op_min","op_affine","op_affine_on_op_add_count","op_closure","op_closure_on_op_closure","op_gcd","op_max","op_min","op_mul","op_roll_hash","operand","operand","operand","operand","operand","operator","operator","operator","operator","operator","options","output","partial_recip","partial_recip","pdep","pext","rand_gen_macro","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","charset","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","Pext","get","get","get","get","get","new","new","new","new","new","pdep","pext","bounds_within","check_bounds","check_bounds_range","MakeMax","MakeMin","make_max","make_min","OpAdd","OpAddV","OpAddV","_Marker","OpAddCount","OpAddCountV","OpAddCountV","_Marker","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAffine","OpAffineV","OpAffineV","_Marker","OpAffineOnOpAddCount","OpClosure","new","OpClosureOnOpClosure","new","OpGcd","OpGcdV","OpGcdV","_Marker","OpMax","OpMaxV","OpMaxV","_Marker","OpMin","OpMinV","OpMinV","_Marker","OpMul","OpMulV","OpMulV","_Marker","OpRollHash","OpRollHashV","OpRollHashV","value_of","PerLine","SpaceSep","StrSep","Ascii","AsciiGen","AsciiString","AsciiStringOfCharset","AsciiStringOfDistribution","GenOptions","OptionType","Output","Permutation","RandomGenerator","SeedableRngInspect","VecMarker","VecOptionsMarker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","charset","charset","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","distinct","distribution","from","from","from","from","from","from","from","generate","inspect","into","into","into","into","into","into","into","new","new","options","options","options","sorted","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","equivalent","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","scan","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"nekolib"],[11,"nekolib::algo"],[119,"nekolib::algo::bisect_"],[121,"nekolib::algo::exact_cover"],[125,"nekolib::algo::extremum"],[127,"nekolib::algo::extremum_float"],[128,"nekolib::algo::hilbert_mo_"],[129,"nekolib::algo::index_order"],[131,"nekolib::algo::inversion"],[133,"nekolib::algo::karatsuba"],[134,"nekolib::algo::larsch"],[137,"nekolib::algo::majority_"],[138,"nekolib::algo::minmax"],[141,"nekolib::algo::mo"],[142,"nekolib::algo::ordered_hash_"],[143,"nekolib::algo::parallel_bisect"],[144,"nekolib::algo::permutation"],[154,"nekolib::algo::rle"],[161,"nekolib::algo::rle::rle"],[215,"nekolib::algo::tortoise_hare"],[217,"nekolib::algo::window_bisect"],[218,"nekolib::ds"],[645,"nekolib::ds::bicremental_median"],[650,"nekolib::ds::bicremental_median_dev"],[657,"nekolib::ds::binary_trie"],[703,"nekolib::ds::bit_set"],[817,"nekolib::ds::btree_bimap"],[826,"nekolib::ds::btree_multiset"],[855,"nekolib::ds::cuckoo_hash_map"],[862,"nekolib::ds::cuckoo_hash_set"],[869,"nekolib::ds::decremental_usize_set"],[880,"nekolib::ds::disjoint_sparse_table"],[881,"nekolib::ds::foldable_deque"],[884,"nekolib::ds::foldable_queue"],[887,"nekolib::ds::incremental_line_set"],[897,"nekolib::ds::interval_map"],[932,"nekolib::ds::interval_set"],[942,"nekolib::ds::n1_rmq"],[944,"nekolib::ds::potentialized_union_find"],[946,"nekolib::ds::removable_heap"],[954,"nekolib::ds::rs_dict"],[957,"nekolib::ds::skew_heap"],[1010,"nekolib::ds::union_find"],[1011,"nekolib::ds::vec_act_segtree"],[1015,"nekolib::ds::vec_segtree"],[1019,"nekolib::ds::wavelet_matrix"],[1030,"nekolib::graph"],[1114,"nekolib::graph::adjlist"],[1115,"nekolib::graph::dijkstra_"],[1116,"nekolib::graph::dinic_"],[1117,"nekolib::graph::functional_graph"],[1119,"nekolib::graph::hld"],[1134,"nekolib::graph::scc_"],[1135,"nekolib::graph::tree_cata"],[1137,"nekolib::math"],[1737,"nekolib::math::bit_binom_"],[1738,"nekolib::math::carmichael_lambda"],[1740,"nekolib::math::common_quot"],[1776,"nekolib::math::compact_sieve"],[1780,"nekolib::math::const_div"],[1788,"nekolib::math::continued_fraction_"],[1789,"nekolib::math::convolution"],[1807,"nekolib::math::digit_sum"],[1810,"nekolib::math::digits"],[1846,"nekolib::math::divisors"],[1882,"nekolib::math::dlog"],[1884,"nekolib::math::equiv_mod"],[1888,"nekolib::math::euler_phi"],[1890,"nekolib::math::factors"],[1926,"nekolib::math::factors_dup"],[1962,"nekolib::math::frac_approx"],[1982,"nekolib::math::fraction_bisect"],[1993,"nekolib::math::garner"],[1999,"nekolib::math::gcd"],[2001,"nekolib::math::gcd_recip"],[2003,"nekolib::math::harmonic_floor_sum"],[2007,"nekolib::math::interpolation"],[2010,"nekolib::math::is_close_float"],[2012,"nekolib::math::lcm"],[2014,"nekolib::math::linear_floor_sum"],[2016,"nekolib::math::linear_sieve"],[2030,"nekolib::math::miller_rabin"],[2032,"nekolib::math::mod_ackermann"],[2034,"nekolib::math::mod_factorial_binom"],[2041,"nekolib::math::mod_ord"],[2043,"nekolib::math::mod_pow"],[2045,"nekolib::math::mod_recip_table_"],[2046,"nekolib::math::mod_tetration"],[2048,"nekolib::math::modint"],[2083,"nekolib::math::polynomial"],[2114,"nekolib::math::prime_pi_"],[2115,"nekolib::math::segmented_factor_sieve"],[2120,"nekolib::math::sieve_n2_plus_1"],[2126,"nekolib::math::sieve_n2_plus_n_plus_1"],[2132,"nekolib::math::slope_function"],[2146,"nekolib::math::sqrt"],[2148,"nekolib::math::sqrt_fraction_"],[2150,"nekolib::math::stern_brocot_"],[2151,"nekolib::math::two_sat"],[2155,"nekolib::seq"],[2210,"nekolib::seq::kmp"],[2228,"nekolib::seq::suffix_array"],[2235,"nekolib::seq::z_algo"],[2254,"nekolib::traits"],[2430,"nekolib::traits::act"],[2433,"nekolib::traits::action"],[2439,"nekolib::traits::additive"],[2443,"nekolib::traits::binop"],[2474,"nekolib::traits::bisect"],[2478,"nekolib::traits::count"],[2504,"nekolib::traits::disjoint_set"],[2514,"nekolib::traits::elastic_slice"],[2533,"nekolib::traits::find_nth"],[2535,"nekolib::traits::fold"],[2538,"nekolib::traits::fold_bisect"],[2542,"nekolib::traits::get_mut"],[2545,"nekolib::traits::group_by"],[2547,"nekolib::traits::max"],[2549,"nekolib::traits::min"],[2551,"nekolib::traits::multiplicative"],[2558,"nekolib::traits::potential_function"],[2568,"nekolib::traits::push_pop"],[2586,"nekolib::traits::quantile"],[2589,"nekolib::traits::range_bounds"],[2596,"nekolib::traits::set_value"],[2599,"nekolib::traits::stateful_predicate"],[2605,"nekolib::traits::usize_group_by"],[2607,"nekolib::utils"],[3058,"nekolib::utils::ascii"],[3070,"nekolib::utils::bitop"],[3089,"nekolib::utils::buf_range"],[3092,"nekolib::utils::make_minmax"],[3096,"nekolib::utils::op_add"],[3100,"nekolib::utils::op_add_count"],[3104,"nekolib::utils::op_add_on_op_add_count"],[3105,"nekolib::utils::op_add_on_op_max"],[3106,"nekolib::utils::op_add_on_op_min"],[3107,"nekolib::utils::op_affine"],[3111,"nekolib::utils::op_affine_on_op_add_count"],[3112,"nekolib::utils::op_closure"],[3114,"nekolib::utils::op_closure_on_op_closure"],[3116,"nekolib::utils::op_gcd"],[3120,"nekolib::utils::op_max"],[3124,"nekolib::utils::op_min"],[3128,"nekolib::utils::op_mul"],[3132,"nekolib::utils::op_roll_hash"],[3136,"nekolib::utils::output"],[3139,"nekolib::utils::rand_gen_macro"],[3238,"nekolib::utils::scanner"],[3264,"core::ops::range"],[3265,"core::ops::function"],[3266,"alloc::vec"],[3267,"core::ops::arith"],[3268,"core::ops::arith"],[3269,"core::clone"],[3270,"core::cmp"],[3271,"core::ops::function"],[3272,"alloc::collections::btree::map"],[3273,"core::iter::traits::iterator"],[3274,"core::option"],[3275,"core::result"],[3276,"core::any"],[3277,"core::ops::arith"],[3278,"core::hash"],[3279,"core::fmt"],[3280,"core::fmt"],[3281,"alloc::collections::btree::map"],[3282,"core::ops::range"],[3283,"std::sync::once_lock"],[3284,"core::fmt"],[3285,"core::convert"],[3286,"core::marker"],[3287,"core::ops::arith"]],"d":["アルゴリズムたち。","データ構造たち。","デバッグ用マクロ。","グラフに関するものたち。","数学関連のアルゴリズムたち。","","乱数生成マクロ。","","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","","Exact cover。","","","LARSCH algorithm。","","","","","二分探索で境界を探す。","二分探索。","二分探索で境界を探す。","","","","","","","","","","","Karatsuba 法。Карацуба 法？","周期検出を行う。","$n$ 項目を求める。","","Exact cover。","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Hilbert curve に基づく Mo’s algorithm。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","添字の順序。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Karatsuba 法。","LARSCH algorithm。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","","","辞書順で次の順列の生成。","座標圧縮。","座標圧縮。","並列二分探索。","並列二分探索を行う。","順列。","","","","","","","","","","","","周期検出。","","","","","","","","","","","","","","","","","","","","","","","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","Exact cover。","解を全て探す。","…","与えられた行列に対して前計算を行う。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","","","Karatsuba 法。Карацуба 法？","LARSCH algorithm。","","","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","座標圧縮。","並列二分探索を行う。","","","","","","","辞書順で次の順列の生成。","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","周期検出を行う。","$n$ 項目を求める。","尺取り法で、各始端に対して境界を探す。","双方向連想配列。","多重集合。","中央値の管理。","中央値と偏差の管理。","","Bit set。","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","直線の集合。","区間から値への対応づけ。","区間の集合。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","ポテンシャルつき union-find。","削除可能ヒープ。","rank/select 辞書。","","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","多重集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","","","","","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","直線の集合。","","","","区間から値への対応づけ。","区間の集合。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","線形 RMQ。","","","","","","","","","","ポテンシャルつき union-find。","","","","","","","削除可能ヒープ。","","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","","","","","","","","","","","","","","","","","","","","","","","","","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bit set。","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","","","","","","","","","多重集合。","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","","","","","","","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","","","","","","","<code>usize</code> の decremental set。","$i\\\\in S$ を返す。","$\\\\min_{j\\\\gt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\min_{j\\\\ge i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S=\\\\emptyset$ を返す。","$|S|$ を返す。","$\\\\max_{j\\\\lt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\max_{j\\\\le i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S\\\\gets\\\\{0, 1, \\\\dots, u-1\\\\}$ で初期化。","$S\\\\gets S\\\\setminus\\\\{i\\\\}$ で更新する。","$u$ を返す。","disjoint sparse table。","fold 可能両端キュー。","","","fold 可能キュー。","","","","直線の集合。","","","","","","","","","","区間から値への対応づけ。","","","","","","","","","","Returns the argument unchanged.","","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{\\\\cup} (k…","","","","Calls <code>U::from(self)</code>.","","","$S=\\\\emptyset$ を返す。","","","","$S\\\\gets\\\\emptyset$ で初期化する。","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{…","","$T\\\\subseteq S$ かつ <code>b</code> を含む $T$ …","","","","","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","","ポテンシャルつき union-find。","","削除可能ヒープ。","空のとき <code>true</code> を返す。","要素数を返す。","空のヒープで初期化する。","最大値を取得する。","最大値を取り出す。","要素を追加する。","要素を削除する。","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","","","","","","","","","","","function graph。","","","HL 分解。","","全方位木 DP。","","","","","","","","","","","","","","","","","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","functional graph。","HL 分解。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","lowlink に基づく強連結成分分解。","強連結成分分解。","","","","","全方位木 DP。","","","","","","","","","","","","","","","","","","","","","","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","function graph。","$(\\\\mu_i, \\\\lambda_i)$ を返す。","","","","","","HL 分解。","","","","","","","","","","lowlink に基づく強連結成分分解。","全方位木 DP。","","","","Carmichael の $\\\\lambda$ 関数。","商が共通の区間の列挙。","篩。","定数除算。","定数除算。","","","離散対数。","","桁和。","","約数列挙。","","","Chinese remaindering。","Chinese remaindering。","Euler の $\\\\varphi$ 関数。","素因数分解。","素因数分解。","","","","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","","Lagrange 補間。","","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","","","","","Ackermann 関数。","法 $p$ での二項係数。","","","","位数。","冪乗。","tetration。","","","","","","","","","多項式。","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","組合せのビット表現。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","","","","","","","","","","","","商が共通の区間の列挙。","","篩。","定数除算。","連分数展開。","連分数展開。","","","","","","","","","","","","","","","","桁和。","","","","","","","","","","","","","","","","","","","","","","","","","","","","約数列挙。","","離散対数。","","","","","","","","","","Chinese remaindering","","","","","","","","","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","素因数分解。","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","最大公約数。","","最大公約数と逆元。","","","","","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","","","Lagrange 補間。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","","Ackermann 関数。","","法 $p$ での二項係数。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","多項式。","","素数の数え上げ。","素数の数え上げ。","","","","","","","","","","","","","","","","","","","","","","","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","平方根の連分数展開。","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","Stern–Brocot tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","Carmichael の $\\\\lambda$ 関数。","","商が共通の区間の列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","篩。","","","","定数除算。","定数除算。","","","","","","","連分数展開。","","","","","","","","","","","","","","","","","","","桁和。","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","約数列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","離散対数。","","Chinese remaindering。","Chinese remaindering。","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","Lagrange 補間。","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$n$ の約数の総和を返す。","最小素因数を用いて DP を行う。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","法 $m$ での逆元を返す。","","","Ackermann 関数。","","法 $p$ での二項係数。","$i!/(j!\\\\cdot (i-j)!) \\\\bmod p$ を返す。","$i! \\\\bmod p$ を返す。","$i!^{-1} \\\\bmod p$ を返す。","$(0!, 1!, \\\\dots, n!)$ と $(0!^{-1}, 1!^{-1}, \\\\dots, …","$i!/(i-j)! \\\\bmod p$ を返す。","$i^{-1} \\\\bmod p$ を返す。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","多項式。","$[x^0] f(x) = 0$ かつ $[x^0] g(x) = 0$ なる $h(x) = …","$\\\\cos(f(x)) \\\\bmod x^n$ を返す。","$f&#39;(x)$ を返す。","$f(x) \\\\gets f&#39;(x)$ で更新する。","$(f(x) / g(x), f(x) \\\\bmod g(x))$ を返す。","$[x^n] f(x) \\\\cdot g(x)^{-1}$ を返す。","","$[x^0] f(x) = 0$ なる $f$ に対し、$\\\\exp(f(x)) \\\\bmod …","$F_{\\\\omega}[f]$ を返す。","$F_{\\\\omega^2}[f]$ を $F_{\\\\omega}[f]$ で更新する。","$F_{\\\\omega}^{-1}[f]$ を返す。","<code>self</code> を初期解とし、$y&#39; = f(y, x)$ を満たす …","$[x^i] f(x)$ を返す。","$\\\\int_0^x f(t)\\\\, \\\\dd{t}$ を返す。","$f(x) \\\\gets \\\\int_0^x f(t)\\\\, \\\\dd{t}$ で更新する。","$([x^i] f(x))_{i=0}^{\\\\deg(f)}$ を返す。","$f(x) = 0$ を返す。","$\\\\deg(f)-1$ を返す。ただし $f(x) = 0$ のときは …","$[x^0] f(x) = 1$ なる $f$ に対し、$\\\\log(f(x)) \\\\bmod …","$f(x) = 0$ を返す。","<code>self</code> を初期解とし、$f(y) = 0$ を満たす $y$ …","$f(x)^k \\\\bmod x^n$ を返す。","$f(x)\\\\cdot g(x) \\\\equiv 1\\\\pmod{x^n}$ なる $g(x) \\\\bmod …","$f(x)\\\\bmod x^n$ を返す。","$f(x) \\\\gets f(x)^{\\\\mathrm{R}}$ で更新する。","$f(x)^{\\\\mathrm{R}} \\\\triangleq x^{\\\\deg(f)}\\\\cdot f(1/x)$ …","$\\\\sin(f(x)) \\\\bmod x^n$ を返す。","$\\\\tan(f(x)) \\\\bmod x^n$ を返す。","$f(x) \\\\gets f(x) \\\\bmod x^n$ で更新する。","$f(x)\\\\bmod x^n$ を返す。","素数の数え上げ。","","","","","","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","$n^2+1$ の形の素数を返す。","$n^2+n+1$ 型素数の篩。","$n^2+n+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+n+1$ が素数のとき真を返す。","初期化する。","$n^2+n+1$ の形の素数を返す。","区分線形凸関数。","","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","平方根。","","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KMP 法。","","","接尾辞配列。","","","","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","接尾辞配列。","","","自身を消費し、内部表現を返す。","高さ配列を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","二分探索。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","イテレータのグルーピング。","","単位元を持つ。","","","","","代入される型。","","要素の型。","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","ポテンシャル関数。","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","イテレータのグルーピング。","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","","代数的構造に関するトレイトたちです。","二分探索。","","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","ポテンシャルの差を求める。","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合の要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","分割を返す。","","","","ポテンシャル関数。","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","ポテンシャルの差を定義する。","$u$ を含む集合の代表元を返す。","代表元とのポテンシャルの差を求める。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","イテレータのグルーピング。","Examples","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","","","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","","単位元を返す。","積 $x \\\\ast y$ を返す。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","加法 $\\\\circ$ の単位元 $0$ を返す。","二分探索。","","","","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","分割を返す。","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","","要素の型。","","ポテンシャル関数。","ポテンシャルの差を求める。","集合が空であれば <code>true</code> を返す。","集合の要素数 $n$ を返す。","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","ポテンシャルの差を定義する。","代表元とのポテンシャルの差を求める。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","イテレータのグルーピング。","Examples","","","","","","","","","","","","","","和を返す演算を持つ。","","","","","","","","","","任意の結合的な演算を持つ。","","","","最大値を返す演算を持つ。","","最小値を返す演算を持つ。","","積を返す演算を持つ。","","…","","","","","","","","","形式つき出力（改行区切り）。","","","スキャナ。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","","境界チェックを行う。","境界チェックを行う。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","加法に関する wrapper クラス。","加法に関する wrapper クラス。","","","","加法に関する wrapper クラス。","","クロージャの wrapper クラス。","","","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","","","","","","","","","形式つき出力。","","","","","乱数生成マクロ。","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","境界チェックを行う。","境界チェックを行う。","","","","","和を返す演算を持つ。","","","","","","","","","","","","","","","","任意の結合的な演算を持つ。","","","","","","","","最大値を返す演算を持つ。","","","","最小値を返す演算を持つ。","","","","積を返す演算を持つ。","","","","…","","","","形式つき出力（改行区切り）。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","スキャナ。","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,18,30,31,14,39,18,30,31,14,0,0,0,14,0,0,0,0,0,0,39,18,18,30,31,14,30,31,0,0,0,0,0,39,18,30,31,14,30,31,0,200,0,0,0,0,0,0,0,0,0,0,30,31,0,0,0,0,0,0,0,0,201,30,31,202,30,31,203,30,31,0,39,18,30,31,14,39,18,30,31,14,39,18,30,31,14,30,31,39,18,30,31,14,0,0,0,0,0,14,14,14,0,0,0,0,0,0,0,200,0,0,39,39,0,0,0,0,0,0,0,0,0,0,18,18,18,0,18,18,0,0,0,0,0,201,202,203,0,0,0,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,0,0,46,47,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,46,47,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,45,65,65,61,62,65,65,0,0,0,68,45,49,53,55,56,42,63,59,0,46,47,45,50,58,46,47,45,50,58,68,45,51,52,65,61,68,46,47,74,45,45,49,50,51,52,53,55,56,57,58,61,42,63,76,53,55,42,63,42,63,42,63,0,0,89,76,76,76,78,78,68,65,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,61,62,42,42,42,63,63,63,68,45,51,52,42,63,0,76,65,63,0,0,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,68,50,57,57,59,62,0,59,62,45,45,45,55,53,53,55,0,55,53,55,53,65,59,0,62,59,0,63,45,45,45,45,45,45,0,45,45,45,45,45,45,46,47,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,0,62,0,0,89,76,78,68,65,46,47,74,45,49,50,51,52,53,55,56,57,58,59,60,61,62,42,63,0,0,46,46,46,46,0,47,47,47,47,47,47,0,0,0,0,81,79,80,79,80,80,80,79,80,79,80,74,79,80,79,80,74,74,74,79,80,80,81,81,79,80,79,80,79,80,81,79,80,79,80,79,80,79,80,79,80,81,0,0,0,45,45,45,85,84,85,84,45,45,45,45,85,84,85,84,45,45,85,84,85,84,45,45,45,45,84,45,85,84,85,84,45,45,45,45,45,45,45,85,84,85,84,85,84,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,85,84,85,84,85,84,85,84,85,84,45,45,45,0,49,49,49,49,49,49,49,49,0,0,88,88,50,88,88,50,50,88,88,50,50,50,50,50,88,50,88,50,50,88,88,88,88,88,88,88,88,0,51,51,51,51,51,51,0,52,52,52,52,52,52,0,89,89,89,89,89,89,89,89,89,89,0,0,53,53,0,55,55,0,0,56,56,56,75,75,56,75,75,0,0,91,91,91,91,91,91,91,91,91,91,91,91,57,91,91,91,91,91,91,57,91,91,57,57,91,57,91,57,91,91,91,91,91,0,58,58,58,58,58,58,58,58,58,0,78,0,59,0,60,60,60,60,60,60,60,0,61,61,0,0,0,102,93,102,93,68,93,93,93,102,102,102,102,102,102,102,102,102,102,102,102,102,93,102,102,93,102,68,68,102,68,68,102,68,68,68,93,68,102,102,102,102,102,93,102,93,102,93,102,102,93,0,0,42,42,42,0,63,63,63,0,0,66,65,65,65,65,66,66,65,66,106,106,0,0,105,0,0,105,0,0,108,103,104,105,106,108,103,104,105,106,103,104,105,106,103,104,105,106,0,0,0,0,103,105,106,103,105,106,103,104,105,106,108,108,103,103,104,105,106,0,0,0,108,103,104,105,106,0,0,103,104,105,106,0,108,103,104,105,106,108,103,104,105,106,108,103,104,105,106,108,103,104,105,106,0,0,0,0,103,106,106,0,105,0,0,105,104,104,105,104,104,104,105,104,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,204,205,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,114,206,207,208,209,114,0,0,0,0,0,0,0,0,128,110,109,109,109,109,111,111,111,111,113,113,113,113,113,113,113,113,109,109,111,111,113,113,113,113,121,0,0,113,113,113,113,113,113,113,113,113,113,113,113,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,0,114,0,114,118,0,210,211,119,120,109,111,121,118,122,113,123,124,125,126,119,120,109,111,121,118,122,113,123,124,125,126,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,204,205,109,111,126,212,0,212,0,213,109,109,109,109,111,111,111,111,113,113,113,113,113,113,113,113,109,109,111,111,113,113,113,113,0,207,0,214,119,120,109,111,121,118,122,113,0,215,216,119,120,109,111,121,118,122,113,0,217,0,208,0,209,128,119,120,109,109,111,111,121,113,113,123,130,124,125,126,0,218,218,0,219,138,116,131,128,128,142,143,144,147,119,120,109,109,111,111,121,118,122,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,123,130,124,125,126,0,0,185,0,220,211,109,111,131,0,109,111,121,0,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,131,221,0,222,0,223,0,224,0,0,0,225,0,0,226,0,227,0,0,0,228,0,211,109,111,109,109,109,109,111,111,111,111,113,113,113,113,113,113,113,113,109,109,111,111,113,113,113,113,109,111,113,113,211,211,109,111,131,0,211,0,0,109,109,111,111,211,113,113,113,113,113,113,113,113,113,113,113,113,131,131,0,113,113,113,113,113,113,0,0,0,0,229,0,0,0,0,0,109,109,109,109,111,111,111,111,113,113,113,113,113,113,113,113,109,109,111,111,113,113,113,113,109,109,111,111,119,120,109,111,121,118,122,113,123,124,125,126,109,111,113,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,0,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,131,138,116,131,128,142,143,144,147,119,120,109,111,121,118,122,113,123,130,124,125,126,0,0,210,0,0,206,137,137,206,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,138,138,138,0,0,119,120,119,120,119,120,0,0,114,0,114,114,0,114,0,114,0,0,0,0,0,0,0,0,0,0,212,212,0,0,127,127,213,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,207,139,139,207,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,214,0,0,215,216,0,217,0,0,208,140,140,140,140,140,140,140,140,140,140,140,140,140,140,208,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,0,209,141,141,141,141,141,141,141,141,141,141,141,141,141,141,209,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,0,0,0,128,132,132,0,128,132,132,132,218,218,132,128,132,132,132,132,132,0,230,230,0,230,230,230,219,230,230,230,0,0,204,205,204,205,0,185,0,220,0,123,123,123,0,142,142,0,221,0,223,0,224,0,143,143,143,143,143,143,143,143,143,143,143,143,143,0,222,0,225,0,144,144,144,144,144,144,0,226,0,227,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,110,112,115,115,211,115,115,115,211,115,211,111,211,115,211,211,211,133,111,115,115,115,115,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,0,0,130,130,130,130,0,124,124,124,124,124,0,125,125,125,125,125,0,0,126,126,126,126,126,146,126,126,126,126,126,126,0,229,0,0,0,0,147,147,147,0,0,0,148,149,150,148,149,150,148,149,150,148,149,150,148,149,150,148,149,150,148,149,150,148,148,149,149,149,150,150,149,148,149,150,0,148,148,0,148,149,150,148,149,150,148,149,150,148,149,150,148,149,150,0,0,0,152,152,152,152,152,152,152,148,152,152,152,152,152,152,152,152,0,149,149,149,149,149,149,0,0,154,154,154,154,154,154,154,150,154,154,154,154,154,154,154,154,150,0,231,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,233,234,235,236,237,33,238,0,0,0,0,0,0,0,0,232,0,43,43,233,239,240,188,241,242,243,244,0,0,0,0,0,0,0,0,0,0,0,27,0,245,232,0,0,0,0,0,0,0,0,0,0,0,231,43,0,232,0,232,0,0,233,0,246,247,33,248,238,0,0,22,247,24,23,0,249,0,239,0,250,251,22,0,240,0,252,27,253,247,22,238,247,238,22,0,162,0,160,232,188,0,232,232,247,238,33,164,232,245,43,43,254,247,241,243,242,0,33,234,236,235,0,0,244,0,255,256,238,247,238,22,33,0,237,26,25,22,0,247,247,0,257,157,232,0,231,231,0,43,43,43,43,43,0,0,0,157,232,0,0,0,0,0,0,0,0,0,0,0,232,0,0,0,0,245,232,232,232,253,232,232,232,232,245,254,255,256,232,0,233,233,233,0,0,0,67,67,67,67,246,248,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,247,247,247,247,247,247,247,247,247,0,0,0,27,27,0,0,0,22,24,23,22,27,22,22,22,26,25,22,0,249,0,239,239,0,0,250,251,0,240,240,0,252,0,162,0,160,0,0,0,0,188,188,164,0,238,0,0,238,238,238,238,238,238,234,235,236,241,242,243,0,0,0,0,0,0,241,243,242,234,236,235,244,0,244,0,0,0,0,0,0,0,237,0,237,33,0,33,33,33,33,0,257,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,0,0,171,0,0,173,0,0,0,175,0,176,0,177,0,178,0,179,258,0,0,0,0,0,0,0,0,0,0,0,0,0,171,172,173,175,176,177,178,155,159,161,163,165,0,0,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,0,0,0,0,0,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,171,172,155,159,161,173,163,174,165,175,176,177,178,179,0,171,172,173,175,176,177,178,179,171,172,173,175,176,177,178,179,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,171,172,155,159,161,173,163,174,165,175,176,177,178,179,181,182,183,184,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,258,171,172,173,174,175,176,177,178,179,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,259,260,0,171,172,173,174,175,176,177,178,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,159,161,163,165,155,159,161,163,165,180,0,171,178,261,262,0,171,0,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,181,182,183,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,181,182,183,184,166,167,168,169,170,171,172,155,159,161,173,163,174,165,175,176,177,178,179,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,167,168,169,170,166,167,168,169,170,261,262,0,0,0,0,0,259,260,0,0,171,171,0,0,172,172,0,0,0,0,0,173,173,0,0,174,0,165,0,0,175,175,0,0,176,176,0,0,177,177,0,0,178,178,0,0,179,179,0,0,0,0,0,0,0,0,0,263,258,0,0,0,0,0,186,189,190,193,191,192,194,186,189,190,193,191,192,194,189,191,189,190,193,191,192,194,189,190,193,191,192,194,186,189,186,189,190,193,191,192,194,258,264,186,189,190,193,191,192,194,192,180,263,189,191,186,189,190,193,191,192,194,186,189,190,193,191,192,194,186,189,190,193,191,192,194,186,189,190,193,191,192,194,186,189,190,193,191,192,194,197,0,0,0,195,195,195,195,195,195,195,184,184,184,184,184,195,184,184,184,197,195,195,195,195,195],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],-1],1,3],0,[[[4,[-1]],-2],1,[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]],[4,[-1]]],[[5,[-1]]],[6,7,8,9,10]],[[-1,-2],[[11,[1,1]]],[12,10],13],[[-1,-2,1],-1,[12,10],13],[[],14],0,0,[[[2,[1]],-1],[[11,[1,-2]]],3,15],0,[[[17,[16]],16,-1],[[11,[16,16]]],3],[[[4,[-1]],-2],[[11,[1,-1]]],15,3],[-1,-1,[]],[[[5,[-1]]],[[18,[-1]]],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[-1,[5,[[11,[[2,[1]]]]]]],[[0,[21]]],[22,23,24,25,26,27]],0,0,[[[4,[-1]],-2],[[5,[1]]],[],3],[[[4,[-1]],-2],[[5,[1]]],[],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,28,[]],0,0,[[[4,[-1]]],[[29,[-1]]],12],0,0,[[[4,[-1]]],[[29,[[11,[-1,-1]]]]],15],[[[4,[-1]],-2],[[29,[[11,[-1,-1]]]]],[],3],[[[4,[-1]],-2],[[29,[[11,[-1,-1]]]]],[],3],0,[[-1,[5,[[11,[[2,[1]]]]]],[29,[1]]],5,[22,23,24,25,26,27]],[[[30,[-1]]],29,[10,15]],[[[31,[-1]]],29,[10,15]],[[[4,[-1]]],32,15],[[[4,[-1]]],[[20,[-1,1]]],15],0,0,[[-1,5],[[5,[1]]],33],0,[[[4,[-1]]],32,15],0,[-1,[[34,[-2,-3]]],[],[],[]],[-1,[[34,[-2,-3]]],[],[],[]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],0,[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,-2],[[5,[1]]],[22,24,25,27],13],[[[2,[1]],-1],1,3],[[[4,[-1]],-2],1,[],3],0,[14,[[5,[[5,[1]]]]]],[14,[[29,[[5,[1]]]]]],[[[5,[[5,[1]]]]],14],[[[2,[1]],-1],[[11,[1,-2]]],3,15],[[[4,[-1]],-2],[[11,[1,-1]]],15,3],[[[17,[16]],16,-1],[[11,[16,16]]],3],[[-1,[5,[[11,[[2,[1]]]]]]],[[0,[21]]],[22,23,24,25,26,27]],[[[4,[-1]],-2],[[5,[1]]],[],3],[[[4,[-1]],-2],[[5,[1]]],[],3],0,[-1,28,[]],[[[4,[-1]],[4,[-1]]],[[5,[-1]]],[6,7,8,9,10]],0,[[1,1,-1,-2,-3],[[39,[-1,-2,-3]]],[40,15],13,13],[[[39,[-1,-2,-3]]],[[11,[[5,[1]],[5,[-1]]]]],[40,15],13,13],[[[4,[-1]]],[[29,[-1]]],12],[[[4,[-1]]],[[29,[[11,[-1,-1]]]]],15],[[[4,[-1]],-2],[[29,[[11,[-1,-1]]]]],[],3],[[[4,[-1]],-2],[[29,[[11,[-1,-1]]]]],[],3],[[-1,[5,[[11,[[2,[1]]]]]],[29,[1]]],5,[22,23,24,25,26,27]],[[[4,[-1]]],[[20,[-1,1]]],15],[[-1,5],[[5,[1]]],33],0,0,0,[[[18,[-1]],1],[[31,[-1]]],[15,10]],[[[18,[-1]],1],[[30,[-1]]],[15,10]],[[[18,[-1]]],32,15],[[[4,[-1]]],32,15],[[[18,[-1]]],[[4,[-1]]],15],[[[18,[-1]]],32,15],[[[4,[-1]]],32,15],0,0,0,0,[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[34,[-2,-1]]],21,41],[[-1,-2],[[35,[-3,-1,-2]]],21,3,[]],[[-1,-2],[[36,[-3,-1,-2]]],21,3,[]],[[[34,[-1,-2]]],[[29,[[11,[1,-1]]]]],41,21],[[[35,[-1,-2,-3]]],[[29,[[11,[1,-1]]]]],[],21,3],[[[36,[-1,-2,-3]]],[[29,[[11,[1,-1]]]]],[],21,3],[-1,[[34,[-2,-3]]],[],[],[]],[-1,[[34,[-2,-3]]],[],[],[]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[11,[1,1]]],[12,10],13],[[-1,-2,1],-1,[12,10],13],[[-1,-2],[[5,[1]]],[22,24,25,27],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[42,[-1]],-2],11,43,[[44,[1]]]],0,0,0,0,[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],11],[[45,45],11],[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],11],[[45,45],11],[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],11],[[45,45],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[46,[-1]]],[[46,[-1]]],[10,15,10]],[[[47,[-1]]],[[47,[-1]]],[10,48]],[45,45],[[[49,[-1,-2]]],[[49,[-1,-2]]],[10,15],[10,15]],[[[50,[-1]]],[[50,[-1]]],10],[[[51,[-1,-2]]],[[51,[-1,-2]]],10,10],[[[52,[-1]]],[[52,[-1]]],10],[[[53,[-1]]],[[53,[-1]]],[10,54]],[[[55,[-1]]],[[55,[-1]]],[10,54]],[[[56,[-1]]],[[56,[-1]]],[10,15]],[[[57,[-1,-2]]],[[57,[-1,-2]]],10,10],[[[58,[-1]]],[[58,[-1]]],[10,15]],[[[59,[-1]]],[[59,[-1]]],[10,48]],[[[60,[-1]]],[[60,[-1]]],10],[61,61],[62,62],[[[42,[-1]]],[[42,[-1]]],[43,10]],[[[63,[-1]]],[[63,[-1]]],[54,10]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[45,45],64],[[[65,[-1]],-2,-1],1,66,[[44,[1]]]],[[[65,[-1]],-2,[17,[-1]]],1,66,[[44,[1]]]],[[61,-1,28],1,[[44,[1]]]],[[62,1],1],[[[65,[-1]],-2,-1],67,66,[[44,[1]]]],[[[65,[-1]],-2,[17,[-1]]],67,66,[[44,[1]]]],0,0,0,[[],[[68,[-1]]],15],[[],45],[[],[[49,[-1,-2]]],[9,15],[9,15]],[[],[[53,[-1]]],[9,54]],[[],[[55,[-1]]],[9,54]],[[],[[56,[-1]]],[9,15]],[[],[[42,[-1]]],[43,9]],[[],[[63,[-1]]],[54,9]],[[[59,[-1]],1,1],29,48],0,[[[46,[-1]],[46,[-1]]],32,[41,15,10]],[[[47,[-1]],[47,[-1]]],32,[41,48]],[[45,45],32],[[[50,[-1]],[50,[-1]]],32,41],[[[58,[-1]],[58,[-1]]],32,[41,15]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[[68,[-1]],-2],11,15,69],[[45,-1],11,69],[[[51,[-1,-2]],-3],11,[12,70],[],69],[[[52,[-1]],-2],11,[12,70],69],[[[65,[-1]],-2,-1,1],[[29,[1]]],66,[[44,[1]]]],[[61,-1,28,1],[[29,[1]]],[[44,[1]]]],[[[68,[-1]],71],72,73],[[[46,[-1]],71],72,[73,15,10]],[[[47,[-1]],71],72,[73,48]],[[[74,[-1]],71],72,73],[[45,71],72],[[45,71],72],[[[49,[-1,-2]],71],72,[73,15],[73,15]],[[[50,[-1]],71],72,73],[[[51,[-1,-2]],71],72,73,73],[[[52,[-1]],71],72,73],[[[53,[-1]],71],72,[73,54]],[[[55,[-1]],71],72,[73,54]],[[[56,[-1]],71],72,75],[[[57,[-1,-2]],71],72,[15,73],73],[[[58,[-1]],71],72,[73,15]],[[61,71],72],[[[42,[-1]],71],72,43],[[[63,[-1]],71],72,54],[[[76,[-1]],-2],[],54,[[44,[1]]]],[[[53,[-1]],77],[],54],[[[55,[-1]],77],[],54],[[[42,[-1]],-2],[],43,[[44,[1]]]],[[[63,[-1]],-2],[],54,[[44,[1]]]],[[[42,[-1]],1,-2],[[11,[1]]],43,13],[[[63,[-1]],1,-2],[[11,[1]]],54,13],[[[42,[-1]],1,-2],[[11,[1]]],43,13],[[[63,[-1]],1,-2],[[11,[1]]],54,13],0,0,[-1,-1,[]],[[[11,[5,-1]]],[[76,[-1]]],54],[5,[[76,[-1]]],[54,9]],[-1,-1,[]],[-1,-1,[]],[[[5,[-1]]],[[78,[-1]]],[10,15]],[-1,-1,[]],[[[5,[-1]]],[[65,[-1]]],66],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[5,[32]]],61],[-1,-1,[]],[[[11,[5,-1]]],[[42,[-1]]],43],[5,[[42,[-1]]],[43,9]],[-1,-1,[]],[5,[[63,[-1]]],[54,9]],[[[11,[5,-1]]],[[63,[-1]]],54],[-1,-1,[]],[-1,[[68,[-2]]],69,15],[-1,45,69],[-1,[[51,[-2,-3]]],69,[12,70],[]],[-1,[[52,[-2]]],69,[12,70]],[[[42,[-1]],1],[[29,[[0,[-1]]]]],43],[[[63,[-1]],1],[[29,[[0,[-1]]]]],54],0,[[[76,[-1]],1],[],54],[[[65,[-1]],1],-1,66],[[[63,[-1]],1],[],54],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]]],[],15],[[[50,[-1]]],[],15],[[[57,[-1,-2]]],[],15,12],[[[57,[-1,-2]]],[],15,12],[[[59,[-1]]],1,48],[62,1],0,[[1,-1],[[59,[-1]]],48],[1,62],[45,45],[45,45],[[45,45],[[29,[64]]]],[[[55,[-1]]],29,54],[[[53,[-1]]],29,54],[[[53,[-1]]],29,54],[[[55,[-1]]],29,54],0,[[[55,[-1]]],11,54],[[[53,[-1]]],11,54],[[[55,[-1]]],11,54],[[[53,[-1]]],11,54],[[[65,[-1]],-2,1],[[29,[-1]]],66,[[44,[1]]]],[[[59,[-1]],1,1],[[37,[32]]],48],0,[[62,1],1],[[[59,[-1]],1],[[11,[1]]],48],0,[[[63,[-1]],1],11,54],[[45,1],45],[[45,1],45],[[45,1],11],[[45,1],45],[[45,1],45],[[45,1],11],0,[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],45],[[45,45],11],[[45,45],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[[62,1,1],32],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[46,[-1]],-1],11,[15,10]],[[[46,[-1]]],[[29,[-1]]],[15,10]],[[],[[46,[-1]]],[15,10]],[[[46,[-1]],-1],32,[15,10]],0,[[[47,[-1]]],11,48],[[[47,[-1]]],29,48],[[[47,[-1]]],[],48],[[],[[47,[-1]]],[9,48]],[[[47,[-1]]],32,48],[-1,[[47,[-1]]],48],0,0,0,0,[-1,[[79,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[[11,[1,1]]]]],[]],[[[80,[-1]],71],72,73],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[[74,[-1]],-1],11,81],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[74,[-1]]],[[80,[-1]]],81],[[[74,[-1]]],[[0,[21,82]]],81],[[],[[74,[-1]]],81],[[[79,[-1]]],[[29,[32]]],81],[[[80,[-1]]],29,81],[[[80,[-1]]],29,81],[-1,11,[]],[[-1,32],11,[]],[-1,[[34,[-2,-3]]],[],[],[]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,83],32,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],-1,[]],0,0,0,[[45,45],45],[[45,45],11],[[45,32],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,1],[[45,1],32],[[45,-1],[[29,[1]]],[[44,[1]]]],[[45,-1],[[29,[1]]],[[44,[1]]]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[45,-1],84,[[44,[1]]]],[[45,1],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,45],45],[[45,45],11],[45,32],[45,1],[[45,[2,[1]]],84],[1,45],[85,29],[84,29],[85,29],[84,29],[45,45],[45,11],[[45,45],45],[[45,45],11],[[45,1],11],[[45,1],11],[[45,1],11],[-1,[[34,[-2,-3]]],[],[],[]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[45,1],45],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1],11],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1,45,-1],45,13],[[45,1,45,-1],11,13],[[45,1,-1],45,13],[[45,1,-1],11,13],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1],45],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1],11],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1,45,-1],45,13],[[45,1,45,-1],11,13],[[45,1,-1],45,13],[[45,1,-1],11,13],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,1,45],45],[[45,1,45],11],[[45,1],45],[[45,1],11],[[45,45],45],[[45,45],11],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,-1],85,[[44,[1]]]],[[45,45],45],[[45,45],11],0,[[[49,[-1,-2]],-1,-2],11,[10,15],[10,15]],[[[49,[-1,-2]]],32,[10,15],[10,15]],[[[49,[-1,-2]]],1,[10,15],[10,15]],[[],[[49,[-1,-2]]],[10,15],[10,15]],[[[49,[-2,-3]],-4],[[86,[-2,-3]]],15,[[87,[-1]],10,15],[10,15],[[44,[-1]]]],[[[49,[-1,-3]],-4],[[86,[-3,-1]]],[10,15],15,[[87,[-2]],10,15],[[44,[-2]]]],[[[49,[-1,-2]],-1],11,[10,15],[10,15]],[[[49,[-1,-2]],-2],11,[10,15],[10,15]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1]],-1],1,15],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[[[50,[-1]],-1],11,15],[[[50,[-1]],-1,1],11,15],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1]]],32,15],[[[50,[-1]]],[[88,[-1]]],15],[[[50,[-1]]],1,15],[[[50,[-1]]],[[29,[-1]]],15],[[[50,[-1]]],[[29,[-1]]],15],[[[50,[-1]]],[[88,[-1]]],15],[[],[[50,[-1]]],15],[[[88,[-1]]],[[29,[-1]]],[]],[[[50,[-1]],-1],11,15],[[[50,[-1]],-1,1],11,15],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,[[[51,[-1,-2]],-1],32,[12,70],[]],[[[51,[-1,-2]],-1,-2],[[29,[-2]]],[12,70],[]],[[[51,[-1,-2]]],32,[12,70],[]],[[[51,[-1,-2]]],1,[12,70],[]],[[],[[51,[-1,-2]]],[12,70],[]],[[[51,[-1,-2]],-1],[[29,[-2]]],[12,70],[]],0,[[[52,[-1]],-1],32,[12,70]],[[[52,[-1]],-1],32,[12,70]],[[[52,[-1]]],32,[12,70]],[[[52,[-1]]],1,[12,70]],[[],[[52,[-1]]],[12,70]],[[[52,[-1]],-1],32,[12,70]],0,[[89,1],32],[[89,1],[[29,[1]]]],[[89,1],[[29,[1]]]],[89,32],[89,1],[[89,1],[[29,[1]]]],[[89,1],[[29,[1]]]],[1,89],[[89,1],32],[89,1],0,0,[[],[[53,[-1]]],[9,54]],[-1,[[53,[-1]]],54],0,[[],[[55,[-1]]],[9,54]],[-1,[[55,[-1]]],54],0,0,[[[56,[-1]]],1,75],[[[56,[-1]],-1],[[29,[-1]]],75],[[],[[56,[-1]]],75],[[-1,[11,[-1,-1]]],-1,[]],[[],-1,[]],[[[56,[-1]],[11,[-1,-1]]],11,75],[[-1,-1,[11,[-1,-1]]],-1,[]],[-1,90,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[91,[-1]]],[[91,[-1]]],10],[[-1,-2],11,[],[]],[[[91,[-1]],[91,[-1]]],64,15],[[[91,[-1]],[91,[-1]]],[[29,[[91,[-1]]]]],15],[[[91,[-1]],[91,[-1]]],32,41],[[-1,-2],32,[],[]],[[[91,[-1]],71],72,73],[-1,-1,[]],[-2,[[91,[-1]]],[15,10],[[44,[-1]]]],[[[91,[-1]]],[[29,[-1]]],15],[[[57,[-1,-2]],-3,-2],11,[15,10],[12,10],[[44,[-1]]]],[[[91,[-1]],[91,[-1]]],[[29,[[91,[-1]]]]],15],[[[91,[-1]],[91,[-1]]],[[11,[[29,[[91,[-1]]]],[5,[[91,[-1]]]]]]],[15,10]],[[[91,[-1]],[91,[-1]]],32,15],[-1,-2,[],[]],[[[91,[-1]],[91,[-1]]],32,15],[[[91,[-1]]],32,15],[[[57,[-1,-2]]],32,[15,10],[12,10]],[[[91,[-1]],[91,[-1]]],32,15],[[[91,[-1]],[91,[-1]]],32,15],[[[57,[-1,-2]]],[[0,[21,82]]],[15,10],[12,10]],[[],[[57,[-1,-2]]],[15,10],[12,10]],[[[91,[-1]],[91,[-1]]],[[29,[64]]],15],[[[57,[-1,-2]],-3],[[5,[[11,[[91,[-1]],-2]]]]],[15,10],[12,10],[[44,[-1]]]],[[[91,[-1]]],[[29,[-1]]],15],[[[57,[-1,-2]],-3],[[29,[[11,[[91,[-1]],-2]]]]],[15,10],[12,10],[[44,[-1]]]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,-2,[],[]],0,[[[58,[-1]]],11,[10,73,15]],[[[58,[-1]],-2],[[29,[[11,[[92,[-1]],[92,[-1]]]]]]],[10,73,15],[[44,[-1]]]],[[[58,[-1]],-2],32,[10,73,15],[[44,[-1]]]],[[[58,[-1]],-2],11,[10,73,15],[[44,[-1]]]],[[[58,[-1]]],32,[10,73,15]],[[[58,[-1]]],[[0,[21,82]]],[10,73,15]],[[[58,[-1]],-1],[[92,[-1]]],[10,73,15]],[[],[[58,[-1]]],[10,73,15]],[[[58,[-1]],-2],11,[10,73,15],[[44,[-1]]]],0,[[[78,[-1]],1,1],-1,[10,15]],0,[1,[[59,[-1]]],[9,48]],0,[[[60,[-1]]],32,15],[[[60,[-1]]],1,15],[[],[[60,[-1]]],15],[[[60,[-1]]],[[29,[-1]]],15],[[[60,[-1]]],[[29,[-1]]],15],[[[60,[-1]],-1],11,15],[[[60,[-1]],-1],11,15],0,[[61,1,28],1],[[61,28,1],[[29,[1]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]]],11,15],[[[93,[-1]]],-1,15],[[[93,[-1]]],-1,15],[[[93,[-1]]],11,15],[-1,[[29,[[11,[94,94]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[95,95]]]]],[]],[-1,[[29,[[11,[96,96]]]]],[]],[-1,[[29,[[11,[97,97]]]]],[]],[-1,[[29,[[11,[98,98]]]]],[]],[-1,[[29,[[11,[99,99]]]]],[]],[-1,[[29,[[11,[100,100]]]]],[]],[-1,[[29,[[11,[83,83]]]]],[]],[-1,[[29,[[11,[90,90]]]]],[]],[-1,[[29,[[11,[28,28]]]]],[]],[-1,[[29,[[11,[101,101]]]]],[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]]],32,15],[[[68,[-1]]],1,15],[[[102,[-1]]],1,15],[[[68,[-1]],[68,[-1]]],11,15],[[],[[68,[-1]]],15],[[[102,[-1]]],29,15],[[[68,[-1]]],[[29,[-1]]],15],[[[68,[-1]]],[[29,[[93,[-1]]]]],15],[[[68,[-1]]],[[29,[-1]]],15],[[[93,[-1]]],-1,15],[[[68,[-1]],-1],11,15],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[[[102,[-1]]],[[11,[1,[29,[1]]]]],15],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[42,[-1]]],32,43],[[[42,[-1]]],1,43],[1,[[42,[-1]]],[9,43]],0,[[[63,[-1]]],32,54],[[[63,[-1]]],1,54],[1,[[63,[-1]]],[9,54]],0,0,[-1,1,[]],[[[65,[-1]]],32,66],[[[65,[-1]]],1,66],[[[65,[-1]],1,-1],1,66],[[[65,[-1]],-1,1],[[29,[1]]],66],[[-1,1],11,[]],[[-1,1],32,[]],[[[65,[-1]],-2,1,-1],[[29,[-1]]],66,[[44,[1]]]],[[],-1,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[103,103],[104,104],[105,105],[106,106],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[1,-1,-2,-3,-4],[[5,[[29,[-2]]]]],15,[15,40,10],3,3],0,[[1,-1,-1,-2,-3,-4,-5,-6],-3,10,[21,10],[15,10,6,7],[13,107],[13,107],[13,107]],0,[[103,103],32],[[105,105],32],[[106,106],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[103,71],72],[[104,71],72],[[105,71],72],[[106,71],72],[-1,-1,[]],[[[5,[[5,[[11,[1,-1]]]]]]],[[108,[-1]]],[]],[[[5,[1]]],103],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,[4,[[11,[1,1,-1]]]],1],[[5,[[5,[[11,[1,-1]]]]]]],10],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,-1,-2,-3],[[5,[1]]],21,[13,107],[13,107]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[4,[[11,[1,1,-1]]]],1],[[5,[[5,[[11,[1,-1]]]]]]],10],[[1,-1,-2,-3,-4],[[5,[[29,[-2]]]]],15,[15,40,10],3,3],[[1,-1,-1,-2,-3,-4,-5,-6],-3,10,[21,10],[15,10,6,7],[13,107],[13,107],[13,107]],0,[[103,1],[[11,[1,1]]]],0,0,0,0,0,0,0,[[104,1],1],[[104,1],1],[105,[[11,[1,1]]]],[[104,1,1],1],[[[5,[[5,[1]]]],1],104],[[104,1,1],[[0,[21]]]],[105,105],[[104,1],[[11,[1,1]]]],[[1,-1,-2,-3],[[5,[1]]],21,[13,107],[13,107]],0,[[[108,[-1]],-2,-3,-4],[[5,[-2]]],[],10,3,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[109,[-1]],[109,[-1]]],11,110],[[[109,[-1]],[109,[-1]]],11,110],[[[111,[-1]],[111,[-1]]],11,112],[[[111,[-1]],[111,[-1]]],11,112],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[],115],[[1,1],[[0,[21]]]],0,[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[[109,[-1]]]]],11,114],[[],[[116,[-1]]],[]],[[[4,[[109,[-1]]]]],11,114],[[],[[117,[[116,[-1]]]]],[]],[[],[[117,[[116,[118]]]]]],0,[-1,-1,[]],[-1,[[29,[-1]]],[]],[119,119],[120,120],[[[109,[-1]]],[[109,[-1]]],10],[[[111,[-1]]],[[111,[-1]]],10],[121,121],[118,118],[122,122],[[[113,[-1]]],[[113,[-1]]],[10,114]],[123,123],[124,124],[125,125],[[[126,[-1]]],[[126,[-1]]],[10,15]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[-1,[],[]],0,0,[-1,[[0,[21]]],21],0,0,[[[5,[[109,[-1]]]],[5,[[109,[-1]]]]],[[5,[[109,[-1]]]]],114],[[[4,[101]],[4,[101]]],[[5,[101]]]],[[[4,[101]],[4,[101]],101],[[5,[101]]]],[[[4,[83]],[4,[83]],83],[[5,[83]]]],[[[4,[28]],[4,[28]]],[[5,[28]]]],[[[4,[28]],[4,[28]],28],[[5,[28]]]],[[[4,[101]],[4,[101]]],[[5,[101]]]],[[[4,[28]],[4,[28]]],[[5,[28]]]],[-1,[],[]],[-1,[],[]],[[],[[109,[-1]]],110],[[],[[111,[-1]]],112],[[],[[126,[-1]]],[9,15]],[[-1,-1,83],-1,[]],0,[[-1,-1],-1,[]],0,[[-1,-1],[[127,[-1]]],[]],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[109,[-1]],[109,[-1]]],11,110],[[[109,[-1]],[109,[-1]]],11,110],[[[111,[-1]],[111,[-1]]],11,112],[[[111,[-1]],[111,[-1]]],11,112],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],0,[-1,[],[]],0,[[-1,-1,-1],[[29,[-1]]],[]],[[119,119],32],[[120,120],32],[[[109,[-1]],[109,[-1]]],32,41],[[[111,[-1]],[111,[-1]]],32,41],[[121,121],32],[[118,118],32],[[122,122],32],[[[113,[-1]],[113,[-1]]],32,[41,114]],0,[[-1,-1],[[29,[-1]]],[]],[-1,[[29,[[11,[-2,-2]]]]],[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],0,[-1,-1,[]],0,[-1,[],[]],0,[-1,[],[]],[[[128,[-1]],71],72,129],[[119,71],72],[[120,71],72],[[[109,[-1]],71],72,110],[[[109,[-1]],71],72,110],[[[111,[-1]],71],72,112],[[[111,[-1]],71],72,112],[[121,71],72],[[[113,[-1]],71],72,114],[[[113,[-1]],71],72,114],[[123,71],72],[[130,71],72],[[124,71],72],[[125,71],72],[[[126,[-1]],71],72,[73,15]],0,[-1,[[131,[-2,-3]]],[],[],[]],[[-1,-2],[[131,[-2,-3]]],[],[],[]],0,[[-1,-2],[[11,[[11,[-1,-1]],[11,[-1,-1]]]]],[],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[11,[[11,[[0,[-1]],[0,[-1]]]],32]]],[[128,[-1]]],132],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[109,[-2]]],133,110],[-1,-1,[]],[-1,[[111,[-2]]],133,112],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[134,[94]]],[[113,[-1]]],114],[[[5,[95]]],[[113,[-1]]],114],[[[5,[100]]],[[113,[-1]]],114],[[[134,[28]]],[[113,[-1]]],114],[[[4,[96]]],[[113,[-1]]],114],[[[134,[100]]],[[113,[-1]]],114],[[[5,[97]]],[[113,[-1]]],114],[[[5,[28]]],[[113,[-1]]],114],[[[134,[83]]],[[113,[-1]]],114],[-1,-1,[]],[[[134,[99]]],[[113,[-1]]],114],[[[134,[1]]],[[113,[-1]]],114],[[[134,[98]]],[[113,[-1]]],114],[[[5,[[109,[-1]]]]],[[113,[-1]]],114],[[[134,[97]]],[[113,[-1]]],114],[[[4,[83]]],[[113,[-1]]],114],[[[134,[96]]],[[113,[-1]]],114],[[[4,[97]]],[[113,[-1]]],114],[[[134,[90]]],[[113,[-1]]],114],[[[5,[96]]],[[113,[-1]]],114],[[[4,[28]]],[[113,[-1]]],114],[[[4,[95]]],[[113,[-1]]],114],[[[4,[99]]],[[113,[-1]]],114],[[[4,[101]]],[[113,[-1]]],114],[[[5,[94]]],[[113,[-1]]],114],[[[4,[98]]],[[113,[-1]]],114],[[[134,[101]]],[[113,[-1]]],114],[[[134,[[109,[-1]]]]],[[113,[-1]]],114],[[[5,[83]]],[[113,[-1]]],114],[[[5,[101]]],[[113,[-1]]],114],[[[4,[[109,[-1]]]]],[[113,[-1]]],114],[[[5,[98]]],[[113,[-1]]],114],[[[5,[90]]],[[113,[-1]]],114],[[[5,[1]]],[[113,[-1]]],114],[[[5,[99]]],[[113,[-1]]],114],[[[4,[100]]],[[113,[-1]]],114],[[[134,[95]]],[[113,[-1]]],114],[[[4,[94]]],[[113,[-1]]],114],[[[4,[90]]],[[113,[-1]]],114],[[[4,[1]]],[[113,[-1]]],114],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[-1,-1],-1,[]],0,[[-1,-1],[[11,[-1,-1]]],[]],[-1,83,[]],[[[109,[-1]]],83,110],[[[111,[-1]]],83,112],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],0,[[[109,[-1]],-2],11,110,135],[[[111,[-1]],-2],11,112,135],[[121,-1],11,135],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-1,-1],32,[]],0,[-1,32,[]],0,[[-1,-1],-1,[]],0,[[-1,-1,-1,-1],-1,[]],0,0,0,[[-1,-1,-1],-1,[]],0,0,[[-1,-1],[[29,[-1]]],[]],0,[[-1,-1,-1],-1,[]],0,[[28,28],[[5,[28]]]],0,[[-1,-1,-1],-1,[]],0,[[],83],[[],83],[[],83],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[109,[-1]],[109,[-1]]],11,110],[[[109,[-1]],[109,[-1]]],11,110],[[[111,[-1]],[111,[-1]]],11,112],[[[111,[-1]],[111,[-1]]],11,112],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[109,[-1]]],[[109,[-1]]],110],[[[111,[-1]]],[[111,[-1]]],112],[[[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]]],[[113,[-1]]],114],[-1,-2,133,[]],[83,-1,[]],[83,[[109,[-1]]],110],[83,[[111,[-1]]],112],[[[131,[-1,-2]]],29,132,13],0,[[-1,28],-1,[]],[1,1],0,[-1,[[109,[-2]]],21,110],[-1,[[109,[-2]]],21,110],[-1,[[111,[-2]]],21,112],[-1,[[111,[-2]]],21,112],[-1,-1,[]],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],0,[[[113,[-1]],1],[],114],[[[113,[-1]],1],[],114],[[[113,[-1]],1],11,114],[[[113,[-1]],1],[],114],[[[113,[-1]],1],[],114],[[[113,[-1]],1],11,114],0,0,0,0,[-1,-1,[]],[98,[[0,[21]]]],0,[98,[[11,[98,[0,[13]]]]]],[[98,-1,-2],[[37,[[11,[98,98]],[11,[[11,[98,98]],[11,[98,98]]]]]]],3,3],0,[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[109,[-1]],[109,[-1]]],[[109,[-1]]],110],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[111,[-1]],[111,[-1]]],[[111,[-1]]],112],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[113,[-1]],[109,[-1]]],[[113,[-1]]],114],[[[109,[-1]],[109,[-1]]],11,110],[[[109,[-1]],[109,[-1]]],11,110],[[[111,[-1]],[111,[-1]]],11,112],[[[111,[-1]],[111,[-1]]],11,112],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[[[113,[-1]],[109,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],11,114],[-1,[[109,[-2]]],21,110],[-1,[[109,[-2]]],21,110],[-1,[[111,[-2]]],21,112],[-1,[[111,[-2]]],21,112],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,136,[]],[-1,136,[]],[-1,136,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],0,[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[0,[21]]]],0,[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[29,[[11,[90,90]]]]],[]],[-1,[[29,[[11,[101,101]]]]],[]],[-1,[[29,[[11,[94,94]]]]],[]],[-1,[[29,[[11,[99,99]]]]],[]],[-1,[[29,[[11,[95,95]]]]],[]],[-1,[[29,[[11,[96,96]]]]],[]],[-1,[[29,[[11,[97,97]]]]],[]],[-1,[[29,[[11,[83,83]]]]],[]],[-1,[[29,[[11,[100,100]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[28,28]]]]],[]],[-1,[[29,[[11,[98,98]]]]],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[137,[96]]],[[29,[[11,[96,96]]]]]],[[[137,[83]]],[[29,[[11,[83,83]]]]]],[[[137,[28]]],[[29,[[11,[28,28]]]]]],[[[137,[97]]],[[29,[[11,[97,97]]]]]],[[[137,[1]]],[[29,[[11,[1,1]]]]]],[[[137,[101]]],[[29,[[11,[101,101]]]]]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,[[138,1],32],[1,138],[138,[[0,[21]]]],0,0,[28,119],[28,120],[[119,28],28],[[120,28],28],[[119,28],28],[[120,28],28],[-1,[[0,[21]]],21],0,0,0,0,0,[[[4,[[109,[-1]]]]],11,114],[[],[[116,[-1]]],[]],[[[4,[[109,[-1]]]]],11,114],[[],[[117,[[116,[-1]]]]],[]],[[[5,[[109,[-1]]]],[5,[[109,[-1]]]]],[[5,[[109,[-1]]]]],114],[[[4,[101]],[4,[101]]],[[5,[101]]]],[[[4,[101]],[4,[101]],101],[[5,[101]]]],[[[4,[83]],[4,[83]],83],[[5,[83]]]],[[[4,[28]],[4,[28]]],[[5,[28]]]],[[[4,[28]],[4,[28]]],[[5,[28]]]],[[[4,[28]],[4,[28]],28],[[5,[28]]]],[[[4,[101]],[4,[101]]],[[5,[101]]]],[[[4,[28]],[4,[28]]],[[5,[28]]]],0,[[-1,-1,83],-1,[]],[[-1,-1],-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1],[[127,[-1]]],[]],[-1,[[29,[[11,[95,95]]]]],[]],[-1,[[29,[[11,[98,98]]]]],[]],[-1,[[29,[[11,[94,94]]]]],[]],[-1,[[29,[[11,[99,99]]]]],[]],[-1,[[29,[[11,[100,100]]]]],[]],[-1,[[29,[[11,[90,90]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[101,101]]]]],[]],[-1,[[29,[[11,[28,28]]]]],[]],[-1,[[29,[[11,[83,83]]]]],[]],[-1,[[29,[[11,[97,97]]]]],[]],[-1,[[29,[[11,[96,96]]]]],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1],[[127,[-1]]],[]],[[[127,[83]]],[[29,[83]]]],[[[127,[101]]],[[29,[101]]]],[[[127,[28]]],[[29,[28]]]],[[[127,[1]]],[[29,[1]]]],[[[127,[97]]],[[29,[97]]]],[[[127,[96]]],[[29,[96]]]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[29,[[11,[83,83]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[90,90]]]]],[]],[-1,[[29,[[11,[100,100]]]]],[]],[-1,[[29,[[11,[99,99]]]]],[]],[-1,[[29,[[11,[94,94]]]]],[]],[-1,[[29,[[11,[98,98]]]]],[]],[-1,[[29,[[11,[95,95]]]]],[]],[-1,[[29,[[11,[101,101]]]]],[]],[-1,[[29,[[11,[28,28]]]]],[]],[-1,[[29,[[11,[97,97]]]]],[]],[-1,[[29,[[11,[96,96]]]]],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[139,[83]]],[[29,[83]]]],[[[139,[1]]],[[29,[1]]]],[[[139,[96]]],[[29,[96]]]],[[[139,[28]]],[[29,[28]]]],[[[139,[101]]],[[29,[101]]]],[[[139,[97]]],[[29,[97]]]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,[[-1,-1,-1],[[29,[-1]]],[]],0,0,[[-1,-1],[[29,[-1]]],[]],[-1,[[29,[[11,[-2,-2]]]]],[],[]],0,[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[[11,[95,95]]]]],[]],[-1,[[29,[[11,[96,96]]]]],[]],[-1,[[29,[[11,[97,97]]]]],[]],[-1,[[29,[[11,[83,83]]]]],[]],[-1,[[29,[[11,[28,28]]]]],[]],[-1,[[29,[[11,[101,101]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[90,90]]]]],[]],[-1,[[29,[[11,[100,100]]]]],[]],[-1,[[29,[[11,[99,99]]]]],[]],[-1,[[29,[[11,[94,94]]]]],[]],[-1,[[29,[[11,[98,98]]]]],[]],[-1,[],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[140,[28]]],[[29,[[11,[28,83]]]]]],[[[140,[97]]],[[29,[[11,[97,83]]]]]],[[[140,[83]]],[[29,[[11,[83,83]]]]]],[[[140,[101]]],[[29,[[11,[101,83]]]]]],[[[140,[1]]],[[29,[[11,[1,83]]]]]],[[[140,[96]]],[[29,[[11,[96,83]]]]]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[[11,[97,97]]]]],[]],[-1,[[29,[[11,[1,1]]]]],[]],[-1,[[29,[[11,[98,98]]]]],[]],[-1,[[29,[[11,[101,101]]]]],[]],[-1,[[29,[[11,[28,28]]]]],[]],[-1,[[29,[[11,[94,94]]]]],[]],[-1,[[29,[[11,[90,90]]]]],[]],[-1,[[29,[[11,[83,83]]]]],[]],[-1,[[29,[[11,[96,96]]]]],[]],[-1,[[29,[[11,[100,100]]]]],[]],[-1,[[29,[[11,[95,95]]]]],[]],[-1,[[29,[[11,[99,99]]]]],[]],[-1,[],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[141,[101]]],[[29,[101]]]],[[[141,[1]]],[[29,[1]]]],[[[141,[96]]],[[29,[96]]]],[[[141,[83]]],[[29,[83]]]],[[[141,[28]]],[[29,[28]]]],[[[141,[97]]],[[29,[97]]]],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-1,[]],[[-1,-1],-1,[]],[-1,[[131,[-2,-3]]],[],[],[]],[[-1,-2],[[131,[-2,-3]]],[],[],[]],[[],[[11,[-1,-1]]],[]],[[[128,[-1]]],[[11,[-1,-1]]],[]],[[],[[11,[-1,-1]]],[]],[[-1,-1],32,[]],[-1,-1,[]],[[-1,[11,[-1,-1]],[11,[-1,-1]]],-1,[]],[[],[[11,[-1,-1]]],[]],0,0,0,0,0,[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-2],[[11,[[11,[-1,-1]],[11,[-1,-1]]]]],[],13],[[-1,-1],32,[]],[-1,-1,[]],[[-1,[11,[-1,-1]],[11,[-1,-1]]],-1,[]],0,0,0,0,[-1,[],[]],[-1,[],[]],0,[[-1,-1],-1,[]],0,[[-1,-1],[[11,[-1,-1]]],[]],0,[1,123],[[123,-1],1,[[44,[1]]]],[[123,-1],1,[[44,[1]]]],0,[[142,28],28],[[[5,[28]],28],142],0,[[-1,-1,-1,-1],32,[]],0,[[-1,-1],-1,[]],0,[[-1,-1,-1,-1],-1,[]],0,[[143,1],[[0,[21,82]]]],[[143,1],1],[[143,1],1],[[143,-1,-1,-2,-3],[[5,[-1]]],[],13,13],[[143,1],1],[[143,1],1],[[143,1],[[0,[21]]]],[[143,1],[[0,[21]]]],[[143,1],32],[[143,1],[[29,[1]]]],[1,143],[143,[[0,[21,82]]]],[[143,1,1],[[5,[1]]]],0,[-1,32,[]],0,[[-1,-1,-1],-1,[]],0,[[144,1,1],28],[[144,1],28],[[144,1],28],[[1,28],144],[[144,1,1],28],[[144,1],28],0,[[-1,-1],[[29,[-1]]],[]],0,[[-1,-1,-1],-1,[]],[[28,28],[[5,[28]]]],0,[[-1,-1,-1],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-1]]],[]],[[],115],[[],115],[-1,-1,[]],[-1,83,[]],[-1,-2,[],[]],[[],83],[[],83],[-1,-2,133,[]],[83,115],[83,-1,[]],[[-1,28],-1,[]],[-1,-1,[]],[[-1,83],83,[]],[83,11],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,-2,[],[]],0,[[[113,[-1]],[113,[-1]],1],[[11,[[113,[-1]],[113,[-1]]]]],114],[[[113,[-1]],1],[[113,[-1]]],114],[[[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]]],11,114],[[[113,[-1]],[113,[-1]]],[[11,[[113,[-1]],[113,[-1]]]]],114],[[[113,[-1]],[113,[-1]],1],[[109,[-1]]],114],[[[113,[-1]],-2],[[109,[-1]]],114,[[145,[[109,[-1]]]]]],[[[113,[-1]],1],[[113,[-1]]],114],[[[113,[-1]],1],11,114],[[[113,[-1]],1],11,114],[[[113,[-1]],1],11,114],[[[113,[-1]],1,-2],[[113,[-1]]],114,13],[[[113,[-1]],1],[[109,[-1]]],114],[[[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]]],11,114],[[[113,[-1]]],[[5,[[109,[-1]]]]],114],[[[113,[-1]]],32,114],[[[113,[-1]]],1,114],[[[113,[-1]],1],[[113,[-1]]],114],[[],[[113,[-1]]],114],[[[113,[-1]],1,-2],[[113,[-1]]],114,13],[[[113,[-1]],-2,1],[[113,[-1]]],114,[[145,[[109,[-1]]]]]],[[[113,[-1]],1],[[113,[-1]]],114],[[[113,[-1]],1],[[113,[-1]]],114],[[[113,[-1]]],11,114],[[[113,[-1]]],[[113,[-1]]],114],[[[113,[-1]],1],[[113,[-1]]],114],[[[113,[-1]],1],[[113,[-1]]],114],[[[113,[-1]],1],11,114],[[[113,[-1]],1],[[113,[-1]]],114],[1,1],0,[[130,1],[[0,[21]]]],[[130,1],[[0,[21]]]],[[130,1],[[0,[21]]]],[[[17,[1]]],130],0,[[124,1],[[0,[21]]]],[[124,1],[[0,[21]]]],[[124,1],32],[1,124],[124,[[0,[21]]]],0,[[125,1],[[0,[21]]]],[[125,1],[[0,[21]]]],[[125,1],32],[1,125],[125,[[0,[21]]]],0,0,[[[126,[-1]],-1],11,146],[[[126,[-1]],-1],11,146],[[[126,[-1]],-1],11,146],[[[126,[-1]],-1],11,146],[[[126,[-1]]],[[11,[[92,[-1]],[92,[-1]]]]],146],[[-1,-1],-1,[]],[[[126,[-1]]],-1,146],[[[126,[-1]]],11,146],[[[126,[-1]]],11,146],[[],[[126,[-1]]],146],[[[126,[-1]],-1],11,146],[[[126,[-1]],[17,[-1]]],11,146],0,[-1,-1,[]],[98,[[0,[21]]]],[98,[[11,[98,[0,[13]]]]]],[[98,-1,-2],[[37,[[11,[98,98]],[11,[[11,[98,98]],[11,[98,98]]]]]]],3,3],0,[[147,95,95],11],[1,147],[147,[[29,[[5,[32]]]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[148,[-1]]],[[148,[-1]]],[10,12]],[[[149,[-1]]],[[149,[-1]]],[10,15]],[[[150,[-1]]],[[150,[-1]]],[10,12]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[148,[-1]],[148,[-1]]],32,[41,12]],[[[149,[-1]],[149,[-1]]],32,[41,15]],[[[150,[-1]],[150,[-1]]],32,[41,12]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[[148,[-1]],71],72,[73,12]],[[[149,[-1]],71],72,[73,15]],[[[150,[-1]],71],72,[73,12]],[[[5,[-1]]],[[148,[-1]]],12],[-1,-1,[]],[[[5,[-1]]],[[149,[-1]]],15],[136,[[149,[151]]]],[-1,-1,[]],[[[5,[-1]]],[[150,[-1]]],[10,12]],[-1,-1,[]],[[[149,[-1]],1],1,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[148,[-1]]],[[29,[1]]],12],[[[148,[-1]],-1],11,12],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[152,[-1]]],29,12],[[[148,[-1]],[4,[-1]]],[[152,[-1]]],12],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],0,[[[5,[96]]],[[149,[96]]]],[[[5,[1]]],[[149,[1]]]],[[[149,[-1]]],[[5,[1]]],15],[[[149,[-1]]],[[5,[1]]],15],[[[149,[-1]],[4,[-1]]],[[0,[21]]],15],[[[149,[151]],153],[[0,[21]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[-1,-2],[[20,[-3,[5,[-4,19]],19]]],[],3,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[154,[-1]]],29,12],[[[150,[-1]],[4,[-1]]],[[154,[-1]]],12],[-1,[[34,[-2,-3]]],[],[],[]],[[-1,-2],[[35,[-3,-4,-2]]],[],3,[],[]],[[-1,-2],[[36,[-3,-4,-2]]],[],3,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[[-1,-2],[[5,[[5,[-3,19]],19]]],[],3,[]],[-1,-2,[],[]],[[[150,[-1]],1],1,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],11,[],[]],[-1,[],[]],0,[-1,[],[]],0,[-1,[],[]],0,0,[[-1,-2],[],[],3],0,[[-1,-2,-3],1,[],[[44,[1]]],[]],[[-1,1],1,[]],[-1,1,[]],[[-1,-2,-3],67,[],[[44,[1]]],[]],[[-1,1,1],29,[]],0,0,[-1,1,[]],[[-1,1,1],32,[]],[-1,11,[]],[-1,11,[]],0,[[-1,-2,-3,1],[[29,[1]]],[],[[44,[1]]],[]],0,[[-1,-2],[],[],[]],0,[[-1,1,-2],[[11,[1]]],[],13],[[-1,1,-2],[[11,[1]]],[],13],[-1,1,[]],0,[[-1,1],29,[]],0,[[-1,-2],[[20,[-3,[5,[-4]]]]],[],3,15,[]],[-1,[],[]],[-1,[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],0,[[],-1,[]],0,[[],-1,[]],[-1,[],[]],[-1,[],[]],0,[-1,[],[]],[-1,[],[]],[1,-1,[]],[1,-1,[]],[-1,11,[]],[[],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,29,[]],[-1,[[5,[[5,[1]]]]],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,[-1,32,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,[[-1,-2,1],29,[],[[44,[1]]]],0,[-1,[],[]],[-1,[],[]],[[-1,1,1],[[37,[32]]],[]],[[-1,1],1,[]],[[-1,1],[[11,[1]]],[]],[-1,11,[]],[-1,11,[]],0,[[-1,-2],11,[],[]],[-1,11,[]],[-1,11,[]],[-1,1,[]],0,[[-1,1],[[5,[1]]],[]],[[-1,1,1],32,[]],0,[[-1,-2],[[5,[[5,[-3]]]]],[],3,[]],[[],-1,[]],[-1,[],[]],0,0,[[-1,-2],11,[],[]],0,0,0,[-1,[],[]],[-1,[],[]],[-1,[],[]],0,0,0,[[],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,29,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],0,0,0,[[-1,-2],[],[],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[67,67],[[-1,-2],11,[],[]],[[-1,-2,-3],1,[],[[44,[1]]],[]],[[-1,-2,-3],67,[],[[44,[1]]],[]],[[67,67],32],[67,1],[[-1,-2],32,[],[]],[[67,71],72],[-1,-1,[]],[67,1],[67,1],[-1,-2,[],[]],[67,1],[67,1],[67,1],[[1,1,1],67],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,-2,[],[]],0,[[-1,1],1,[]],[[-1,1,1],32,[]],[-1,32,[]],[-1,1,[]],[1,-1,[]],[-1,[[5,[[5,[1]]]]],[]],[[-1,1],1,[]],[[-1,1],[[5,[1]]],[]],[[-1,1,1],32,[]],0,0,0,0,0,0,0,0,[-1,1,[]],[-1,11,[]],[-1,11,[]],[-1,1,[]],[-1,[],[]],[-1,32,[]],[-1,1,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,1,[]],0,[[-1,-2,-3,1],[[29,[1]]],[],[[44,[1]]],[]],0,0,[[-1,-2],[],[],[]],0,0,[[-1,1,-2],[[11,[1]]],[],13],[[-1,1,-2],[[11,[1]]],[],13],0,0,[[-1,1],29,[]],0,[[-1,-2],[[20,[-3,[5,[-4]]]]],[],3,15,[]],0,[[],-1,[]],0,[[],-1,[]],0,0,0,0,0,[-1,[],[]],[[],-1,[]],0,0,0,0,[[-1,1,1],29,[]],[-1,32,[]],[-1,1,[]],[1,-1,[]],[[-1,1,1],[[37,[32]]],[]],[[-1,1],[[11,[1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,[[-1,-2,1],29,[],[[44,[1]]]],0,0,0,0,0,0,0,0,0,[[-1,-2],11,[],[]],0,0,[-1,1,[]],[-1,11,[]],[-1,32,[]],[-1,11,[]],0,[[-1,-2],[[5,[[5,[-3]]]]],[],3,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[155,[-1]],[11,[-1,-1]],-1],[[11,[-1,-1]]],[15,12,10,40,156,8,157,158]],[[[159,[-1]],-1,-1],-1,[15,12,40,156,157,160,158]],[[[161,[-1]],-1,-1],-1,[15,12,40,156,157,162,158]],[[[163,[-1]],[11,[-1,-1]],[11,[-1,-1]]],[[11,[-1,-1]]],[15,12,10,40,156,8,157,164,158]],[[[165,[-1,-2,-3,-4,-5,-6,-7]],-1,-4],-1,[12,158],13,13,[12,158],13,13,13],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],[[2,[1]]],[[44,[1]]]],0,[[[4,[96]]],101],[[1,1],11],[[1,-1],11,[[44,[1]],73]],[166,166],[167,167],[168,168],[169,169],[170,170],[[[171,[-1]]],[[171,[-1]]],10],[[[172,[-1]]],[[172,[-1]]],10],[[[155,[-1]]],[[155,[-1]]],10],[[[159,[-1]]],[[159,[-1]]],10],[[[161,[-1]]],[[161,[-1]]],10],[[[173,[-1]]],[[173,[-1]]],10],[[[163,[-1]]],[[163,[-1]]],10],[[[174,[-1,-2,-3]]],[[174,[-1,-2,-3]]],10,[10,13],[10,13]],[[[165,[-1,-2,-3,-4,-5,-6,-7]]],[[165,[-1,-2,-3,-4,-5,-6,-7]]],10,[13,10],[13,10],10,[13,10],[13,10],[13,10]],[[[175,[-1]]],[[175,[-1]]],10],[[[176,[-1]]],[[176,[-1]]],10],[[[177,[-1]]],[[177,[-1]]],10],[[[178,[-1]]],[[178,[-1]]],10],[179,179],[[[180,[-1]]],[[180,[-1]]],10],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[],[[171,[-1]]],[]],[[],[[172,[-1]]],[]],[[],[[155,[-1]]],9],[[],[[159,[-1]]],9],[[],[[161,[-1]]],9],[[],[[173,[-1]]],[]],[[],[[163,[-1]]],9],[[],[[174,[-1,-2,-3]]],9,[9,13],[9,13]],[[],[[165,[-1,-2,-3,-4,-5,-6,-7]]],9,[13,9],[13,9],9,[13,9],[13,9],[13,9]],[[],[[175,[-1]]],[]],[[],[[176,[-1]]],[]],[[],[[177,[-1]]],[]],[[],[[178,[-1]]],[]],[[],179],0,[[[171,[-1]],[171,[-1]]],32,41],[[[172,[-1]],[172,[-1]]],32,41],[[[173,[-1]],[173,[-1]]],32,41],[[[175,[-1]],[175,[-1]]],32,41],[[[176,[-1]],[176,[-1]]],32,41],[[[177,[-1]],[177,[-1]]],32,41],[[[178,[-1]],[178,[-1]]],32,41],[[179,179],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[181,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[182,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[183,[-1]],71],72,158],[[[171,[-1]],71],72,73],[[[172,[-1]],71],72,73],[[[155,[-1]],71],72,73],[[[159,[-1]],71],72,73],[[[161,[-1]],71],72,73],[[[173,[-1]],71],72,73],[[[163,[-1]],71],72,73],[[[174,[-1,-2,-3]],71],72,73,[73,13],[73,13]],[[[165,[-1,-2,-3,-4,-5,-6,-7]],71],72,73,[13,73],[13,73],73,[13,73],[13,73],[13,73]],[[[175,[-1]],71],72,73],[[[176,[-1]],71],72,73],[[[177,[-1]],71],72,73],[[[178,[-1]],71],72,73],[[179,71],72],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[136,184],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[],[],[]],[[[171,[-1]]],[],[40,12,158,157]],[[[172,[-1]]],[],[40,12,158,157]],[[[173,[-1]]],[],[40,8,12,10,158,157,164]],[[[174,[-1,-2,-3]]],-1,12,13,13],[[[175,[-1]]],[],[185,12,157,158]],[[[176,[-1]]],[],[15,12,158,160]],[[[177,[-1]]],[],[15,12,158,162]],[[[178,[-1]]],[],[8,12,158,164]],[179],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1],32,[]],[[-1,-1],32,[]],0,[[[171,[-1]]],[],[40,12,158]],[[[172,[-1]]],[],[40,12,158]],[[[173,[-1]]],[],[40,8,12,10,158]],[[[174,[-1,-2,-3]],-1,-1],-1,12,13,13],[[[175,[-1]]],[],[185,12,158]],[[[176,[-1]]],[],[15,12,158]],[[[177,[-1]]],[],[15,12,158]],[[[178,[-1]]],[],[8,12,158]],[179],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[155,[-1]]],[],[15,12,10,40,156,8,157,158]],[[[159,[-1]]],[],[15,12,40,156,157,160,158]],[[[161,[-1]]],[],[15,12,40,156,157,162,158]],[[[163,[-1]]],[],[15,12,10,40,156,8,157,164,158]],[[[165,[-1,-2,-3,-4,-5,-6,-7]]],[],[12,158],13,13,[12,158],13,13,13],[[[155,[-1]]],[],[15,12,10,40,156,8,157,158]],[[[159,[-1]]],[],[15,12,40,156,157,160,158]],[[[161,[-1]]],[],[15,12,40,156,157,162,158]],[[[163,[-1]]],[],[15,12,10,40,156,8,157,164,158]],[[[165,[-1,-2,-3,-4,-5,-6,-7]]],[],[12,158],13,13,[12,158],13,13,13],[[[180,[-1]]],[[186,[-1]]],[]],0,[[[171,[-1]]],29,[40,12,158,187]],[[[178,[-1]]],29,[8,12,158,188]],[[-1,-2],-1,[],[]],[[-1,-2],-1,[],[]],0,[[[171,[-1]]],[],[40,12,158,187]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,136,[]],[-1,136,[]],[-1,136,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[4,[96]]],101],0,0,0,0,0,0,0,[166,96],[167,97],[168,83],[169,28],[170,101],[96,166],[97,167],[83,168],[28,169],[101,170],[[-1,-2],-1,[],[]],[[-1,-2],-1,[],[]],[[-1,1],[[2,[1]]],[[44,[1]]]],[[1,1],11],[[1,-1],11,[[44,[1]],73]],0,0,[[-1,-1],32,[]],[[-1,-1],32,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[174,[-3,-1,-2]]],13,13,12],0,[[[174,[-1,-2,-3]],[174,[-4,-5,-6]],-7],[[165,[-1,-2,-3,-4,-5,-6,-7]]],[12,158],13,13,[12,158],13,13,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[179,153]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[189,101],190],[[191,101],192],[189,189],[190,190],[193,193],[191,191],[192,192],[194,194],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[186,[-1]]],[[186,[-1]]],[]],[[189,[4,[[11,[101,83]]]]],193],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[],[],[]],[-1,136,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,192],[[-1,1],[[180,[-1]]],[]],[-1,[],[]],[189,189],[191,191],[[[186,[-1]]],[[186,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[195,195],32],[[-1,-2],32,[],[]],[[195,71],72],[[195,71],72],[-1,-1,[]],[[],[[37,[184,196]]]],[184,153],[[184,-1],153,13],[184,11],[[184,-1],11,13],[-1,-2,[],[]],[184,[[37,[-1]]],197],[184,[[37,[-1]]],[197,198,[199,[96]]]],[[184,1],[[37,[[5,[-1]]]]],[197,10]],[153,[[11,[[37,[-1]],1]]],[]],[-1,136,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,38,[]],[-1,-2,[],[]]],"c":[],"p":[[15,"usize"],[3,"Range",3264],[8,"FnMut",3265],[15,"slice"],[3,"Vec",3266],[8,"AddAssign",3267],[8,"SubAssign",3267],[8,"Mul",3267],[8,"Default",3268],[8,"Clone",3269],[15,"tuple"],[8,"Eq",3270],[8,"Fn",3265],[3,"ExactCover",11],[8,"Ord",3270],[15,"f64"],[3,"RangeInclusive",3264],[3,"Permutations",11],[3,"Global",3271],[3,"BTreeMap",3272],[8,"Iterator",3273],[8,"ElasticSlice",2254],[8,"ExpandFront",2254],[8,"ExpandBack",2254],[8,"ShrinkFront",2254],[8,"ShrinkBack",2254],[8,"SliceHash",2254],[15,"u64"],[4,"Option",3274],[3,"Forward",11],[3,"Backward",11],[15,"bool"],[8,"StatefulPred",2254],[3,"Rle",161],[3,"RleBy",161],[3,"RleByKey",161],[4,"Result",3275],[3,"TypeId",3276],[3,"Larsch",11],[8,"Add",3267],[8,"PartialEq",3270],[3,"VecActSegtree",218],[8,"MonoidAction",2254],[8,"RangeBounds",3264],[3,"BitSet",218],[3,"BicrementalMedian",218],[3,"BicrementalMedianDev",218],[8,"CommutativeGroup",2254],[3,"BTreeBimap",218],[3,"BTreeMultiset",218],[3,"CuckooHashMap",218],[3,"CuckooHashSet",218],[3,"FoldableDeque",218],[8,"Monoid",2254],[3,"FoldableQueue",218],[3,"IncrementalLineSet",218],[3,"IntervalMap",218],[3,"IntervalSet",218],[3,"PotentializedUnionFind",218],[3,"RemovableHeap",218],[3,"RsDict",218],[3,"UnionFind",218],[3,"VecSegtree",218],[4,"Ordering",3270],[3,"WaveletMatrix",218],[8,"WmInt",1019],[3,"Count3wayResult",2478],[3,"SkewHeap",218],[8,"IntoIterator",3277],[8,"Hash",3278],[3,"Formatter",3279],[6,"Result",3279],[8,"Debug",3279],[3,"BinaryTrie",218],[8,"ChtInt",887],[3,"DisjointSparseTable",218],[3,"RangeFull",3264],[3,"N1Rmq",218],[3,"Bits",657],[3,"Iter",657],[8,"BinaryInt",657],[8,"DoubleEndedIterator",3280],[15,"u32"],[3,"Indices",703],[3,"Words",703],[3,"Range",3272],[8,"Borrow",3281],[3,"Iter",826],[3,"DecrementalUsizeSet",218],[15,"i8"],[3,"Interval",897],[4,"Bound",3264],[3,"PeekMut",957],[15,"i64"],[15,"isize"],[15,"u8"],[15,"u16"],[15,"i128"],[15,"i32"],[15,"i16"],[15,"u128"],[3,"IntoIter",957],[3,"FunctionalGraph",1030],[3,"Hld",1030],[4,"HlEdge",1030],[4,"Direction",1030],[8,"Copy",3282],[3,"TreeCata",1030],[3,"StaticModInt",1137],[8,"Modulus",1137],[3,"DynamicModInt",1137],[8,"DynamicModIntId",2048],[3,"Polynomial",1137],[8,"NttFriendly",1137],[3,"Barrett",2048],[3,"ButterflyCache",1137],[3,"OnceLock",3283],[3,"Mod998244353",1137],[3,"ConstDiv2",1137],[3,"ConstDiv",1137],[4,"DefaultId",1137],[3,"Mod1000000007",1137],[3,"HarmonicFloorSum",1137],[3,"SieveN2Plus1",1137],[3,"SieveN2PlusNPlus1",1137],[3,"SlopeFunction",1137],[3,"DigitsIter",1810],[4,"ApproxFrac",1137],[8,"Display",3279],[3,"SegmentedFactorSieve",1137],[3,"FracApproxIter",1137],[8,"SbInt",1962],[8,"RemEuclidU32",2048],[15,"array"],[8,"Hasher",3278],[3,"String",3284],[3,"CommonQuotStruct",1740],[3,"CompactSieve",1137],[3,"DivisorsStruct",1846],[3,"FactorsStruct",1890],[3,"FactorsDupStruct",1926],[3,"Interpolation",1137],[3,"LinearSieve",1137],[3,"ModFactorialBinom",1137],[8,"Into",3285],[8,"SlopeTrickInt",2132],[3,"TwoSat",1137],[3,"KmpSearcher",2155],[3,"SuffixArray",2155],[3,"ZSearcher",2155],[15,"char"],[3,"Occurrences",2210],[15,"str"],[3,"Occurrences",2235],[3,"OpAddOnOpAddCount",2607],[8,"AddAssoc",2254],[8,"Zero",2254],[8,"Sized",3282],[3,"OpAddOnOpMax",2607],[8,"Min",2254],[3,"OpAddOnOpMin",2607],[8,"Max",2254],[3,"OpAffineOnOpAddCount",2607],[8,"One",2254],[3,"OpClosureOnOpClosure",2607],[3,"PdepPextMaskU8",2607],[3,"PdepPextMaskU16",2607],[3,"PdepPextMaskU32",2607],[3,"PdepPextMaskU64",2607],[3,"PdepPextMaskU128",2607],[4,"OpAdd",2607],[4,"OpAddCount",2607],[4,"OpAffine",2607],[3,"OpClosure",2607],[4,"OpGcd",2607],[4,"OpMax",2607],[4,"OpMin",2607],[4,"OpMul",2607],[4,"OpRollHash",2607],[3,"VecMarker",2607],[3,"SpaceSep",2607],[3,"PerLine",2607],[3,"StrSep",2607],[3,"Scanner",2607],[8,"Gcd",1137],[3,"VecOptionsMarker",3139],[8,"Neg",3267],[8,"MulRecip",2254],[3,"AsciiString",3139],[3,"AsciiStringOfCharset",3139],[3,"Ascii",3139],[3,"AsciiGen",3139],[3,"AsciiStringOfDistribution",3139],[3,"Permutation",3139],[3,"ScanTupleError",3238],[3,"Error",3286],[8,"Scan",3238],[8,"Sub",3267],[8,"From",3285],[8,"Inversion",11],[8,"Rle",11],[8,"RleBy",11],[8,"RleByKey",11],[8,"CrtMod",1137],[8,"CrtWrapping",1137],[8,"CommonQuot",1137],[8,"Divisors",1137],[8,"Factors",1137],[8,"FactorsDup",1137],[8,"CarmichaelLambda",1137],[8,"ModIntBase",1137],[8,"DigitSum",1137],[8,"Digits",1137],[8,"DLog",1137],[8,"EquivMod",1137],[8,"EquivModIter",1137],[8,"EulerPhi",1137],[8,"FracApprox",1137],[8,"FractionBisect",1137],[8,"GcdRecip",1137],[8,"IsCloseFloat",1137],[8,"MillerRabin",1137],[8,"Lcm",1137],[8,"LinearFloorSum",1137],[8,"ModAckermann",1137],[8,"ModOrd",1137],[8,"ModPow",1137],[8,"ModTetration",1137],[8,"Sqrt",1137],[8,"SbInt",1982],[8,"Act",2254],[8,"Ring",2254],[8,"Bisect",2254],[8,"Push",2254],[8,"PushFront",2254],[8,"PushBack",2254],[8,"SetValue",2254],[8,"PotentialFunction",2254],[8,"Fold",2254],[8,"GetMut",2254],[8,"Pop",2254],[8,"PopFront",2254],[8,"PopBack",2254],[8,"Quantile",2254],[8,"Magma",2254],[8,"Count",2254],[8,"DisjointSet",2254],[8,"Count3way",2254],[8,"FindNth",2254],[8,"FoldBisect",2254],[8,"FoldBisectRev",2254],[8,"GroupBy",2254],[8,"Identity",2254],[8,"PartialRecip",2254],[8,"Recip",2254],[8,"Field",2254],[8,"UsizeGroupBy",2254],[8,"RandomGenerator",2607],[8,"MakeMax",2607],[8,"MakeMin",2607],[8,"Pdep",2607],[8,"Pext",2607],[8,"GenOptions",3139],[8,"SeedableRngInspect",3139]]},\
"nekolib_notes":{"doc":"<code>nekolib</code> …","t":"AA","n":["debug","range_add_on_the_fly"],"q":[[0,"nekolib_notes"]],"d":["デバッグ用ツールたち。","区間加算 (imos 法 + on-the-fly で遅延解消)。"],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
