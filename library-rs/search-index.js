var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","tn":["algo","ds","e","graph","impl_assoc_val","impl_mod_int","math","seq","traits","utils","ExactCover","bisect","bisect_","bisect_slice","borrow","borrow_mut","convolve","cycle_mu_lambda","cycle_nth","default","exact_cover","extremum","extremum","extremum_float","extremum_float","extremum_slice","from","hilbert_mo","hilbert_mo_","index_order","index_order_by","index_order_by_key","into","karatsuba","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next_permutation","ordered_hash","ordered_hash_","parallel_bisect","parallel_bisect","permutation","tortoise_hare","try_from","try_into","type_id","window_bisect","window_bisect","bisect","bisect_slice","ExactCover","all","any","from_matrix","extremum","extremum_slice","extremum_float","hilbert_mo","index_order_by","index_order_by_key","convolve","majority","minmax","minmax_by","minmax_by_key","mo","ordered_hash","parallel_bisect","next_permutation","cycle_mu_lambda","cycle_nth","window_bisect","BTreeMultiset","BicrementalMedian","BicrementalMedianDev","BitSet","CuckooHashMap","CuckooHashSet","DecrementalUsizeSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IntervalMap","IntervalSet","N1Rmq","PotentializedUnionFind","RemovableHeap","RsDict","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","bit_set","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_multiset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","count","count","count","count_3way","count_3way","cuckoo_hash_map","cuckoo_hash_set","decremental_usize_set","default","default","default","default","diff","disjoint_sparse_table","eq","eq","eq","eq","eq","extend","extend","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","get_mut","get_mut","index","index","index","interval_map","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","len","len","n1_rmq","ne","ne","ne","ne","ne","new","new","partial_cmp","pop","pop_back","pop_front","pop_front","potentialized_union_find","push","push_back","push_back","push_front","quantile","relate","removable_heap","repr","rs_dict","set_value","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","with","BitSet","Iter","borrow","borrow_mut","contains","from","group_by","insert","into","into_iter","iter","new","new","next","remove","try_from","try_into","type_id","usize_group_by","BTreeMultiset","Iter","borrow","borrow_mut","count","from","group_by","insert","insert_n","into","into_iter","is_empty","iter","len","max","min","new","new","next","remove","remove_n","try_from","try_into","type_id","usize_group_by","CuckooHashMap","contains_key","insert","is_empty","len","new","remove","CuckooHashSet","contains","insert","is_empty","len","new","remove","DecrementalUsizeSet","contains","greater","greater_equal","is_empty","len","less","less_equal","new","remove","universe_len","DisjointSparseTable","FoldableDeque","new","with","FoldableQueue","new","with","Interval","IntervalMap","borrow","borrow_mut","clone","clone_into","cmp","connection","eq","fmt","from","from_bounds","inf","insert","intersection","intersection_minus","intersects","into","is_connected_with","is_empty","is_empty","is_subset_of","is_superset_of","iter","ne","new","partial_cmp","remove","sup","superset_of","to_owned","try_from","try_into","type_id","IntervalSet","clear","covering","has_range","insert","is_empty","iter","mex","new","remove","N1Rmq","min","PotentializedUnionFind","with_len","RemovableHeap","is_empty","len","new","peek","pop","push","remove","RsDict","rank","select","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","WmInt","bitlen","is_empty","len","rank","select","set","test","xored_quantile","zero","FunctionalGraph","Tree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dijkstra","dijkstra_","dinic","dinic_","eq","fmt","from","from","from","from","functional_graph","into","into","ne","scc","scc_","to_owned","tree","try_from","try_from","try_into","try_into","type_id","type_id","dijkstra","dinic","FunctionalGraph","mu_lambda","scc","Tree","cata","CarmichaelLambda","CommonQuot","CompactSieve","ConstDiv","ConstDiv2","DLog","DigitSum","Divisors","EquivMod","EquivModIter","EulerPhi","Factors","FactorsDup","Gcd","GcdRecip","HarmonicFloorSum","IncrementalLineSet","Interpolation","Lcm","LinearFloorSum","LinearSieve","ModAckermann","ModFactorialBinom","ModInt","ModOrd","ModPow","ModTetration","Output","Output","Output","Output","SieveN2Plus1","SieveN2PlusNPlus1","SlopeFunction","Sqrt","TwoSat","add","add_assign","bit_binom","bit_binom_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","carmichael_lambda","carmichael_lambda","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_quot","common_quot","compact_sieve","const_div","continued_fraction","continued_fraction_","count_prime","default","default","digit_pow_sum","digit_sum","digit_sum","div","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","equiv_mod","equiv_mod","equiv_mod","euler_phi","euler_phi","factors","factors","factors_dup","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gcd","gcd","gcd_recip","gcd_recip","harmonic_floor_sum","incremental_line_set","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","mod_ackermann","mod_ackermann","mod_factorial_binom","mod_ord","mod_ord","mod_pow","mod_pow","mod_recip_table_","mod_recip_table_prime","mod_tetration","mod_tetration","modint","mul","mul_assign","mul_recip","ne","ne","ne","neg","one","prime_pi","sieve_n2_plus_1","sieve_n2_plus_n_plus_1","slope_function","sqrt","sqrt","sqrt_fraction","sqrt_fraction_","sqrt_fraction_fn","stern_brocot","stern_brocot_","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","bit_binom","CarmichaelLambda","carmichael_lambda","CommonQuot","CommonQuotStruct","Output","borrow","borrow_mut","common_quot","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","continued_fraction","prime_pi","DigitSum","digit_pow_sum","digit_sum","Divisors","DivisorsStruct","Output","borrow","borrow_mut","divisors","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","DLog","dlog","EquivMod","EquivModIter","equiv_mod","equiv_mod","EulerPhi","euler_phi","Factors","FactorsStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","FactorsDup","FactorsDupStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors_dup","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","IncrementalLineSet","add_line","min_at_point","new","Interpolation","interpolate","with","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","divisors_sum","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","recips","ModAckermann","mod_ackermann","ModFactorialBinom","binom","factorial","factorial_recip","new","perm","recip","ModOrd","mod_ord","ModPow","mod_pow","mod_recip_table_prime","ModTetration","mod_tetration","ModInt","get","SieveN2Plus1","factors","factors_dup","is_prime","new","primes","SieveN2PlusNPlus1","factors","factors_dup","is_prime","new","primes","SlopeFunction","add_abs","add_const","add_left","add_right","argmin","min","min_left","min_right","new","shift","window","Sqrt","sqrt","sqrt_fraction","sqrt_fraction_fn","stern_brocot","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","index","into","into","into","kmp","ne","ne","ne","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","try_from","try_into","type_id","usize_group_by","SuffixArray","into_inner","lcpa","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","try_from","try_into","type_id","usize_group_by","z","Act","Action","AddAssoc","AddComm","Additive","AssocVal","Associative","Bisect","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","GroupBy","Hashed","Identity","Input","Input","Input","Input","Input","Input","Item","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","PotentialFunction","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","UsizeGroupBy","Zero","act","act","act","action","add","additive","additive","assoc_val","binop","bisect","bisect","count","count","count","count","count_3way","diff","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get","get_mut","get_mut","group_by","group_by","hash","id","is_empty","is_empty","is_empty","len","len","len","max","max","min","min","mul","mul_recip","multiplicative","multiplicative","neg","new","new","next","one","one","op","operand","operator","partial_recip","partition","pop","pop_back","pop_front","potential_function","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","relate","repr","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","usize_group_by","usize_group_by","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","operand","operator","AddAssoc","AddComm","Zero","zero","AssocVal","get","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","additive","id","mul","multiplicative","neg","one","op","partial_recip","recip","recip","zero","Bisect","Input","Output","bisect","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","fmt","from","ge","gt","into","le","lt","ne","ne","new","to_owned","try_from","try_into","type_id","DisjointSet","count","equiv","is_empty","len","new","partition","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","GroupBy","group_by","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","Item","PotentialFunction","diff","is_empty","len","new","relate","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","UsizeGroupBy","usize_group_by","OpAdd","OpAddCount","OpAddCountV","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAddV","OpAffine","OpAffineOnOpAddCount","OpAffineV","OpClosure","OpClosureOnOpClosure","OpMax","OpMaxV","OpMin","OpMinV","OpMul","OpMulV","OpRollHash","OpRollHashV","Scanner","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","act","act","act","act","act","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","check_bounds","check_bounds_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","e_macro","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","id","id","id","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","op","op","op","op","op","op","op","op","op_add","op_add_count","op_add_on_op_add_count","op_add_on_op_max","op_add_on_op_min","op_affine","op_affine_on_op_add_count","op_closure","op_closure_on_op_closure","op_max","op_min","op_mul","op_roll_hash","operand","operand","operand","operand","operand","operator","operator","operator","operator","operator","partial_recip","partial_recip","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","bounds_within","check_bounds","check_bounds_range","OpAdd","OpAddV","_Marker","0","OpAddCount","OpAddCountV","_Marker","0","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAffine","OpAffineV","_Marker","0","OpAffineOnOpAddCount","OpClosure","new","OpClosureOnOpClosure","new","OpMax","OpMaxV","_Marker","0","OpMin","OpMinV","_Marker","0","OpMul","OpMulV","_Marker","0","OpRollHash","OpRollHashV","value_of","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","scan","to_string","try_from","try_into","type_id"],"q":["nekolib","","","","","","","","","","nekolib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::algo::bisect_","","nekolib::algo::exact_cover","","","","nekolib::algo::extremum","","nekolib::algo::extremum_float","nekolib::algo::hilbert_mo_","nekolib::algo::index_order","","nekolib::algo::karatsuba","nekolib::algo::majority_","nekolib::algo::minmax","","","nekolib::algo::mo","nekolib::algo::ordered_hash_","nekolib::algo::parallel_bisect","nekolib::algo::permutation","nekolib::algo::tortoise_hare","","nekolib::algo::window_bisect","nekolib::dsnekolib::ds::bicremental_median","","","","","nekolib::ds::bicremental_median_dev","","","","","","","nekolib::ds::bit_set","","","","","","","","","","","","","","","","","","","nekolib::ds::btree_multiset","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::cuckoo_hash_map","","","","","","","nekolib::ds::cuckoo_hash_set","","","","","","","nekolib::ds::decremental_usize_set","","","","","","","","","","","nekolib::ds::disjoint_sparse_table","nekolib::ds::foldable_deque","","","nekolib::ds::foldable_queue","","","nekolib::ds::interval_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::interval_set","","","","","","","","","","nekolib::ds::n1_rmq","","nekolib::ds::potentialized_union_find","","nekolib::ds::removable_heap","","","","","","","","nekolib::ds::rs_dict","","","nekolib::ds::union_find","nekolib::ds::vec_act_segtree","","","","nekolib::ds::vec_segtree","","","","nekolib::ds::wavelet_matrix","","","","","","","","","","","nekolib::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::graph::dijkstra_","nekolib::graph::dinic_","nekolib::graph::functional_graph","","nekolib::graph::scc_","nekolib::graph::tree","","nekolib::mathnekolib::math::bit_binom_","nekolib::math::carmichael_lambda","","nekolib::math::common_quot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::compact_sieve","","","","nekolib::math::const_div","","","","","","","","nekolib::math::continued_fraction_","nekolib::math::count_prime","nekolib::math::digit_sum","","","nekolib::math::divisors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::dlog","","nekolib::math::equiv_mod","","","","nekolib::math::euler_phi","","nekolib::math::factors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::factors_dup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::gcd","","nekolib::math::gcd_recip","","nekolib::math::harmonic_floor_sum","","","","nekolib::math::incremental_line_set","","","","nekolib::math::interpolation","","","nekolib::math::lcm","","nekolib::math::linear_floor_sum","","nekolib::math::linear_sieve","","","","","","","","","","","","","nekolib::math::mod_ackermann","","nekolib::math::mod_factorial_binom","","","","","","","nekolib::math::mod_ord","","nekolib::math::mod_pow","","nekolib::math::mod_recip_table_","nekolib::math::mod_tetration","","nekolib::math::modint","","nekolib::math::sieve_n2_plus_1","","","","","","nekolib::math::sieve_n2_plus_n_plus_1","","","","","","nekolib::math::slope_function","","","","","","","","","","","","nekolib::math::sqrt","","nekolib::math::sqrt_fraction_","","nekolib::math::stern_brocot_","nekolib::math::two_sat","","","","nekolib::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::seq::kmp","","","","","","","","","","","","","","nekolib::seq::suffix_array","","","","","nekolib::seq::z_algo","","","","","","","","","","","","","","","nekolib::traitsnekolib::traits::act","","","nekolib::traits::action","","","","","","nekolib::traits::additive","","","","nekolib::traits::assoc_val","","nekolib::traits::binop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::bisect","","","","nekolib::traits::count","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::disjoint_set","","","","","","","","","","nekolib::traits::elastic_slice","","","","","","","","","","","","","","","","","","","nekolib::traits::find_nth","","nekolib::traits::fold","","","nekolib::traits::fold_bisect","","","","nekolib::traits::get_mut","","","nekolib::traits::group_by","","nekolib::traits::max","","nekolib::traits::min","","nekolib::traits::multiplicative","","","","","","","nekolib::traits::potential_function","","","","","","","nekolib::traits::push_pop","","","","","","","","","","","","","","","","","","nekolib::traits::quantile","","","nekolib::traits::range_bounds","","","","","","","nekolib::traits::set_value","","","nekolib::traits::stateful_predicate","","","","","","nekolib::traits::usize_group_by","","nekolib::utilsnekolib::utils::OpAdd","nekolib::utils::OpAddCount","nekolib::utils::OpAffine","nekolib::utils::OpMax","nekolib::utils::OpMin","nekolib::utils::OpMul","nekolib::utils::buf_range","","","nekolib::utils::op_add","","","nekolib::utils::op_add::OpAdd","nekolib::utils::op_add_count","","","nekolib::utils::op_add_count::OpAddCount","nekolib::utils::op_add_on_op_add_count","nekolib::utils::op_add_on_op_max","nekolib::utils::op_add_on_op_min","nekolib::utils::op_affine","","","nekolib::utils::op_affine::OpAffine","nekolib::utils::op_affine_on_op_add_count","nekolib::utils::op_closure","","nekolib::utils::op_closure_on_op_closure","","nekolib::utils::op_max","","","nekolib::utils::op_max::OpMax","nekolib::utils::op_min","","","nekolib::utils::op_min::OpMin","nekolib::utils::op_mul","","","nekolib::utils::op_mul::OpMul","nekolib::utils::op_roll_hash","","","nekolib::utils::scanner","","","","","","","","","","","","","","","","","","","","","","",""],"d":["アルゴリズムたち。","データ構造たち。","デバッグ用マクロ。","グラフに関するものたち。","","","数学関連のアルゴリズムたち。","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","Exact cover。","二分探索で境界を探す。","二分探索。","二分探索で境界を探す。","","","Karatsuba 法。Карацуба 法？","周期検出を行う。","$n$ 項目を求める。","","Exact cover。","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Returns the argument unchanged.","Hilbert curve に基づく Mo’s algorithm。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","添字の順序。","Calls <code>U::from(self)</code>.","Karatsuba 法。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","辞書順で次の順列の生成。","座標圧縮。","座標圧縮。","並列二分探索。","並列二分探索を行う。","順列。","周期検出。","","","","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","Exact cover。","解を全て探す。","…","与えられた行列に対して前計算を行う。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","Karatsuba 法。Карацуба 法？","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","座標圧縮。","並列二分探索を行う。","辞書順で次の順列の生成。","周期検出を行う。","$n$ 項目を求める。","尺取り法で、各始端に対して境界を探す。","多重集合。","中央値の管理。","中央値と偏差の管理。","bit set。","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","区間から値への対応づけ。","区間の集合。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","ポテンシャルつき union-find。","削除可能ヒープ。","rank/select 辞書。","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","多重集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","区間から値への対応づけ。","区間の集合。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","線形 RMQ。","","","","","","","","","","","","","ポテンシャルつき union-find。","","","","","","","削除可能ヒープ。","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","","bit set。","","","","$i$ を含むとき真を返す。","Returns the argument unchanged.","","$i$ を追加する。","Calls <code>U::from(self)</code>.","","","","初期化。","","$i$ を削除する。","","","","","多重集合。","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","","","","","","","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","","","","","","","<code>usize</code> の decremental set。","$i\\\\in S$ を返す。","$\\\\min_{j\\\\gt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\min_{j\\\\ge i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S=\\\\emptyset$ を返す。","$|S|$ を返す。","$\\\\max_{j\\\\lt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\max_{j\\\\le i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S\\\\gets\\\\{0, 1, \\\\dots, u-1\\\\}$ で初期化。","$S\\\\gets S\\\\setminus\\\\{i\\\\}$ で更新する。","$u$ を返す。","disjoint sparse table。","fold 可能両端キュー。","","","fold 可能キュー。","","","","区間から値への対応づけ。","","","","","","","","","Returns the argument unchanged.","","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{\\\\cup} (k…","","","","Calls <code>U::from(self)</code>.","","","$S=\\\\emptyset$ を返す。","","","","","$S\\\\gets\\\\emptyset$ で初期化する。","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{…","","$T\\\\subseteq S$ かつ <code>b</code> を含む $T$ …","","","","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","","ポテンシャルつき union-find。","","削除可能ヒープ。","空のとき <code>true</code> を返す。","要素数を返す。","空のヒープで初期化する。","最大値を取得する。","最大値を取り出す。","要素を追加する。","要素を削除する。","rank/select 辞書。","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","","","","","","","","function graph。","木。","","","","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","","","Returns the argument unchanged.","","","Returns the argument unchanged.","functional graph。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","lowlink に基づく強連結成分分解。","強連結成分分解。","","木。","","","","","","","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","function graph。","$(\\\\mu_i, \\\\lambda_i)$ を返す。","lowlink に基づく強連結成分分解。","木。","全方位木 DP。","Carmichael の $\\\\lambda$ 関数。","商が共通の区間の列挙。","篩。","定数除算。","定数除算。","離散対数。","桁和。","約数列挙。","Chinese remaindering。","Chinese remaindering。","Euler の $\\\\varphi$ 関数。","素因数分解。","素因数分解。","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","直線の集合。","Lagrange 補間。","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","Ackermann 関数。","法 $p$ での二項係数。","","位数。","冪乗。","tetration。","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","2-SAT。","","","組合せのビット表現。","組合せのビット表現。","","","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","","","商が共通の区間の列挙。","","篩。","定数除算。","連分数展開。","連分数展開。","素数の数え上げ。","","","","桁和。","","","","約数列挙。","","離散対数。","","","","","Chinese remaindering","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","素因数分解。","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","直線の集合。","Lagrange 補間。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","Ackermann 関数。","","法 $p$ での二項係数。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","素数 $m$ を法とした逆元のテーブル。","tetration。","","法 $m$ での演算をする。","","","","","","","","","素数の数え上げ。","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","平方根の連分数展開。","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","Stern–Brocot tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","","","組合せのビット表現。","Carmichael の $\\\\lambda$ 関数。","","商が共通の区間の列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","篩。","","","","定数除算。","定数除算。","","","","","","","連分数展開。","素数の数え上げ。","桁和。","","","約数列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","離散対数。","","Chinese remaindering。","Chinese remaindering。","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","直線の集合。","$S \\\\xleftarrow{\\\\cup} ax+b$ で更新する。","$\\\\min_{f(x)\\\\in S} f(x_0)$ を返す。","$S = \\\\emptyset$ で初期化する。","Lagrange 補間。","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$n$ の約数の総和を返す。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","法 $m$ での逆元を返す。","Ackermann 関数。","","法 $p$ での二項係数。","$i!/(j!\\\\cdot (i-j)!) \\\\bmod p$ を返す。","$i! \\\\bmod p$ を返す。","$i!^{-1} \\\\bmod p$ を返す。","$(0!, 1!, \\\\dots, n!)$ と $(0!^{-1}, 1!^{-1}, \\\\dots, …","$i!/(i-j)! \\\\bmod p$ を返す。","$i^{-1} \\\\bmod p$ を返す。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","$n^2+1$ の形の素数を返す。","$n^2+n+1$ 型素数の篩。","$n^2+n+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+n+1$ が素数のとき真を返す。","初期化する。","$n^2+n+1$ の形の素数を返す。","区分線形凸関数。","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","平方根。","","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KMP 法。","","","","","","接尾辞配列。","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","接尾辞配列。","自身を消費し、内部表現を返す。","高さ配列を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","値を返す関数を持つ。","結合法則を満たす。","二分探索。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","イテレータのグルーピング。","","単位元を持つ。","","","","","代入される型。","","要素の型。","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","ポテンシャル関数。","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","イテレータのグルーピング。","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","","型に紐づく値。","代数的構造に関するトレイトたちです。","二分探索。","","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","ポテンシャルの差を求める。","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","","イテレータのグルーピング。","Examples","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合の要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","分割を返す。","","","","ポテンシャル関数。","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","ポテンシャルの差を定義する。","$u$ を含む集合の代表元を返す。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","イテレータのグルーピング。","Examples","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","","","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","値を返す関数を持つ。","","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","","単位元を返す。","積 $x \\\\ast y$ を返す。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","加法 $\\\\circ$ の単位元 $0$ を返す。","二分探索。","","","","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","分割を返す。","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","要素の型。","ポテンシャル関数。","ポテンシャルの差を求める。","集合が空であれば <code>true</code> を返す。","集合の要素数 $n$ を返す。","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","ポテンシャルの差を定義する。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","イテレータのグルーピング。","Examples","和を返す演算を持つ。","","","","","","","","","","任意の結合的な演算を持つ。","","最大値を返す演算を持つ。","","最小値を返す演算を持つ。","","積を返す演算を持つ。","","…","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","境界チェックを行う。","境界チェックを行う。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","加法に関する wrapper クラス。","加法に関する wrapper クラス。","","","","加法に関する wrapper クラス。","","クロージャの wrapper クラス。","","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","","","","","","","","","","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","境界チェックを行う。","境界チェックを行う。","和を返す演算を持つ。","","","","","","","","","","","","","","","","任意の結合的な演算を持つ。","","","","最大値を返す演算を持つ。","","","","最小値を返す演算を持つ。","","","","積を返す演算を持つ。","","","","…","","","","","","スキャナ。","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,21,0,7,8,9,10,11,12,15,16,17,18,19,20,2,21,7,8,9,10,11,12,15,16,17,18,19,20,2,21,10,6,6,19,20,6,6,0,0,0,13,14,2,21,17,0,7,8,9,10,16,9,11,12,6,19,7,8,10,11,12,13,14,15,16,19,2,21,4,13,14,2,21,2,21,2,21,0,0,3,4,4,4,5,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,19,19,20,2,2,2,21,21,21,11,12,2,21,4,6,21,0,0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,21,15,17,20,0,7,8,9,10,16,17,20,10,14,13,13,14,0,14,13,14,13,6,17,0,20,0,21,7,8,9,10,11,12,15,16,17,18,19,20,2,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,21,0,20,0,0,0,0,7,7,7,7,0,8,8,8,8,8,8,0,0,22,22,9,22,22,9,22,22,9,22,9,22,9,22,22,22,22,0,0,23,23,10,23,23,10,10,23,23,10,10,10,10,10,23,10,23,10,10,23,23,23,23,0,11,11,11,11,11,11,0,12,12,12,12,12,12,0,3,3,3,3,3,3,3,3,3,3,0,0,13,13,0,14,14,0,0,24,24,24,24,24,24,24,24,24,24,24,15,24,24,24,24,24,24,15,24,24,15,24,15,24,15,24,15,24,24,24,24,0,16,16,16,16,16,16,16,16,16,0,5,0,17,0,18,18,18,18,18,18,18,0,19,19,0,0,2,2,2,0,21,21,21,0,0,25,6,6,6,6,25,25,6,25,0,0,26,27,26,27,27,27,0,0,0,0,27,27,26,26,27,27,0,26,27,27,0,0,27,0,26,27,26,27,26,27,0,0,0,27,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,29,30,31,0,0,0,0,0,32,32,0,0,33,34,35,36,37,32,38,39,40,41,42,43,44,33,34,35,36,37,32,38,39,40,41,42,43,44,0,45,32,38,39,40,41,42,43,44,32,38,39,40,41,42,43,44,0,28,0,0,0,0,0,41,44,46,0,46,32,32,0,29,0,47,32,38,39,0,48,49,0,50,0,30,0,31,32,32,38,39,40,41,42,43,44,33,34,35,36,37,32,32,32,32,32,32,32,32,32,38,39,40,41,42,43,44,0,51,0,52,0,0,0,33,34,35,36,37,32,38,39,40,41,42,43,44,0,53,0,54,0,0,55,0,0,56,0,57,0,0,0,58,0,32,32,32,32,38,39,32,32,0,0,0,0,0,59,0,0,0,0,0,32,32,32,38,39,40,41,42,43,44,32,33,34,35,36,37,32,38,39,40,41,42,43,44,33,34,35,36,37,32,38,39,40,41,42,43,44,0,33,34,35,36,37,32,38,39,40,41,42,43,44,32,0,0,45,0,0,28,60,60,28,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,33,33,33,0,0,38,39,38,39,38,39,0,0,0,46,46,0,0,29,61,61,29,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,47,0,0,48,49,0,50,0,0,30,62,62,62,62,62,62,62,62,62,62,62,62,62,62,30,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,31,63,63,63,63,63,63,63,63,63,63,63,63,63,63,31,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,51,0,52,0,40,40,40,0,41,41,41,0,34,34,0,53,0,54,0,35,35,35,35,35,35,35,35,35,35,35,35,0,55,0,36,36,36,36,36,36,0,56,0,57,0,0,58,0,32,0,42,42,42,42,42,0,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,0,59,0,0,0,0,37,37,37,0,0,0,64,65,66,64,65,66,64,65,66,64,65,66,64,65,66,64,65,66,64,64,65,65,65,66,66,65,64,65,66,0,64,65,66,64,64,0,64,65,66,64,65,66,64,65,66,64,65,66,0,0,0,67,67,67,67,67,67,67,64,67,67,67,67,0,65,65,65,65,0,0,68,68,68,68,68,68,68,66,68,68,68,68,66,0,69,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,72,73,74,75,76,77,78,0,0,0,0,0,0,0,0,70,0,79,79,72,80,81,82,83,84,85,86,0,0,0,0,0,0,0,0,0,0,0,71,0,87,70,0,0,0,0,0,0,0,0,0,0,0,69,79,0,70,0,70,0,0,0,72,0,88,89,77,90,78,0,0,91,89,92,93,0,94,0,80,0,95,96,91,97,0,81,0,98,71,99,89,91,78,89,78,91,0,100,0,101,70,82,0,70,70,89,78,77,102,70,87,79,79,103,89,83,85,84,0,77,73,75,74,0,0,86,0,104,105,78,89,91,77,0,76,106,107,91,0,89,89,0,108,109,70,0,69,69,0,79,79,79,79,79,0,0,0,109,0,97,70,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,87,70,70,70,99,70,70,70,70,87,103,104,105,70,0,72,72,72,0,0,0,110,110,110,110,88,90,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,89,89,89,89,89,89,89,89,89,0,0,0,71,71,0,0,0,91,92,93,91,71,91,91,91,106,107,91,0,94,0,80,80,0,0,95,96,0,81,81,0,98,0,100,0,101,0,0,0,0,82,82,102,78,0,78,78,78,78,78,73,74,75,83,84,85,0,0,0,0,0,0,83,85,84,73,75,74,86,0,86,0,0,0,0,0,0,0,76,0,76,77,0,77,77,77,77,0,108,0,0,111,0,0,0,112,0,0,113,0,0,0,114,0,115,0,116,0,117,0,112,111,113,114,115,116,118,119,120,121,122,123,112,111,118,119,120,113,121,124,122,114,115,116,117,123,112,111,118,119,120,113,121,124,122,114,115,116,117,0,0,0,0,112,111,118,119,120,113,121,124,122,114,115,116,117,112,111,118,119,120,113,121,124,122,114,115,116,117,112,111,118,119,120,113,121,124,122,114,115,116,117,0,112,111,113,114,115,116,117,112,111,118,119,120,113,121,124,122,114,115,116,117,123,123,112,111,118,119,120,113,121,124,122,114,115,116,117,112,111,113,124,114,115,116,117,123,112,111,118,119,120,113,121,124,122,114,115,116,117,112,111,113,114,115,116,112,111,113,124,114,115,116,117,0,0,0,0,0,0,0,0,0,0,0,0,0,118,119,120,121,122,118,119,120,121,122,112,116,112,0,112,111,118,119,120,113,121,124,122,114,115,116,117,123,112,111,118,119,120,113,121,124,122,114,115,116,117,123,112,111,118,119,120,113,121,124,122,114,115,116,117,123,112,111,118,119,120,113,121,124,122,114,115,116,117,125,126,127,128,129,130,0,0,0,0,112,112,125,0,111,111,126,0,0,0,0,113,113,127,0,0,124,0,122,0,114,114,128,0,115,115,129,0,116,116,130,0,117,117,131,0,0,0,132,132,132,132,132,132,123,123,123,123,123,132,123,123,123,131,132,132,132,132],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["range",3,[["usize",0]]]],["usize",0]],null,[[],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3]],[[]],[[["usize",0]]],[[],["exactcover",3]],null,null,[[["range",3,[["usize",0]]]]],null,[[["rangeinclusive",3,[["f64",0]]],["f64",0]]],[[]],[[]],[[["vec",3]]],null,null,[[],["vec",3,[["usize",0]]]],[[],["vec",3,[["usize",0]]]],[[]],null,[[],["option",4]],null,null,[[],["option",4]],[[["fnmut",8]],["option",4]],[[],["option",4]],null,[[["vec",3],["option",4,[["usize",0]]]],["vec",3]],[[],["bool",0]],[[],["btreemap",3,[["usize",0]]]],null,null,[[["statefulpred",8],["vec",3]],["vec",3,[["usize",0]]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[],["vec",3,[["usize",0]]]],[[["range",3,[["usize",0]]]],["usize",0]],[[],["usize",0]],null,[[],["vec",3,[["vec",3,[["usize",0]]]]]],[[],["option",4,[["vec",3,[["usize",0]]]]]],[[["vec",3]]],[[["range",3,[["usize",0]]]]],[[]],[[["rangeinclusive",3,[["f64",0]]],["f64",0]]],[[["vec",3]]],[[],["vec",3,[["usize",0]]]],[[],["vec",3,[["usize",0]]]],[[],["vec",3]],[[],["option",4]],[[],["option",4]],[[["fnmut",8]],["option",4]],[[],["option",4]],[[["vec",3],["option",4,[["usize",0]]]],["vec",3]],[[],["btreemap",3,[["usize",0]]]],[[["statefulpred",8],["vec",3]],["vec",3,[["usize",0]]]],[[],["bool",0]],[[]],[[["usize",0]]],[[],["vec",3,[["usize",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],null,null,nullnull,[[["",0]],["bicrementalmedian",3]],[[["",0]],["bicrementalmediandev",3]],[[["",0]],["bitset",3]],[[["",0]],["btreemultiset",3]],[[["",0]],["cuckoohashmap",3]],[[["",0]],["cuckoohashset",3]],[[["",0]],["intervalmap",3]],[[["",0]],["intervalset",3]],[[["",0]],["potentializedunionfind",3]],[[["",0]],["removableheap",3]],[[["",0]],["rsdict",3]],[[["",0]],["unionfind",3]],[[["",0]],["vecactsegtree",3]],[[["",0]],["vecsegtree",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["btreemultiset",3]],["ordering",4]],[[["",0],["rangeinclusive",3]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["u64",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["rangeinclusive",3]],["count3wayresult",3]],[[["",0]],["count3wayresult",3]],null,null,null,[[]],[[]],[[],["vecactsegtree",3]],[[]],[[["",0],["usize",0],["usize",0]],["option",4]],null,[[["",0],["bicrementalmedian",3]],["bool",0]],[[["",0],["bicrementalmediandev",3]],["bool",0]],[[["",0],["bitset",3]],["bool",0]],[[["",0],["btreemultiset",3]],["bool",0]],[[["",0],["intervalset",3]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["u64",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]]],[[["",0],["rangefull",3]]],[[["",0],["rangefull",3]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],null,null,[[]],[[]],[[]],[[["vec",3]]],[[]],[[["vec",3]]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["bool",0]]]]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["",0],["usize",0]],["option",4,[["getmutindex",3]]]],[[["",0],["usize",0]],["option",4,[["getmutindex",3]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["",0]],[[["",0],["usize",0]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,[[["",0],["bicrementalmedian",3]],["bool",0]],[[["",0],["bicrementalmediandev",3]],["bool",0]],[[["",0],["bitset",3]],["bool",0]],[[["",0],["btreemultiset",3]],["bool",0]],[[["",0],["intervalset",3]],["bool",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["btreemultiset",3]],["option",4,[["ordering",4]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["option",4]],[[["",0],["usize",0],["usize",0]],["option",4,[["bool",0]]]],null,[[["",0],["usize",0]],["usize",0]],null,[[["",0],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0],["usize",0],["usize",0]],["bool",0]],null,null,null,null,[[["",0]]],[[["",0]],["option",4]],[[]],[[["",0],["",0]],["bool",0]],null,[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[]],[[["",0]],["bool",0]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["bool",0]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[["",0],["usize",0]]],[[]],[[]],[[["",0]],["iter",3]],[[["bitset",3]]],[[]],[[["",0]],["option",4]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["usize",0]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[["",0]]],[[["",0],["usize",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["btreemultiset",3]]],[[]],[[["",0]],["option",4]],[[["",0],["",0]]],[[["",0],["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,[[["",0],["",0]],["bool",0]],[[["",0]],["option",4]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[]],[[["",0],["",0]],["option",4]],null,[[["",0],["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[]],[[["",0],["",0]],["bool",0]],null,[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["usize",0]],null,null,[[]],[[]],null,[[]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["interval",3]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],[[],["option",4,[["interval",3]]]],[[["",0],["interval",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["option",4]],[[["",0],["rangebounds",8]]],[[],["option",4,[["interval",3]]]],[[]],[[["",0],["",0]],["bool",0]],[[]],[[["",0],["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]]],[[["",0],["interval",3]],["bool",0]],[[]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0],["rangebounds",8]],["vec",3]],[[["",0]],["option",4]],[[["",0],["rangebounds",8]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["bool",0]],[[["",0],["rangebounds",8]]],[[["",0]],["bool",0]],[[["",0]]],[[["",0],["",0]],["bound",4]],[[]],[[["",0],["rangebounds",8]]],null,[[["",0],["usize",0],["usize",0]],["",0]],null,[[["usize",0]]],null,[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],null,[[["",0],["usize",0],["u64",0]],["usize",0]],[[["",0],["u64",0],["usize",0]],["option",4,[["usize",0]]]],null,null,[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["usize",0]]],null,[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["usize",0]]],null,null,[[],["usize",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]]],[[["usize",0]],["bool",0]],[[["",0],["usize",0]],["option",4]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["functionalgraph",3]],[[["",0],["",0]]],[[["usize",0]],["vec",3,[["option",4]]]],null,[[["usize",0]]],null,[[["",0],["functionalgraph",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["vec",3,[["vec",3]]]]],[[["vec",3,[["usize",0]]]]],[[]],null,[[]],[[]],[[["",0],["functionalgraph",3]],["bool",0]],[[["usize",0]],["vec",3,[["usize",0]]]],null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0]],["vec",3,[["option",4]]]],[[["usize",0]]],null,[[["",0],["usize",0]]],[[["usize",0]],["vec",3,[["usize",0]]]],null,[[["",0],["",26,[["clone",8],["debug",8]]]],["vec",3,[["",26,[["clone",8],["debug",8]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0]]],[[["usize",0],["usize",0]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[["",0]],["modint",3]],[[["",0]],["constdiv2",3]],[[["",0]],["constdiv",3]],[[["",0]],["harmonicfloorsum",3]],[[["",0]],["incrementallineset",3]],[[["",0]],["sieven2plus1",3]],[[["",0]],["sieven2plusnplus1",3]],[[["",0]],["slopefunction",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],null,null,[[]],null,null,[[],["incrementallineset",3]],[[],["slopefunction",3]],[[["u32",0]]],null,[[]],[[]],[[["",0]]],null,[[]],null,[[],["option",4]],[[["",0],["modint",3]],["bool",0]],[[["",0],["constdiv2",3]],["bool",0]],[[["",0],["constdiv",3]],["bool",0]],null,[[],["option",4]],[[],["option",4]],null,[[]],null,[[]],null,[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u8",0]]],[[["i32",0]]],[[["u64",0]]],[[["u32",0]]],[[["u16",0]]],[[]],[[["i64",0]]],[[["i16",0]]],[[["i8",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],null,null,[[]],null,null,[[],["option",4]],null,[[]],null,[[["u64",0],["u64",0]],["vec",3,[["u64",0]]]],null,[[]],null,[[]],[[["",0]]],[[]],[[["",0],["modint",3]],["bool",0]],[[["",0],["constdiv2",3]],["bool",0]],[[["",0],["constdiv",3]],["bool",0]],[[]],[[]],[[["usize",0]],["usize",0]],null,null,null,null,[[]],[[["i128",0]]],null,[[["i128",0]]],[[["i128",0]],["result",4]],null,[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[["usize",0],["usize",0]]],null,[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,[[["",0],["usize",0]],["bool",0]],[[["usize",0]]],[[["",0]]],null,null,[[["u64",0]]],[[["u64",0]]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u64",0]],["u64",0]],[[]],[[["usize",0]],["usize",0]],null,[[["u32",0]]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[]],[[]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["u16",0]]]],[[["",0]],["option",4,[["u32",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u128",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,[[],["option",4]],null,null,[[],["option",4]],[[],["option",4]],null,[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[]],[[]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["u16",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["u128",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u32",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,[[]],null,[[]],null,[[["usize",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,[[["",0],["i128",0],["i128",0]]],[[["",0],["i128",0]],["option",4,[["i128",0]]]],[[]],null,[[["",0],["u64",0]],["u64",0]],[[["vec",3,[["u64",0]]],["u64",0]]],null,[[]],null,[[]],null,[[["",0],["usize",0]]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["option",4,[["usize",0]]]],[[["usize",0]]],[[["",0]]],[[["",0],["usize",0],["usize",0]],["vec",3,[["usize",0]]]],null,[[]],null,[[["",0],["usize",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["usize",0],["u64",0]]],[[["",0],["usize",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],null,[[],["option",4]],null,[[]],[[["u64",0],["u64",0]],["vec",3,[["u64",0]]]],null,[[]],null,[[["",0]],["i64",0]],null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["usize",0]]],[[["",0]]],null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["usize",0]]],[[["",0]]],null,[[["",0],["i128",0]]],[[["",0],["i128",0]]],[[["",0],["i128",0]]],[[["",0],["i128",0]]],[[["",0]]],[[["",0]],["i128",0]],[[["",0]]],[[["",0]]],[[]],[[["",0],["i128",0]]],[[["",0],["rangeinclusive",3,[["i128",0]]]]],null,[[]],[[["i128",0]]],[[["i128",0]]],[[["i128",0]],["result",4]],null,[[["",0],["isize",0],["isize",0]]],[[["usize",0]]],[[["",0]],["option",4,[["vec",3,[["bool",0]]]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["kmpsearcher",3]],[[["",0]],["suffixarray",3]],[[["",0]],["zsearcher",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["kmpsearcher",3]],["bool",0]],[[["",0],["suffixarray",3]],["bool",0]],[[["",0],["zsearcher",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[["string",3]]],[[["vec",3]]],[[]],[[["",0],["usize",0]],["usize",0]],[[]],[[]],[[]],null,[[["",0],["kmpsearcher",3]],["bool",0]],[[["",0],["suffixarray",3]],["bool",0]],[[["",0],["zsearcher",3]],["bool",0]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["occurrences",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],null,[[],["vec",3,[["usize",0]]]],[[["",0]],["vec",3,[["usize",0]]]],[[["",0]]],[[["",0],["str",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["btreemap",3,[["ord",8],["vec",3]]]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["occurrences",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["vec",3,[["vec",3]]]],[[["",0],["usize",0]],["usize",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],null,[[["",0]]],null,[[["",0]]],null,null,null,[[["",0]]],null,[[["",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["count3wayresult",3]],[[["",0],["usize",0],["usize",0]],["option",4]],null,null,[[["",0]],["usize",0]],[[["",0],["usize",0],["usize",0]],["bool",0]],[[["",0]]],[[["",0]]],null,[[["",0],["usize",0]],["option",4,[["usize",0]]]],null,[[["",0]]],null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]],["usize",0]],[[]],null,[[["",0],["usize",0]],["option",4]],null,[[],["btreemap",3,[["ord",8],["vec",3]]]],[[["",0]]],[[["",0]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,[[]],null,[[]],[[["",0]]],[[]],null,[[["",0]]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["vec",3,[["vec",3,[["usize",0]]]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],null,[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["",0],["usize",0]],["option",4]],null,[[["",0]]],[[["",0]]],[[["",0],["usize",0],["usize",0]],["option",4,[["bool",0]]]],[[["",0],["usize",0]],["usize",0]],[[["",0]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["usize",0]],null,[[["",0],["usize",0]],["vec",3,[["usize",0]]]],[[["",0],["usize",0],["usize",0]],["bool",0]],null,[[],["vec",3,[["vec",3]]]],[[]],[[["",0]]],null,null,[[["",0]]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],null,null,null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,null,[[["",0]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["count3wayresult",3]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[["",0]],["count3wayresult",3]],[[["",0],["count3wayresult",3]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["count3wayresult",3]],["bool",0]],[[["",0]],["usize",0]],[[["usize",0],["usize",0],["usize",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0],["usize",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["usize",0]]],[[["",0]],["vec",3,[["vec",3,[["usize",0]]]]]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["vec",3,[["usize",0]]]],[[["",0],["usize",0],["usize",0]],["bool",0]],null,null,null,null,null,null,null,null,[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["usize",0]],null,[[["",0],["usize",0]],["option",4,[["usize",0]]]],null,null,[[["",0]]],null,null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],null,null,[[["",0],["usize",0]],["option",4]],null,[[],["btreemap",3,[["ord",8],["vec",3]]]],null,[[]],null,[[]],null,null,null,null,null,[[]],[[]],null,null,[[["",0],["usize",0],["usize",0]],["option",4]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["usize",0]]],[[["",0],["usize",0],["usize",0]],["option",4,[["bool",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["",0],["usize",0]],["option",4]],null,null,null,null,null,null,null,null,null,[[["",0]]],null,null,[[["",0]],["usize",0]],[[["",0]]],[[["",0]],["bool",0]],[[["",0]]],null,[[],["vec",3,[["vec",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullrangebounds",8,[["usize",0]]],["usize",0]],["range",3,[["usize",0]]]],null,[[["usize",0],["usize",0]]],[[["usize",0]]],[[["",0]],["opadd",4]],[[["",0]],["opaddcount",4]],[[["",0]],["opaddonopaddcount",3]],[[["",0]],["opaddonopmax",3]],[[["",0]],["opaddonopmin",3]],[[["",0]],["opaffine",4]],[[["",0]],["opaffineonopaddcount",3]],[[["",0]],["opclosure",3]],[[["",0]],["opclosureonopclosure",3]],[[["",0]],["opmax",4]],[[["",0]],["opmin",4]],[[["",0]],["opmul",4]],[[["",0]],["oprollhash",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[],["opaddonopaddcount",3]],[[],["opaddonopmax",3]],[[],["opaddonopmin",3]],[[]],[[],["opaffineonopaddcount",3]],[[],["opclosure",3]],[[],["opclosureonopclosure",3]],[[]],[[]],[[]],[[]],null,[[["",0],["opadd",4]],["bool",0]],[[["",0],["opaddcount",4]],["bool",0]],[[["",0],["opaffine",4]],["bool",0]],[[["",0],["opmax",4]],["bool",0]],[[["",0],["opmin",4]],["bool",0]],[[["",0],["opmul",4]],["bool",0]],[[["",0],["oprollhash",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["opadd",4]],["bool",0]],[[["",0],["opaddcount",4]],["bool",0]],[[["",0],["opaffine",4]],["bool",0]],[[["",0],["opmax",4]],["bool",0]],[[["",0],["opmin",4]],["bool",0]],[[["",0],["opmul",4]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["rangebounds",8,[["usize",0]]],["usize",0]],["range",3,[["usize",0]]]],[[["usize",0],["usize",0]]],[[["usize",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[["opclosure",3],["opclosure",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["str",0]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["scantupleerror",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",4,[["error",3]]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[]],[[["",0]],["result",4,[["scan",8]]]],[[["",0]],["result",4]],[[["",0],["usize",0]],["result",4,[["vec",3]]]],[[["str",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"ExactCover"],[3,"VecActSegtree"],[3,"DecrementalUsizeSet"],[3,"DisjointSparseTable"],[3,"N1Rmq"],[3,"WaveletMatrix"],[3,"BicrementalMedian"],[3,"BicrementalMedianDev"],[3,"BitSet"],[3,"BTreeMultiset"],[3,"CuckooHashMap"],[3,"CuckooHashSet"],[3,"FoldableDeque"],[3,"FoldableQueue"],[3,"IntervalMap"],[3,"IntervalSet"],[3,"PotentializedUnionFind"],[3,"RemovableHeap"],[3,"RsDict"],[3,"UnionFind"],[3,"VecSegtree"],[3,"Iter"],[3,"Iter"],[3,"Interval"],[8,"WmInt"],[3,"Tree"],[3,"FunctionalGraph"],[8,"CommonQuot"],[8,"Divisors"],[8,"Factors"],[8,"FactorsDup"],[3,"ModInt"],[3,"CompactSieve"],[3,"Interpolation"],[3,"LinearSieve"],[3,"ModFactorialBinom"],[3,"TwoSat"],[3,"ConstDiv2"],[3,"ConstDiv"],[3,"HarmonicFloorSum"],[3,"IncrementalLineSet"],[3,"SieveN2Plus1"],[3,"SieveN2PlusNPlus1"],[3,"SlopeFunction"],[8,"CarmichaelLambda"],[8,"DigitSum"],[8,"DLog"],[8,"EquivMod"],[8,"EquivModIter"],[8,"EulerPhi"],[8,"Gcd"],[8,"GcdRecip"],[8,"Lcm"],[8,"LinearFloorSum"],[8,"ModAckermann"],[8,"ModOrd"],[8,"ModPow"],[8,"ModTetration"],[8,"Sqrt"],[3,"CommonQuotStruct"],[3,"DivisorsStruct"],[3,"FactorsStruct"],[3,"FactorsDupStruct"],[3,"KmpSearcher"],[3,"SuffixArray"],[3,"ZSearcher"],[3,"Occurrences"],[3,"Occurrences"],[8,"Act"],[8,"Ring"],[8,"SliceHash"],[8,"Bisect"],[8,"Push"],[8,"PushFront"],[8,"PushBack"],[8,"SetValue"],[8,"StatefulPred"],[8,"PotentialFunction"],[8,"MonoidAction"],[8,"Fold"],[8,"GetMut"],[8,"MulRecip"],[8,"Pop"],[8,"PopFront"],[8,"PopBack"],[8,"Quantile"],[8,"Magma"],[8,"Count"],[8,"DisjointSet"],[8,"Count3way"],[8,"ElasticSlice"],[8,"ExpandBack"],[8,"ExpandFront"],[8,"FindNth"],[8,"FoldBisect"],[8,"FoldBisectRev"],[8,"AssocVal"],[8,"GroupBy"],[8,"Identity"],[8,"Max"],[8,"Min"],[8,"One"],[8,"PartialRecip"],[8,"Recip"],[8,"Field"],[8,"ShrinkBack"],[8,"ShrinkFront"],[8,"UsizeGroupBy"],[8,"Zero"],[3,"Count3wayResult"],[4,"OpAddCount"],[4,"OpAdd"],[4,"OpAffine"],[4,"OpMax"],[4,"OpMin"],[4,"OpMul"],[4,"OpRollHash"],[3,"OpAddOnOpAddCount"],[3,"OpAddOnOpMax"],[3,"OpAddOnOpMin"],[3,"OpAffineOnOpAddCount"],[3,"OpClosureOnOpClosure"],[3,"Scanner"],[3,"OpClosure"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[8,"Scan"],[3,"ScanTupleError"]]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};