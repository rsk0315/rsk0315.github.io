var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","t":[0,0,14,0,14,14,0,14,14,0,0,0,3,3,5,0,5,11,11,11,11,5,5,5,11,0,0,5,0,5,5,11,11,5,0,0,5,5,11,11,0,0,5,0,0,5,5,5,0,5,5,5,0,0,5,0,0,11,11,11,11,11,11,11,11,0,5,5,5,3,11,11,11,5,5,5,5,5,5,5,3,11,11,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,3,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,3,11,11,8,3,11,11,11,10,10,11,10,10,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,3,11,3,11,11,11,11,11,11,11,3,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,3,11,11,11,3,8,10,11,11,11,11,10,10,11,10,3,3,11,11,11,11,11,11,5,0,5,0,11,11,11,11,11,11,0,11,11,11,5,0,11,0,11,11,11,11,11,11,11,11,5,5,3,11,5,3,11,8,8,3,3,3,8,8,8,8,8,8,8,8,8,8,3,3,8,8,3,8,3,3,8,8,8,16,16,16,16,3,3,3,8,3,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,0,5,0,11,10,0,11,11,11,0,10,0,10,11,11,11,0,10,10,0,10,0,10,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,10,0,0,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,10,0,0,10,0,0,10,0,10,0,5,0,10,0,11,11,11,11,11,11,11,11,5,0,0,0,0,0,10,5,0,5,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,8,10,8,3,16,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,3,3,11,11,11,11,11,11,5,8,10,11,8,3,16,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,8,8,10,10,8,10,8,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,8,10,3,11,11,11,3,11,11,8,10,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,8,10,3,11,11,11,11,11,11,8,10,8,10,5,8,10,3,11,5,3,11,11,11,11,11,3,11,11,11,11,11,3,8,11,11,11,11,11,10,11,11,11,11,11,11,8,10,5,5,5,3,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,8,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,16,8,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,8,16,8,16,16,8,8,8,8,8,8,8,8,8,8,0,10,10,0,11,0,10,0,0,0,10,0,10,10,10,10,10,0,0,10,11,10,10,0,10,0,10,0,10,10,10,10,0,10,0,10,10,10,11,11,11,10,10,11,0,10,0,10,11,10,0,10,11,10,10,10,10,11,10,10,10,10,11,10,10,10,0,10,10,10,10,0,0,10,0,11,11,10,10,10,10,0,10,10,10,10,0,11,10,0,10,10,11,8,16,10,8,16,16,10,10,10,8,8,8,10,8,10,16,8,8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,16,16,11,10,10,11,10,11,11,10,10,11,11,11,8,16,16,10,8,8,3,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,11,10,10,11,10,11,10,8,8,8,16,16,8,8,8,10,10,10,10,10,11,11,10,10,10,10,8,10,8,16,10,8,8,10,10,8,16,10,8,10,8,10,8,10,8,8,8,8,16,10,10,2,16,2,8,10,11,10,10,10,16,16,16,16,16,16,8,8,8,8,8,8,10,10,10,10,10,10,16,8,10,8,8,8,8,8,8,8,16,8,10,16,8,10,10,10,10,8,10,12,12,12,12,17,17,17,17,17,17,17,17,17,17,17,8,8,4,4,13,3,3,3,13,4,3,13,3,3,4,13,4,13,4,13,4,13,4,13,16,8,3,3,3,3,3,3,8,8,3,3,3,3,13,13,13,13,13,13,13,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,10,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,17,17,17,17,17,17,17,17,17,17,5,8,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,10,10,5,5,5,8,8,11,11,4,2,13,13,12,4,2,13,13,12,3,3,3,4,2,13,13,12,3,3,11,3,11,4,2,13,13,12,4,2,13,13,12,4,2,13,13,12,4,2,13,13,12,4,2,13,11,12,12,12,12,3,3,3,12,12,3,3,3,3,3,8,16,16,3,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11],"n":["algo","ds","e","graph","impl_assoc_val","impl_mod_int","math","rand_gen","rand_gen_builder","seq","traits","utils","ExactCover","Larsch","bisect","bisect_","bisect_slice","borrow","borrow","borrow_mut","borrow_mut","convolve","cycle_mu_lambda","cycle_nth","default","exact_cover","extremum","extremum","extremum_float","extremum_float","extremum_slice","from","from","hilbert_mo","hilbert_mo_","index_order","index_order_by","index_order_by_key","into","into","karatsuba","larsch","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next_permutation","ordered_hash","ordered_hash_","parallel_bisect","parallel_bisect","permutation","tortoise_hare","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","window_bisect","window_bisect","bisect","bisect_slice","ExactCover","all","any","from_matrix","extremum","extremum_slice","extremum_float","hilbert_mo","index_order_by","index_order_by_key","convolve","Larsch","new","solve","majority","minmax","minmax_by","minmax_by_key","mo","ordered_hash","parallel_bisect","next_permutation","cycle_mu_lambda","cycle_nth","window_bisect","BTreeBimap","BTreeMultiset","BicrementalMedian","BicrementalMedianDev","BitSet","CuckooHashMap","CuckooHashSet","DecrementalUsizeSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IncrementalLineSet","IntervalMap","IntervalSet","N1Rmq","PotentializedUnionFind","RemovableHeap","RsDict","SkewHeap","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","bit_set","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_bimap","btree_multiset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","count","count","count","count_3way","count_3way","cuckoo_hash_map","cuckoo_hash_set","decremental_usize_set","default","default","default","default","default","default","default","default","diff","disjoint_sparse_table","eq","eq","eq","eq","eq","extend","extend","extend","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","get_mut","get_mut","incremental_line_set","index","index","index","interval_map","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","len","len","n1_rmq","ne","ne","ne","ne","new","new","not","not","partial_cmp","pop","pop_back","pop_front","pop_front","potentialized_union_find","push","push_back","push_back","push_front","quantile","relate","removable_heap","repr","rs_dict","set_value","shl","shl","shl_assign","shr","shr","shr_assign","skew_heap","sub","sub","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","with","BitSet","Indices","Words","and","and_assign","autofix","borrow","borrow","borrow_mut","borrow_mut","capacity","contains","find_first","find_last","from","from","group_by","group_by","indices","insert","into","into","into_iter","into_iter","ior","ior_assign","is_empty","len","new","new","next","next","next_back","next_back","not","not_assign","or","or_assign","remove","reserve","reserve_exact","shl","shl_and","shl_and_assign","shl_and_self","shl_and_self_assign","shl_assign","shl_ior","shl_ior_assign","shl_ior_self","shl_ior_self_assign","shl_op","shl_op_assign","shl_op_self","shl_op_self_assign","shl_or","shl_or_assign","shl_or_self","shl_or_self_assign","shl_sub","shl_sub_assign","shl_sub_self","shl_sub_self_assign","shl_xor","shl_xor_assign","shl_xor_self","shl_xor_self_assign","shr","shr_and","shr_and_assign","shr_and_self","shr_and_self_assign","shr_assign","shr_ior","shr_ior_assign","shr_ior_self","shr_ior_self_assign","shr_op","shr_op_assign","shr_op_self","shr_op_self_assign","shr_or","shr_or_assign","shr_or_self","shr_or_self_assign","shr_sub","shr_sub_assign","shr_sub_self","shr_sub_self_assign","shr_xor","shr_xor_assign","shr_xor_self","shr_xor_self_assign","sub","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","words","xor","xor_assign","BTreeBimap","insert","is_empty","len","new","range_left","range_right","remove_left","remove_right","BTreeMultiset","Iter","borrow","borrow_mut","count","from","group_by","insert","insert_n","into","into_iter","is_empty","iter","len","max","min","new","new","next","remove","remove_n","try_from","try_into","type_id","usize_group_by","vzip","CuckooHashMap","contains_key","insert","is_empty","len","new","remove","CuckooHashSet","contains","insert","is_empty","len","new","remove","DecrementalUsizeSet","contains","greater","greater_equal","is_empty","len","less","less_equal","new","remove","universe_len","DisjointSparseTable","FoldableDeque","new","with","FoldableQueue","new","with","ChtInt","IncrementalLineSet","inner_len","min","new","on_line","oo","push","right","simplify","Interval","IntervalMap","borrow","borrow_mut","clone","clone_into","cmp","connection","eq","fmt","from","from_bounds","inf","insert","intersection","intersection_minus","intersects","into","is_connected_with","is_empty","is_empty","is_subset_of","is_superset_of","iter","ne","new","partial_cmp","remove","sup","superset_of","to_owned","try_from","try_into","type_id","vzip","IntervalSet","clear","covering","has_range","insert","is_empty","iter","mex","new","remove","N1Rmq","min","PotentializedUnionFind","with_len","RemovableHeap","is_empty","len","new","peek","pop","push","remove","RsDict","rank","select","IntoIter","PeekMut","SkewHeap","borrow","borrow","borrow_mut","borrow_mut","clear","deref","deref_mut","drop","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","from","group_by","into","into","into_iter","is_empty","len","len","meld","new","next","peek","peek_mut","pop","pop","push","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","vzip","vzip","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","WmInt","bitlen","is_empty","len","rank","select","set","test","xored_quantile","zero","FunctionalGraph","TreeCata","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dijkstra","dijkstra_","dinic","dinic_","eq","fmt","from","from","from","from","functional_graph","into","into","ne","scc","scc_","to_owned","tree_cata","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","dijkstra","dinic","FunctionalGraph","mu_lambda","scc","TreeCata","each_root","CarmichaelLambda","CommonQuot","CompactSieve","ConstDiv","ConstDiv2","DLog","DigitSum","Divisors","EquivMod","EquivModIter","EulerPhi","Factors","FactorsDup","Gcd","GcdRecip","HarmonicFloorSum","Interpolation","Lcm","LinearFloorSum","LinearSieve","ModAckermann","ModFactorialBinom","ModInt","ModOrd","ModPow","ModTetration","Output","Output","Output","Output","SieveN2Plus1","SieveN2PlusNPlus1","SlopeFunction","Sqrt","TwoSat","add","add_assign","bit_binom","bit_binom_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","carmichael_lambda","carmichael_lambda","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_quot","common_quot","compact_sieve","const_div","continued_fraction","continued_fraction_","default","digit_pow_sum","digit_sum","digit_sum","div","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","equiv_mod","equiv_mod","equiv_mod","euler_phi","euler_phi","factors","factors","factors_dup","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gcd","gcd","gcd_recip","gcd_recip","harmonic_floor_sum","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","mod_ackermann","mod_ackermann","mod_factorial_binom","mod_ord","mod_ord","mod_pow","mod_pow","mod_recip_table_","mod_recip_table_prime","mod_tetration","mod_tetration","modint","mul","mul_assign","mul_recip","ne","ne","ne","neg","one","prime_pi","prime_pi_","sieve_n2_plus_1","sieve_n2_plus_n_plus_1","slope_function","sqrt","sqrt","sqrt_fraction","sqrt_fraction_","sqrt_fraction_fn","stern_brocot","stern_brocot_","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","bit_binom","CarmichaelLambda","carmichael_lambda","CommonQuot","CommonQuotStruct","Output","borrow","borrow_mut","common_quot","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","continued_fraction","DigitSum","digit_pow_sum","digit_sum","Divisors","DivisorsStruct","Output","borrow","borrow_mut","divisors","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","DLog","dlog","EquivMod","EquivModIter","equiv_mod","equiv_mod","EulerPhi","euler_phi","Factors","FactorsStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","FactorsDup","FactorsDupStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors_dup","from","group_by","into","into_iter","next","next","next","next","next","next","try_from","try_into","type_id","usize_group_by","vzip","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","Interpolation","interpolate","with","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","divisors_sum","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","recips","ModAckermann","mod_ackermann","ModFactorialBinom","binom","factorial","factorial_recip","new","perm","recip","ModOrd","mod_ord","ModPow","mod_pow","mod_recip_table_prime","ModTetration","mod_tetration","ModInt","get","prime_pi","SieveN2Plus1","factors","factors_dup","is_prime","new","primes","SieveN2PlusNPlus1","factors","factors_dup","is_prime","new","primes","SlopeFunction","SlopeTrickInt","add_abs","add_const","add_left","add_right","argmin","doz","min","min_left","min_right","new","shift","window","Sqrt","sqrt","sqrt_fraction","sqrt_fraction_fn","stern_brocot","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","index","into","into","into","kmp","ne","ne","ne","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","try_from","try_into","type_id","usize_group_by","vzip","SuffixArray","into_inner","lcpa","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","try_from","try_into","type_id","usize_group_by","vzip","z","Act","Action","AddAssoc","AddComm","Additive","AssocVal","Associative","Bisect","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","GroupBy","Hashed","Identity","Input","Input","Input","Input","Input","Input","Item","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","PotentialFunction","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","UsizeGroupBy","Zero","act","act","act","action","add","additive","additive","assoc_val","binop","bisect","bisect","count","count","count","count","count_3way","diff","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get","get_mut","get_mut","group_by","group_by","hash","id","is_empty","is_empty","is_empty","len","len","len","max","max","min","min","mul","mul_recip","multiplicative","multiplicative","neg","new","new","next","one","one","op","operand","operator","partial_recip","partition","pop","pop_back","pop_front","potential_function","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","relate","repr","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","usize_group_by","usize_group_by","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","operand","operator","AddAssoc","AddComm","Zero","zero","AssocVal","get","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","additive","id","mul","multiplicative","neg","one","op","partial_recip","recip","recip","zero","Bisect","Input","Output","bisect","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","fmt","from","ge","gt","into","le","lt","ne","ne","new","to_owned","try_from","try_into","type_id","vzip","DisjointSet","count","equiv","is_empty","len","new","partition","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","GroupBy","group_by","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","CommutativeGroup","Item","Magma","PotentialFunction","diff","is_empty","len","new","relate","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","UsizeGroupBy","usize_group_by","0","0","0","1","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","MakeMax","MakeMin","OpAdd","OpAddCount","OpAddCountV","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAddV","OpAffine","OpAffineOnOpAddCount","OpAffineV","OpClosure","OpClosureOnOpClosure","OpGcd","OpGcdV","OpMax","OpMaxV","OpMin","OpMinV","OpMul","OpMulV","OpRollHash","OpRollHashV","Output","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PerLine","Pext","RandomGenerator","Scanner","SpaceSep","StrSep","VecMarker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","act","act","act","act","act","ascii","bitop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","charset","check_bounds","check_bounds_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","e_macro","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate","id","id","id","id","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","make_max","make_min","make_minmax","ne","ne","ne","ne","ne","ne","ne","op","op","op","op","op","op","op","op","op","op_add","op_add_count","op_add_on_op_add_count","op_add_on_op_max","op_add_on_op_min","op_affine","op_affine_on_op_add_count","op_closure","op_closure_on_op_closure","op_gcd","op_max","op_min","op_mul","op_roll_hash","operand","operand","operand","operand","operand","operator","operator","operator","operator","operator","options","output","partial_recip","partial_recip","pdep","pext","rand_gen_macro","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","charset","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","Pext","get","get","get","get","get","new","new","new","new","new","pdep","pext","bounds_within","check_bounds","check_bounds_range","MakeMax","MakeMin","make_max","make_min","OpAdd","OpAddV","OpAddV","_Marker","0","OpAddCount","OpAddCountV","OpAddCountV","_Marker","0","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAffine","OpAffineV","OpAffineV","_Marker","0","OpAffineOnOpAddCount","OpClosure","new","OpClosureOnOpClosure","new","OpGcd","OpGcdV","OpGcdV","_Marker","0","OpMax","OpMaxV","OpMaxV","_Marker","0","OpMin","OpMinV","OpMinV","_Marker","0","OpMul","OpMulV","OpMulV","_Marker","0","OpRollHash","OpRollHashV","OpRollHashV","value_of","0","0","0","1","PerLine","SpaceSep","StrSep","0","0","Ascii","AsciiGen","AsciiString","AsciiStringOfCharset","AsciiStringOfDistribution","GenOptions","OptionType","Output","Permutation","RandomGenerator","SeedableRngInspect","VecMarker","VecOptionsMarker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","charset","charset","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","distinct","distribution","from","from","from","from","from","from","from","generate","inspect","into","into","into","into","into","into","into","new","new","options","options","options","sorted","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","scan","to_string","try_from","try_into","type_id","vzip"],"q":["nekolib","","","","","","","","","","","","nekolib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::algo::bisect_","","nekolib::algo::exact_cover","","","","nekolib::algo::extremum","","nekolib::algo::extremum_float","nekolib::algo::hilbert_mo_","nekolib::algo::index_order","","nekolib::algo::karatsuba","nekolib::algo::larsch","","","nekolib::algo::majority_","nekolib::algo::minmax","","","nekolib::algo::mo","nekolib::algo::ordered_hash_","nekolib::algo::parallel_bisect","nekolib::algo::permutation","nekolib::algo::tortoise_hare","","nekolib::algo::window_bisect","nekolib::dsnekolib::ds::bicremental_median","","","","","nekolib::ds::bicremental_median_dev","","","","","","","nekolib::ds::bit_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::btree_bimap","","","","","","","","","nekolib::ds::btree_multiset","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::cuckoo_hash_map","","","","","","","nekolib::ds::cuckoo_hash_set","","","","","","","nekolib::ds::decremental_usize_set","","","","","","","","","","","nekolib::ds::disjoint_sparse_table","nekolib::ds::foldable_deque","","","nekolib::ds::foldable_queue","","","nekolib::ds::incremental_line_set","","","","","","","","","","nekolib::ds::interval_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::interval_set","","","","","","","","","","nekolib::ds::n1_rmq","","nekolib::ds::potentialized_union_find","","nekolib::ds::removable_heap","","","","","","","","nekolib::ds::rs_dict","","","nekolib::ds::skew_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::union_find","nekolib::ds::vec_act_segtree","","","","nekolib::ds::vec_segtree","","","","nekolib::ds::wavelet_matrix","","","","","","","","","","","nekolib::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::graph::dijkstra_","nekolib::graph::dinic_","nekolib::graph::functional_graph","","nekolib::graph::scc_","nekolib::graph::tree_cata","","nekolib::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::bit_binom_","nekolib::math::carmichael_lambda","","nekolib::math::common_quot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::compact_sieve","","","","nekolib::math::const_div","","","","","","","","nekolib::math::continued_fraction_","nekolib::math::digit_sum","","","nekolib::math::divisors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::dlog","","nekolib::math::equiv_mod","","","","nekolib::math::euler_phi","","nekolib::math::factors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::factors_dup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::gcd","","nekolib::math::gcd_recip","","nekolib::math::harmonic_floor_sum","","","","nekolib::math::interpolation","","","nekolib::math::lcm","","nekolib::math::linear_floor_sum","","nekolib::math::linear_sieve","","","","","","","","","","","","","nekolib::math::mod_ackermann","","nekolib::math::mod_factorial_binom","","","","","","","nekolib::math::mod_ord","","nekolib::math::mod_pow","","nekolib::math::mod_recip_table_","nekolib::math::mod_tetration","","nekolib::math::modint","","nekolib::math::prime_pi_","nekolib::math::sieve_n2_plus_1","","","","","","nekolib::math::sieve_n2_plus_n_plus_1","","","","","","nekolib::math::slope_function","","","","","","","","","","","","","","nekolib::math::sqrt","","nekolib::math::sqrt_fraction_","","nekolib::math::stern_brocot_","nekolib::math::two_sat","","","","nekolib::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::seq::kmp","","","","","","","","","","","","","","","nekolib::seq::suffix_array","","","","","nekolib::seq::z_algo","","","","","","","","","","","","","","","","nekolib::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::act","","","nekolib::traits::action","","","","","","nekolib::traits::additive","","","","nekolib::traits::assoc_val","","nekolib::traits::binop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::bisect","","","","nekolib::traits::count","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::disjoint_set","","","","","","","","","","nekolib::traits::elastic_slice","","","","","","","","","","","","","","","","","","","nekolib::traits::find_nth","","nekolib::traits::fold","","","nekolib::traits::fold_bisect","","","","nekolib::traits::get_mut","","","nekolib::traits::group_by","","nekolib::traits::max","","nekolib::traits::min","","nekolib::traits::multiplicative","","","","","","","nekolib::traits::potential_function","","","","","","","","","nekolib::traits::push_pop","","","","","","","","","","","","","","","","","","nekolib::traits::quantile","","","nekolib::traits::range_bounds","","","","","","","nekolib::traits::set_value","","","nekolib::traits::stateful_predicate","","","","","","nekolib::traits::usize_group_by","","nekolib::utilsnekolib::utils::OpAdd","nekolib::utils::OpAddCount","nekolib::utils::OpAffine","nekolib::utils::OpGcd","nekolib::utils::OpMax","nekolib::utils::OpMin","nekolib::utils::OpMul","nekolib::utils::ascii","","","","","","","","","","","","nekolib::utils::bitop","","","","","","","","","","","","","","","","","","","nekolib::utils::buf_range","","","nekolib::utils::make_minmax","","","","nekolib::utils::op_add","","","","nekolib::utils::op_add::OpAdd","nekolib::utils::op_add_count","","","","nekolib::utils::op_add_count::OpAddCount","nekolib::utils::op_add_on_op_add_count","nekolib::utils::op_add_on_op_max","nekolib::utils::op_add_on_op_min","nekolib::utils::op_affine","","","","nekolib::utils::op_affine::OpAffine","nekolib::utils::op_affine_on_op_add_count","nekolib::utils::op_closure","","nekolib::utils::op_closure_on_op_closure","","nekolib::utils::op_gcd","","","","nekolib::utils::op_gcd::OpGcd","nekolib::utils::op_max","","","","nekolib::utils::op_max::OpMax","nekolib::utils::op_min","","","","nekolib::utils::op_min::OpMin","nekolib::utils::op_mul","","","","nekolib::utils::op_mul::OpMul","nekolib::utils::op_roll_hash","","","","nekolib::utils::output","","","","","","","nekolib::utils::rand_gen_macro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::utils::scanner","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["アルゴリズムたち。","データ構造たち。","デバッグ用マクロ。","グラフに関するものたち。","","","数学関連のアルゴリズムたち。","乱数生成マクロ。","","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","Exact cover。","LARSCH algorithm。","二分探索で境界を探す。","二分探索。","二分探索で境界を探す。","","","","","Karatsuba 法。Карацуба 法？","周期検出を行う。","$n$ 項目を求める。","","Exact cover。","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Returns the argument unchanged.","Returns the argument unchanged.","Hilbert curve に基づく Mo’s algorithm。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","添字の順序。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Karatsuba 法。","LARSCH algorithm。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","辞書順で次の順列の生成。","座標圧縮。","座標圧縮。","並列二分探索。","並列二分探索を行う。","順列。","周期検出。","","","","","","","","","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","Exact cover。","解を全て探す。","…","与えられた行列に対して前計算を行う。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","Karatsuba 法。Карацуба 法？","LARSCH algorithm。","","","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","座標圧縮。","並列二分探索を行う。","辞書順で次の順列の生成。","周期検出を行う。","$n$ 項目を求める。","尺取り法で、各始端に対して境界を探す。","双方向連想配列。","多重集合。","中央値の管理。","中央値と偏差の管理。","Bit set。","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","直線の集合。","区間から値への対応づけ。","区間の集合。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","ポテンシャルつき union-find。","削除可能ヒープ。","rank/select 辞書。","","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","多重集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","","","","","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","直線の集合。","","","","区間から値への対応づけ。","区間の集合。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","線形 RMQ。","","","","","","","","","","","","","","ポテンシャルつき union-find。","","","","","","","削除可能ヒープ。","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","","","","","","","","","","","","","","","","","","","","","","","","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","","Bit set。","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","","","","","","","","","多重集合。","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","","","","","","","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","","","","","","","<code>usize</code> の decremental set。","$i\\\\in S$ を返す。","$\\\\min_{j\\\\gt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\min_{j\\\\ge i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S=\\\\emptyset$ を返す。","$|S|$ を返す。","$\\\\max_{j\\\\lt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\max_{j\\\\le i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S\\\\gets\\\\{0, 1, \\\\dots, u-1\\\\}$ で初期化。","$S\\\\gets S\\\\setminus\\\\{i\\\\}$ で更新する。","$u$ を返す。","disjoint sparse table。","fold 可能両端キュー。","","","fold 可能キュー。","","","","直線の集合。","","","","","","","","","","区間から値への対応づけ。","","","","","","","","","Returns the argument unchanged.","","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{\\\\cup} (k…","","","","Calls <code>U::from(self)</code>.","","","$S=\\\\emptyset$ を返す。","","","","","$S\\\\gets\\\\emptyset$ で初期化する。","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{…","","$T\\\\subseteq S$ かつ <code>b</code> を含む $T$ …","","","","","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","","ポテンシャルつき union-find。","","削除可能ヒープ。","空のとき <code>true</code> を返す。","要素数を返す。","空のヒープで初期化する。","最大値を取得する。","最大値を取り出す。","要素を追加する。","要素を削除する。","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","","","","","","","","function graph。","全方位木 DP。","","","","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","","","Returns the argument unchanged.","","Returns the argument unchanged.","","functional graph。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","lowlink に基づく強連結成分分解。","強連結成分分解。","","全方位木 DP。","","","","","","","","","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","function graph。","$(\\\\mu_i, \\\\lambda_i)$ を返す。","lowlink に基づく強連結成分分解。","全方位木 DP。","","Carmichael の $\\\\lambda$ 関数。","商が共通の区間の列挙。","篩。","定数除算。","定数除算。","離散対数。","桁和。","約数列挙。","Chinese remaindering。","Chinese remaindering。","Euler の $\\\\varphi$ 関数。","素因数分解。","素因数分解。","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","Lagrange 補間。","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","Ackermann 関数。","法 $p$ での二項係数。","","位数。","冪乗。","tetration。","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","2-SAT。","","","組合せのビット表現。","組合せのビット表現。","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","商が共通の区間の列挙。","","篩。","定数除算。","連分数展開。","連分数展開。","","","桁和。","","","","約数列挙。","","離散対数。","","","","","Chinese remaindering","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","素因数分解。","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","Lagrange 補間。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","Ackermann 関数。","","法 $p$ での二項係数。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","素数 $m$ を法とした逆元のテーブル。","tetration。","","法 $m$ での演算をする。","","","","","","","","","素数の数え上げ。","素数の数え上げ。","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","平方根の連分数展開。","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","Stern–Brocot tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","Carmichael の $\\\\lambda$ 関数。","","商が共通の区間の列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","篩。","","","","定数除算。","定数除算。","","","","","","","連分数展開。","桁和。","","","約数列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","離散対数。","","Chinese remaindering。","Chinese remaindering。","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","Lagrange 補間。","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$n$ の約数の総和を返す。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","法 $m$ での逆元を返す。","Ackermann 関数。","","法 $p$ での二項係数。","$i!/(j!\\\\cdot (i-j)!) \\\\bmod p$ を返す。","$i! \\\\bmod p$ を返す。","$i!^{-1} \\\\bmod p$ を返す。","$(0!, 1!, \\\\dots, n!)$ と $(0!^{-1}, 1!^{-1}, \\\\dots, …","$i!/(i-j)! \\\\bmod p$ を返す。","$i^{-1} \\\\bmod p$ を返す。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","素数の数え上げ。","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","$n^2+1$ の形の素数を返す。","$n^2+n+1$ 型素数の篩。","$n^2+n+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+n+1$ が素数のとき真を返す。","初期化する。","$n^2+n+1$ の形の素数を返す。","区分線形凸関数。","","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","平方根。","","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KMP 法。","","","","","","接尾辞配列。","","","","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","接尾辞配列。","自身を消費し、内部表現を返す。","高さ配列を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","値を返す関数を持つ。","結合法則を満たす。","二分探索。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","イテレータのグルーピング。","","単位元を持つ。","","","","","代入される型。","","要素の型。","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","ポテンシャル関数。","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","イテレータのグルーピング。","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","","型に紐づく値。","代数的構造に関するトレイトたちです。","二分探索。","","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","ポテンシャルの差を求める。","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","","イテレータのグルーピング。","Examples","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合の要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","分割を返す。","","","","ポテンシャル関数。","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","ポテンシャルの差を定義する。","$u$ を含む集合の代表元を返す。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","イテレータのグルーピング。","Examples","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","","","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","値を返す関数を持つ。","","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","","単位元を返す。","積 $x \\\\ast y$ を返す。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","加法 $\\\\circ$ の単位元 $0$ を返す。","二分探索。","","","","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","分割を返す。","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","","要素の型。","","ポテンシャル関数。","ポテンシャルの差を求める。","集合が空であれば <code>true</code> を返す。","集合の要素数 $n$ を返す。","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","ポテンシャルの差を定義する。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","イテレータのグルーピング。","Examples","","","","","","","","","","","","","","","","","","和を返す演算を持つ。","","","","","","","","","","任意の結合的な演算を持つ。","","","","最大値を返す演算を持つ。","","最小値を返す演算を持つ。","","積を返す演算を持つ。","","…","","","","","","","","","形式つき出力（改行区切り）。","","","スキャナ。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","","境界チェックを行う。","境界チェックを行う。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","加法に関する wrapper クラス。","加法に関する wrapper クラス。","","","","加法に関する wrapper クラス。","","クロージャの wrapper クラス。","","","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","","","","","","","","","形式つき出力。","","","","","乱数生成マクロ。","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","境界チェックを行う。","境界チェックを行う。","","","","","和を返す演算を持つ。","","","","","","","","","","","","","","","","","","","任意の結合的な演算を持つ。","","","","","","","","","最大値を返す演算を持つ。","","","","","最小値を返す演算を持つ。","","","","","積を返す演算を持つ。","","","","","…","","","","","","","","形式つき出力（改行区切り）。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","スキャナ。","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,5,15,5,0,0,0,5,0,0,0,0,0,0,15,5,0,0,0,0,0,15,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,5,15,5,15,5,15,5,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,0,0,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,17,40,40,35,36,40,40,0,0,0,44,17,23,28,29,30,16,37,33,0,20,22,17,24,32,44,17,25,26,40,35,44,20,22,17,17,23,24,25,26,28,29,30,31,32,35,16,37,54,28,29,16,37,16,37,16,37,0,0,63,54,54,54,56,56,44,40,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,35,36,16,16,16,37,37,37,44,17,25,26,16,37,0,54,40,37,0,0,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,44,24,31,31,33,36,0,20,22,24,32,33,36,17,17,17,29,28,28,29,0,29,28,29,28,40,33,0,36,0,37,17,17,17,17,17,17,0,17,17,17,17,17,17,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,0,36,0,0,63,54,56,44,40,20,22,17,23,24,25,26,28,29,30,31,32,33,34,35,36,16,37,0,0,20,20,20,20,0,22,22,22,22,22,22,0,0,0,17,17,17,59,58,59,58,17,17,17,17,59,58,59,58,17,17,59,58,59,58,17,17,17,17,58,17,59,58,59,58,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,59,58,59,58,59,58,59,58,59,58,17,17,17,0,23,23,23,23,23,23,23,23,0,0,62,62,24,62,62,24,24,62,62,24,24,24,24,24,62,24,62,24,24,62,62,62,62,62,0,25,25,25,25,25,25,0,26,26,26,26,26,26,0,63,63,63,63,63,63,63,63,63,63,0,0,28,28,0,29,29,0,0,30,30,30,53,53,30,53,53,0,0,65,65,65,65,65,65,65,65,65,65,65,31,65,65,65,65,65,65,31,65,65,31,65,31,65,31,65,31,65,65,65,65,65,0,32,32,32,32,32,32,32,32,32,0,56,0,33,0,34,34,34,34,34,34,34,0,35,35,0,0,0,69,68,69,68,44,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,68,69,69,68,69,44,44,69,44,44,69,44,44,44,68,44,69,69,68,69,68,69,68,69,69,68,0,0,16,16,16,0,37,37,37,0,0,39,40,40,40,40,39,39,40,39,0,0,72,70,72,70,70,70,0,0,0,0,70,70,72,72,70,70,0,72,70,70,0,0,70,0,72,70,72,70,72,70,72,70,0,0,0,70,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,149,150,151,0,0,0,0,0,75,75,0,0,91,95,96,97,99,75,76,77,78,79,80,81,91,95,96,97,99,75,76,77,78,79,80,81,0,152,75,76,77,78,79,80,81,75,76,77,78,79,80,81,0,148,0,0,0,0,81,153,0,153,75,75,0,149,0,154,75,76,77,0,155,156,0,157,0,150,0,151,75,75,76,77,78,79,80,81,91,95,96,97,99,75,75,75,75,75,75,75,75,75,76,77,78,79,80,81,0,158,0,159,0,0,91,95,96,97,99,75,76,77,78,79,80,81,0,160,0,161,0,0,162,0,0,163,0,164,0,0,0,165,0,75,75,75,75,76,77,75,75,0,0,0,0,0,0,166,0,0,0,0,0,75,75,75,76,77,78,79,80,81,75,91,95,96,97,99,75,76,77,78,79,80,81,91,95,96,97,99,75,76,77,78,79,80,81,0,91,95,96,97,99,75,76,77,78,79,80,81,91,95,96,97,99,75,76,77,78,79,80,81,75,0,0,152,0,0,148,90,90,148,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,91,91,91,0,0,76,77,76,77,76,77,0,0,153,153,0,0,149,92,92,149,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,154,0,0,155,156,0,157,0,0,150,93,93,93,93,93,93,93,93,93,93,93,93,93,93,150,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,151,94,94,94,94,94,94,94,94,94,94,94,94,94,94,151,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,158,0,159,0,78,78,78,0,95,95,0,160,0,161,0,96,96,96,96,96,96,96,96,96,96,96,96,0,162,0,97,97,97,97,97,97,0,163,0,164,0,0,165,0,75,0,0,79,79,79,79,79,0,80,80,80,80,80,0,0,81,81,81,81,81,98,81,81,81,81,81,81,0,166,0,0,0,0,99,99,99,0,0,0,101,102,103,101,102,103,101,102,103,101,102,103,101,102,103,101,102,103,101,101,102,102,102,103,103,102,101,102,103,0,101,102,103,101,101,0,101,102,103,101,102,103,101,102,103,101,102,103,101,102,103,0,0,0,105,105,105,105,105,105,105,101,105,105,105,105,105,0,102,102,102,102,0,0,107,107,107,107,107,107,107,103,107,107,107,107,107,103,0,167,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,170,171,172,173,174,12,175,0,0,0,0,0,0,0,0,168,0,176,176,170,177,178,179,180,181,182,183,0,0,0,0,0,0,0,0,0,0,0,169,0,184,168,0,0,0,0,0,0,0,0,0,0,0,167,176,0,168,0,168,0,0,0,170,0,185,186,12,187,175,0,0,188,186,189,190,0,191,0,177,0,192,193,188,74,0,178,0,194,169,195,186,188,175,186,175,188,0,115,0,112,168,179,0,168,168,186,175,12,196,168,184,176,176,197,186,180,182,181,0,12,171,173,172,0,0,183,0,198,199,175,186,188,12,0,174,200,201,188,0,186,186,0,202,111,168,0,167,167,0,176,176,176,176,176,0,0,0,111,0,74,168,0,0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,184,168,168,168,195,168,168,168,168,184,197,198,199,168,0,170,170,170,0,0,0,43,43,43,43,185,187,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,186,186,186,186,186,186,186,186,186,0,0,0,169,169,0,0,0,188,189,190,188,169,188,188,188,200,201,188,0,191,0,177,177,0,0,192,193,0,178,178,0,194,0,115,0,112,0,0,0,0,179,179,196,0,175,0,0,175,175,175,175,175,171,172,173,180,181,182,0,0,0,0,0,0,180,182,181,171,173,172,183,0,183,0,0,0,0,0,0,0,174,0,174,12,0,12,12,12,12,0,202,134,135,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,0,0,0,124,0,0,126,0,0,0,128,0,129,0,130,0,131,0,132,203,0,0,0,0,0,0,0,0,0,0,0,0,0,124,125,126,128,129,130,131,108,114,116,117,118,0,0,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,0,0,0,0,0,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,124,125,108,114,116,126,117,127,118,128,129,130,131,132,0,124,125,126,128,129,130,131,132,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,124,125,108,114,116,126,117,127,118,128,129,130,131,132,134,135,136,137,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,203,124,125,126,127,128,129,130,131,132,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,204,205,0,124,125,126,128,129,130,131,124,125,126,127,128,129,130,131,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,114,116,117,118,108,114,116,117,118,133,0,124,131,206,207,0,124,0,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,134,135,136,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,134,135,136,137,119,120,121,122,123,124,125,108,114,116,126,117,127,118,128,129,130,131,132,133,208,209,210,211,212,213,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,122,123,119,120,121,122,123,206,207,0,0,0,0,0,204,205,0,0,124,124,208,0,0,125,125,209,0,0,0,0,0,126,126,210,0,0,127,0,118,0,0,128,128,211,0,0,129,129,212,0,0,130,130,213,0,0,131,131,214,0,0,132,132,134,135,136,136,0,0,0,139,144,0,0,0,0,0,0,215,203,0,0,0,0,0,138,139,140,143,141,142,144,138,139,140,143,141,142,144,139,141,139,140,143,141,142,144,139,140,143,141,142,144,138,139,138,139,140,143,141,142,144,203,216,138,139,140,143,141,142,144,142,133,215,139,141,138,139,140,143,141,142,144,138,139,140,143,141,142,144,138,139,140,143,141,142,144,138,139,140,143,141,142,144,138,139,140,143,141,142,144,147,0,0,0,145,145,145,145,145,145,137,137,137,137,137,145,137,137,137,147,145,145,145,145,145],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],1],0,[3,1],[[]],[[]],[[]],[[]],[[],4],[[]],[1],[[],5],0,0,[[[2,[1]],3]],0,[[[7,[6]],6,3]],[3],[[]],[[]],[4,8],0,0,[3,[[4,[1]]]],[3,[[4,[1]]]],[[]],[[]],0,0,[[],9],0,0,[[],9],[3,9],[[],9],0,[[4,[9,[1]]],4],[[],10],[[],[[11,[1]]]],0,0,[[12,4],[[4,[1]]]],0,0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[]],[[]],0,[[],[[4,[1]]]],[[[2,[1]],3],1],[3,1],0,[5,[[4,[[4,[1]]]]]],[5,[[9,[[4,[1]]]]]],[4,5],[[[2,[1]],3]],[3],[[[7,[6]],6,3]],[4,8],[3,[[4,[1]]]],[3,[[4,[1]]]],[[],4],0,[[1,1],15],[15],[[],9],[[],9],[3,9],[[],9],[[4,[9,[1]]],4],[[],[[11,[1]]]],[[12,4],[[4,[1]]]],[[],10],[[]],[1],[[],[[4,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16],0,0,0,[[17,17],17],[[17,17],17],[[17,17],17],[[17,17],17],[[17,17]],[[17,17]],[[17,17],17],[[17,17],17],[[17,17],17],[[17,17],17],[[17,17]],[[17,17]],[[17,17],17],[[17,17],17],[[17,17],17],[[17,17],17],[[17,17]],[[17,17]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[20,[[0,[18,19,18]]]]],[[20,[[0,[18,19,18]]]]]],[[[22,[[0,[18,21]]]]],[[22,[[0,[18,21]]]]]],[17,17],[[[23,[[0,[18,19]],[0,[18,19]]]]],[[23,[[0,[18,19]],[0,[18,19]]]]]],[[[24,[18]]],[[24,[18]]]],[[[25,[18,18]]],[[25,[18,18]]]],[[[26,[18]]],[[26,[18]]]],[[[28,[[0,[18,27]]]]],[[28,[[0,[18,27]]]]]],[[[29,[[0,[18,27]]]]],[[29,[[0,[18,27]]]]]],[[[30,[[0,[18,19]]]]],[[30,[[0,[18,19]]]]]],[[[31,[18,18]]],[[31,[18,18]]]],[[[32,[[0,[18,19]]]]],[[32,[[0,[18,19]]]]]],[[[33,[[0,[18,21]]]]],[[33,[[0,[18,21]]]]]],[[[34,[18]]],[[34,[18]]]],[35,35],[36,36],[[[16,[18]]],[[16,[18]]]],[[[37,[18]]],[[37,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,17],38],[[[40,[39]],[41,[1]],39],1],[[[40,[39]],[41,[1]],[7,[39]]],1],[[35,[41,[1]],42],1],[[36,1],1],[[[40,[39]],[41,[1]],39],43],[[[40,[39]],[41,[1]],[7,[39]]],43],0,0,0,[[],[[44,[19]]]],[[],17],[[],[[23,[[0,[45,19]],[0,[45,19]]]]]],[[],[[28,[27]]]],[[],[[29,[27]]]],[[],[[30,[[0,[45,19]]]]]],[[],[[16,[45]]]],[[],37],[[[33,[21]],1,1],9],0,[[[20,[[0,[46,19,18]]]],20],10],[[[22,[[0,[46,21]]]],22],10],[[17,17],10],[[[24,[46]],24],10],[[[32,[[0,[46,19]]]],32],10],[[[44,[19]],47]],[17],[[[25,[[0,[48,49]]]]]],[[[26,[[0,[48,49]]]]]],[[[40,[39]],[41,[1]],39,1],[[9,[1]]]],[[35,[41,[1]],42,1],[[9,[1]]]],[[[44,[50]],51],52],[[[20,[[0,[50,19,18]]]],51],52],[[[22,[[0,[50,21]]]],51],52],[[17,51],52],[[17,51],52],[[[23,[[0,[50,19]],[0,[50,19]]]],51],52],[[[24,[50]],51],52],[[[25,[50,50]],51],52],[[[26,[50]],51],52],[[[28,[[0,[50,27]]]],51],52],[[[29,[[0,[50,27]]]],51],52],[[[30,[53]],51],52],[[[31,[[0,[19,50]],50]],51],52],[[[32,[[0,[50,19]]]],51],52],[[35,51],52],[[16,51],52],[[37,51],52],[54],[[[28,[27]],55]],[[[29,[27]],55]],[16],[37],[[16,1]],[[37,1]],[[16,1]],[[37,1]],0,0,[[]],[4,54],[[],54],[[]],[[[4,[[0,[18,19]]]]],[[56,[[0,[18,19]]]]]],[[]],[[]],[[]],[[[4,[39]]],[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[10]]],35],[[]],[4,16],[[]],[[],16],[[],37],[4,37],[[]],[47,[[44,[19]]]],[[],17],[[],[[25,[[0,[48,49]]]]]],[[],[[26,[[0,[48,49]]]]]],[[16,1],[[9,[0]]]],[[37,1],[[9,[0]]]],0,[[54,1]],[[[40,[39]],1]],[[37,1]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[19]]]],[24],[31],[[[31,[19,48]]]],[[[33,[21]]],1],[36,1],0,[[[20,[[0,[46,19,18]]]],20],10],[[[22,[[0,[46,21]]]],22],10],[[[24,[46]],24],10],[[[32,[[0,[46,19]]]],32],10],[[1,21],[[33,[21]]]],[1,36],[17,17],[17,17],[[17,17],[[9,[38]]]],[[[29,[27]]],9],[[[28,[27]]],9],[[[28,[27]]],9],[[[29,[27]]],9],0,[[[29,[27]]]],[[[28,[27]]]],[[[29,[27]]]],[[[28,[27]]]],[[[40,[39]],[41,[1]],1],[[9,[39]]]],[[[33,[21]],1,1],[[9,[10]]]],0,[[36,1],1],0,[[37,1]],[[17,1],17],[[17,1],17],[[17,1]],[[17,1],17],[[17,1],17],[[17,1]],0,[[17,17],17],[[17,17],17],[[17,17],17],[[17,17],17],[[17,17]],[[17,17]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[36,1,1],10],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[20,[[0,[19,18]]]],[0,[19,18]]]],[[[20,[[0,[19,18]]]]],9],[[],[[20,[[0,[19,18]]]]]],[[[20,[[0,[19,18]]]]],10],0,[[[22,[21]]]],[[[22,[21]]],9],[[[22,[21]]]],[[],[[22,[21]]]],[[[22,[21]]],10],[21,[[22,[21]]]],0,0,0,[[17,17],17],[[17,17]],[[17,10]],[[]],[[]],[[]],[[]],[17,1],[[17,1],10],[[17,[41,[1]]],[[9,[1]]]],[[17,[41,[1]]],[[9,[1]]]],[[]],[[]],[3,[[11,[[4,[57]],57]]]],[3,[[11,[[4,[57]],57]]]],[[17,[41,[1]]],58],[[17,1]],[[]],[[]],[[]],[[]],[[17,17],17],[[17,17]],[17,10],[17,1],[[17,[2,[1]]],58],[1,17],[59,9],[58,9],[59,9],[58,9],[17,17],[17],[[17,17],17],[[17,17]],[[17,1]],[[17,1]],[[17,1]],[[17,1],17],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1,17,60],17],[[17,1,17,60]],[[17,1,60],17],[[17,1,60]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1],17],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1,17,60],17],[[17,1,17,60]],[[17,1,60],17],[[17,1,60]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,1,17],17],[[17,1,17]],[[17,1],17],[[17,1]],[[17,17],17],[[17,17]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[3,[[4,[[4,[57]],57]]]],[3,[[4,[[4,[57]],57]]]],[[]],[[]],[[17,[41,[1]]],59],[[17,17],17],[[17,17]],0,[[[23,[[0,[18,19]],[0,[18,19]]]],[0,[18,19]],[0,[18,19]]]],[[[23,[[0,[18,19]],[0,[18,19]]]]],10],[[[23,[[0,[18,19]],[0,[18,19]]]]],1],[[],[[23,[[0,[18,19]],[0,[18,19]]]]]],[[[23,[[0,[18,19]],[0,[18,19]]]]],[[61,[[0,[18,19]],[0,[18,19]]]]]],[[[23,[[0,[18,19]],[0,[18,19]]]]],[[61,[[0,[18,19]],[0,[18,19]]]]]],[[[23,[[0,[18,19]],[0,[18,19]]]]]],[[[23,[[0,[18,19]],[0,[18,19]]]]]],0,0,[[]],[[]],[[[24,[19]]],1],[[]],[3,[[11,[[4,[57]],57]]]],[[[24,[19]],19]],[[[24,[19]],19,1]],[[]],[[]],[[[24,[19]]],10],[[[24,[19]]],[[62,[19]]]],[[[24,[19]]],1],[[[24,[19]]],9],[[[24,[19]]],9],[24,[[62,[19]]]],[[],[[24,[19]]]],[62,9],[[[24,[19]]]],[[[24,[19]],1]],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],0,[[[25,[[0,[48,49]]]]],10],[[[25,[[0,[48,49]]]],[0,[48,49]]],9],[[[25,[[0,[48,49]]]]],10],[[[25,[[0,[48,49]]]]],1],[[],[[25,[[0,[48,49]]]]]],[[[25,[[0,[48,49]]]]],9],0,[[[26,[[0,[48,49]]]]],10],[[[26,[[0,[48,49]]]],[0,[48,49]]],10],[[[26,[[0,[48,49]]]]],10],[[[26,[[0,[48,49]]]]],1],[[],[[26,[[0,[48,49]]]]]],[[[26,[[0,[48,49]]]]],10],0,[[63,1],10],[[63,1],[[9,[1]]]],[[63,1],[[9,[1]]]],[63,10],[63,1],[[63,1],[[9,[1]]]],[[63,1],[[9,[1]]]],[1,63],[[63,1],10],[63,1],0,0,[[],[[28,[27]]]],[27,[[28,[27]]]],0,[[],[[29,[27]]]],[27,[[29,[27]]]],0,0,[[[30,[53]]],1],[[[30,[53]],53],[[9,[53]]]],[[],[[30,[53]]]],[[]],[[]],[[[30,[53]]]],[[]],[[],64],0,0,[[]],[[]],[[[65,[18]]],[[65,[18]]]],[[]],[[[65,[19]],[65,[19]]],38],[[[65,[19]],[65,[19]]],[[9,[[65,[19]]]]]],[[[65,[46]],65],10],[[[65,[50]],51],52],[[]],[[[41,[[0,[19,18]]]]],[[65,[[0,[19,18]]]]]],[[[65,[19]]],9],[[[31,[[0,[19,18]],[0,[48,18]]]],[41,[[0,[19,18]]]],[0,[48,18]]]],[[[65,[19]],[65,[19]]],[[9,[[65,[19]]]]]],[[[65,[[0,[19,18]]]],[65,[[0,[19,18]]]]]],[[[65,[19]],[65,[19]]],10],[[]],[[[65,[19]],[65,[19]]],10],[[[65,[19]]],10],[[[31,[[0,[19,18]],[0,[48,18]]]]],10],[[[65,[19]],[65,[19]]],10],[[[65,[19]],[65,[19]]],10],[[[31,[[0,[19,18]],[0,[48,18]]]]],[[0,[8,66]]]],[[[65,[46]],65],10],[[],[[31,[[0,[19,18]],[0,[48,18]]]]]],[[[65,[19]],[65,[19]]],[[9,[38]]]],[[[31,[[0,[19,18]],[0,[48,18]]]],[41,[[0,[19,18]]]]],4],[[[65,[19]]],9],[[[31,[[0,[19,18]],[0,[48,18]]]],[41,[[0,[19,18]]]]],9],[[]],[[],13],[[],13],[[],14],[[]],0,[[[32,[[0,[18,50,19]]]]]],[[[32,[[0,[18,50,19]]]]],9],[[[32,[[0,[18,50,19]]]]],10],[[[32,[[0,[18,50,19]]]],[41,[[0,[18,50,19]]]]]],[[[32,[[0,[18,50,19]]]]],10],[[[32,[[0,[18,50,19]]]]],[[0,[8,66]]]],[[[32,[[0,[18,50,19]]]]],67],[[],[[32,[[0,[18,50,19]]]]]],[[[32,[[0,[18,50,19]]]],[41,[[0,[18,50,19]]]]]],0,[[[56,[[0,[18,19]]]],1,1]],0,[1,[[33,[21]]]],0,[[[34,[19]]],10],[[[34,[19]]],1],[[],[[34,[19]]]],[[[34,[19]]],9],[[[34,[19]]],[[9,[19]]]],[[[34,[19]],19]],[[[34,[19]],19]],0,[[35,1,42],1],[[35,42,1],[[9,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[[44,[19]]]],[[[68,[19]]]],[[[68,[19]]]],[[[68,[19]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[]],[[[44,[19]]],10],[[[44,[19]]],1],[[[69,[19]]],1],[[[44,[19]],[44,[19]]]],[[],[[44,[19]]]],[[[69,[19]]],9],[[[44,[19]]],9],[[[44,[19]]],[[9,[[68,[19]]]]]],[[[44,[19]]],[[9,[19]]]],[[[68,[19]]],19],[[[44,[19]],19]],[[[69,[19]]]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],[[]],0,0,[16,10],[16,1],[1,16],0,[37,10],[37,1],[1,37],0,0,[[],1],[[[40,[39]]],10],[[[40,[39]]],1],[[[40,[39]],1,39],1],[[[40,[39]],39,1],[[9,[1]]]],[1],[1,10],[[[40,[39]],[41,[1]],1,39],[[9,[39]]]],[[]],0,0,[[]],[[]],[[]],[[]],[70,70],[[]],[[1,3,3],[[4,[9]]]],0,[[1,[0,[8,18]],[0,[60,71]],[0,[60,71]],[0,[60,71]]]],0,[[70,70],10],[[70,51],52],[[]],[[[4,[4]]],72],[[]],[[[4,[1]]],70],0,[[]],[[]],[[70,70],10],[[1,8,[0,[60,71]],[0,[60,71]]],[[4,[1]]]],0,[[]],0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[]],[[]],[[1,3,3],[[4,[9]]]],[[1,[0,[8,18]],[0,[60,71]],[0,[60,71]],[0,[60,71]]]],0,[[70,1]],[[1,8,[0,[60,71]],[0,[60,71]]],[[4,[1]]]],0,[[72,18,3,3],[[4,[18]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[75,[[74,[73]]]],[75,[[74,[73]]]]],[[75,[[74,[73]]]]]],[[[75,[[74,[73]]]],[75,[[74,[73]]]]]],[[1,1],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[[75,[[0,[18,[74,[73]]]]]]],[[75,[[0,[18,[74,[73]]]]]]]],[76,76],[77,77],[78,78],[79,79],[80,80],[[[81,[[0,[18,19]]]]],[[81,[[0,[18,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,[8,8],0,[[],[[81,[[0,[45,19]]]]]],[82],0,[[]],[[[75,[[74,[73]]]],[75,[[74,[73]]]]],[[75,[[74,[73]]]]]],[[[75,[[74,[73]]]],[75,[[74,[73]]]]]],0,[[]],0,[[],9],[[[75,[[0,[46,[74,[73]]]]]],75],10],[[76,76],10],[[77,77],10],0,[[],9],[[],9],0,[[]],0,[[]],0,[[]],[[[75,[[74,[73]]]],51],52],[[[75,[[74,[73]]]],51],52],[[76,51],52],[[77,51],52],[[78,51],52],[[79,51],52],[[80,51],52],[[[81,[[0,[50,19]]]],51],52],[[]],[[]],[[]],[[]],[[]],[[]],[42,[[75,[[74,[73]]]]]],[82,[[75,[[74,[73]]]]]],[83,[[75,[[74,[73]]]]]],[64,[[75,[[74,[73]]]]]],[84,[[75,[[74,[73]]]]]],[85,[[75,[[74,[73]]]]]],[73,[[75,[[74,[73]]]]]],[86,[[75,[[74,[73]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,[[]],0,0,[[]],0,0,[[],9],0,[[]],0,[[42,42],[[4,[42]]]],0,[[]],0,[[[75,[[74,[73]]]],[75,[[74,[73]]]]],[[75,[[74,[73]]]]]],[[[75,[[74,[73]]]],[75,[[74,[73]]]]]],[[[75,[[74,[73]]]]],[[75,[[74,[73]]]]]],[[[75,[[0,[46,[74,[73]]]]]],75],10],[[76,76],10],[[77,77],10],[[[75,[[74,[73]]]]],[[75,[[74,[73]]]]]],[[],[[75,[[74,[73]]]]]],[1,1],0,0,0,0,0,[[]],[87,8],0,[87],[[87,3,3],13],0,[[[75,[[74,[73]]]],[75,[[74,[73]]]]],[[75,[[74,[73]]]]]],[[[75,[[74,[73]]]],[75,[[74,[73]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],88],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[75,[[74,[73]]]]]],[[1,1],8],0,[[]],0,0,0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[[90,[89]]],9],[[[90,[42]]],9],[[[90,[82]]],9],[[[90,[84]]],9],[[[90,[85]]],9],[[[90,[1]]],9],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],0,[[91,1],10],[1,91],[91,8],0,0,[42,76],[42,77],[[76,42],42],[[77,42],42],[[76,42],42],[[77,42],42],[8,8],0,[82],[[]],0,0,0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[[92,[85]]],[[9,[85]]]],[[[92,[84]]],[[9,[84]]]],[[[92,[82]]],[[9,[82]]]],[[[92,[42]]],[[9,[42]]]],[[[92,[89]]],[[9,[89]]]],[[[92,[1]]],[[9,[1]]]],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],0,[[],9],0,0,[[],9],[[],9],0,[[]],0,0,0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[[93,[1]]],9],[[[93,[85]]],9],[[[93,[84]]],9],[[[93,[82]]],9],[[[93,[42]]],9],[[[93,[89]]],9],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],0,0,0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[[94,[82]]],[[9,[82]]]],[[[94,[42]]],[[9,[42]]]],[[[94,[1]]],[[9,[1]]]],[[[94,[84]]],[[9,[84]]]],[[[94,[85]]],[[9,[85]]]],[[[94,[89]]],[[9,[89]]]],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],0,[[]],0,[[]],0,[1,78],[[78,[41,[1]]],1],[[78,[41,[1]]],1],0,[[95,42],42],[[[4,[42]],42],95],0,[[]],0,[[]],0,[[96,1],[[0,[8,66]]]],[[96,1],1],[[96,1],1],[[96,1],1],[[96,1],1],[[96,1],8],[[96,1],8],[[96,1],10],[[96,1],[[9,[1]]]],[1,96],[96,[[0,[8,66]]]],[[96,1,1],[[4,[1]]]],0,[[]],0,[[97,1,1],42],[[97,1],42],[[97,1],42],[[1,42],97],[[97,1,1],42],[[97,1],42],0,[[],9],0,[[]],[[42,42],[[4,[42]]]],0,[[]],0,[[[75,[[74,[73]]]]],73],[1,1],0,[[79,1],8],[[79,1],8],[[79,1],10],[1,79],[79,8],0,[[80,1],8],[[80,1],8],[[80,1],10],[1,80],[80,8],0,0,[[[81,[98]],98]],[[[81,[98]],98]],[[[81,[98]],98]],[[[81,[98]],98]],[[[81,[98]]]],[[]],[[[81,[98]]],98],[[[81,[98]]]],[[[81,[98]]]],[[],[[81,[98]]]],[[[81,[98]],98]],[[[81,[98]],[7,[98]]]],0,[[]],[87,8],[87],[[87,3,3],13],0,[[99,100,100]],[1,99],[99,[[9,[[4,[10]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[101,[[0,[18,48]]]]],[[101,[[0,[18,48]]]]]],[[[102,[[0,[18,19]]]]],[[102,[[0,[18,19]]]]]],[[[103,[[0,[18,48]]]]],[[103,[[0,[18,48]]]]]],[[]],[[]],[[]],[[[101,[[0,[46,48]]]],101],10],[[[102,[[0,[46,19]]]],102],10],[[[103,[[0,[46,48]]]],103],10],[[[101,[[0,[50,48]]]],51],52],[[[102,[[0,[50,19]]]],51],52],[[[103,[[0,[50,48]]]],51],52],[[]],[[[4,[48]]],[[101,[48]]]],[[]],[[[4,[19]]],[[102,[19]]]],[88,[[102,[104]]]],[[[4,[[0,[18,48]]]]],[[103,[[0,[18,48]]]]]],[[]],[[[102,[19]],1],1],[[]],[[]],[[]],0,[[[101,[[0,[46,48]]]],101],10],[[[102,[[0,[46,19]]]],102],10],[[[103,[[0,[46,48]]]],103],10],[[[101,[48]]],[[9,[1]]]],[[[101,[48]],48]],0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[[105,[48]]],9],[[[101,[48]]],[[105,[48]]]],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],0,[[[102,[19]]],[[4,[1]]]],[[[102,[19]]],[[4,[1]]]],[[[102,[19]]],8],[[[102,[104]],106],8],0,0,[[]],[[]],[[]],[3,[[11,[[4,[57]],57]]]],[[]],[[]],[[[107,[48]]],9],[[[103,[48]]],[[107,[48]]]],[[],13],[[],13],[[],14],[3,[[4,[[4,[57]],57]]]],[[]],[[[103,[48]],1],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[]],0,[[]],0,0,0,[3],0,[[[41,[1]]],1],[1,1],[[],1],[[[41,[1]]],43],[[1,1],9],0,0,[[],1],[[1,1],10],[[]],[[]],0,[[[41,[1]],1],[[9,[1]]]],0,[[]],0,[1],[1],[[],1],[[]],0,[1,9],0,[3,[[11,[19,4]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],1],[[],1],[[],1],0,[[]],0,[[]],[[]],[[]],0,[[]],[[]],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],[[4,[[4,[1]]]]]],[[],9],[[],9],[[],9],0,[[],10],[[]],[[]],[[]],0,0,[[[41,[1]],1],9],0,[[]],[[]],[[1,1],[[9,[10]]]],[1,1],[[]],[[]],0,[[]],[[]],[[]],[[],1],0,[1,[[4,[1]]]],[[1,1],10],0,[3,[[4,[4]]]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],[[]],0,0,0,[[]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[]],[[]],[[]],0,0,0,[3],0,0,0,[[]],[[]],[43,43],[[]],[[[41,[1]]],1],[[[41,[1]]],43],[43,1],[[43,43],10],[[43,51],52],[[]],[43,1],[43,1],[[]],[43,1],[43,1],[43,1],[[43,43],10],[[1,1,1],43],[[]],[[],13],[[],13],[[],14],[[]],0,[1,1],[[1,1],10],[[],10],[[],1],[1],[[],[[4,[[4,[1]]]]]],[1,1],[1,[[4,[1]]]],[[1,1],10],0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[],1],[[]],[[],10],[[],1],[[]],[[]],[[]],[[],1],0,[[[41,[1]],1],[[9,[1]]]],0,0,[[]],0,0,[1],[1],0,0,[1,9],0,[3,[[11,[19,4]]]],0,[[]],0,[[]],0,0,0,0,0,[[]],[[]],0,0,0,0,[[1,1],9],[[],10],[[],1],[1],[[1,1],[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],[[],9],[[]],[[]],[[]],0,0,[[[41,[1]],1],9],0,0,0,0,0,0,0,0,0,[[]],0,0,[[],1],[[]],[[],10],[[]],0,[3,[[4,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[108],[[[114,[[0,[19,48,109,110,111,112,113]]]],[0,[19,48,109,110,111,112,113]],[0,[19,48,109,110,111,112,113]]],[[0,[19,48,109,110,111,112,113]]]],[[[116,[[0,[19,48,109,110,111,115,113]]]],[0,[19,48,109,110,111,115,113]],[0,[19,48,109,110,111,115,113]]],[[0,[19,48,109,110,111,115,113]]]],[117],[118],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[41,[1]],1],[[2,[1]]]],0,[[],89],[[1,1]],[[1,[0,[[41,[1]],50]]]],[119,119],[120,120],[121,121],[122,122],[123,123],[[[124,[18]]],[[124,[18]]]],[[[125,[18]]],[[125,[18]]]],[[[108,[18]]],[[108,[18]]]],[[[114,[18]]],[[114,[18]]]],[[[116,[18]]],[[116,[18]]]],[[[126,[18]]],[[126,[18]]]],[[[117,[18]]],[[117,[18]]]],[[[127,[18,[0,[18,60]],[0,[18,60]]]]],[[127,[18,[0,[18,60]],[0,[18,60]]]]]],[[[118,[18,18,18,18,18,18,18]]],[[118,[18,18,18,18,18,18,18]]]],[[[128,[18]]],[[128,[18]]]],[[[129,[18]]],[[129,[18]]]],[[[130,[18]]],[[130,[18]]]],[[[131,[18]]],[[131,[18]]]],[132,132],[[[133,[18]]],[[133,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],124],[[],125],[[],[[108,[45]]]],[[],[[114,[45]]]],[[],[[116,[45]]]],[[],126],[[],[[117,[45]]]],[[],[[127,[45,[0,[45,60]],[0,[45,60]]]]]],[[],[[118,[45,45,45,45,45,45,45]]]],[[],128],[[],129],[[],130],[[],131],[[],132],0,[[[124,[46]],124],10],[[[125,[46]],125],10],[[[126,[46]],126],10],[[[128,[46]],128],10],[[[129,[46]],129],10],[[[130,[46]],130],10],[[[131,[46]],131],10],[[132,132],10],[[134,51],52],[[134,51],52],[[134,51],52],[[134,51],52],[[134,51],52],[[134,51],52],[[134,51],52],[[134,51],52],[[134,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[135,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[136,51],52],[[[124,[50]],51],52],[[[125,[50]],51],52],[[[108,[50]],51],52],[[[114,[50]],51],52],[[[116,[50]],51],52],[[[126,[50]],51],52],[[[117,[50]],51],52],[[[127,[50,[0,[50,60]],[0,[50,60]]]],51],52],[[[118,[50,50,50,50,50,50,50]],51],52],[[[128,[50]],51],52],[[[129,[50]],51],52],[[[130,[50]],51],52],[[[131,[50]],51],52],[[132,51],52],[[]],[[]],[[]],[[]],[88,137],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124],[125],[126],[[[127,[48,60,60]]],48],[128],[129],[130],[131],[132],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],0,[[[124,[46]],124],10],[[[125,[46]],125],10],[[[126,[46]],126],10],[[[128,[46]],128],10],[[[129,[46]],129],10],[[[130,[46]],130],10],[[[131,[46]],131],10],[124],[125],[126],[[[127,[48,60,60]],48,48],48],[128],[129],[130],[131],[132],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[108],[[[114,[[0,[19,48,109,110,111,112,113]]]]]],[[[116,[[0,[19,48,109,110,111,115,113]]]]]],[117],[118],[108],[[[114,[[0,[19,48,109,110,111,112,113]]]]]],[[[116,[[0,[19,48,109,110,111,115,113]]]]]],[117],[118],[133,138],0,[124,9],[131,9],[[]],[[]],0,[124],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],88],[[],88],[[],88],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],89],0,0,0,0,0,0,0,[119,85],[120,84],[121,82],[122,42],[123,89],[85,119],[84,120],[82,121],[42,122],[89,123],[[]],[[]],[[[41,[1]],1],[[2,[1]]]],[[1,1]],[[1,[0,[[41,[1]],50]]]],0,0,[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[60,60],[[127,[48,60,60]]]],0,[[127,127],118],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[132,106]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[139,89],140],[[141,89],142],[139,139],[140,140],[143,143],[141,141],[142,142],[144,144],[[]],[[]],[[]],[[]],[[]],[[]],[138,138],[139,143],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],88],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[89,142],[1,133],[[]],[139,139],[141,141],[138,138],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[145,145],10],[[145,51],52],[[145,51],52],[[]],[[],[[13,[137,146]]]],[137,106],[137,106],[137],[137],[[]],[137,[[13,[147]]]],[137,13],[[137,1],[[13,[4]]]],[106],[[],88],[[],13],[[],13],[[],14],[[]]],"p":[[15,"usize"],[3,"Range"],[8,"FnMut"],[3,"Vec"],[3,"ExactCover"],[15,"f64"],[3,"RangeInclusive"],[8,"Iterator"],[4,"Option"],[15,"bool"],[3,"BTreeMap"],[8,"StatefulPred"],[4,"Result"],[3,"TypeId"],[3,"Larsch"],[3,"VecActSegtree"],[3,"BitSet"],[8,"Clone"],[8,"Ord"],[3,"BicrementalMedian"],[8,"CommutativeGroup"],[3,"BicrementalMedianDev"],[3,"BTreeBimap"],[3,"BTreeMultiset"],[3,"CuckooHashMap"],[3,"CuckooHashSet"],[8,"Monoid"],[3,"FoldableDeque"],[3,"FoldableQueue"],[3,"IncrementalLineSet"],[3,"IntervalMap"],[3,"IntervalSet"],[3,"PotentializedUnionFind"],[3,"RemovableHeap"],[3,"RsDict"],[3,"UnionFind"],[3,"VecSegtree"],[4,"Ordering"],[8,"WmInt"],[3,"WaveletMatrix"],[8,"RangeBounds"],[15,"u64"],[3,"Count3wayResult"],[3,"SkewHeap"],[8,"Default"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Eq"],[8,"Hash"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"ChtInt"],[3,"DisjointSparseTable"],[3,"RangeFull"],[3,"N1Rmq"],[3,"Global"],[3,"Indices"],[3,"Words"],[8,"Fn"],[3,"Range"],[3,"Iter"],[3,"DecrementalUsizeSet"],[15,"i8"],[3,"Interval"],[8,"DoubleEndedIterator"],[4,"Bound"],[3,"PeekMut"],[3,"IntoIter"],[3,"FunctionalGraph"],[8,"Copy"],[3,"TreeCata"],[15,"i64"],[8,"AssocVal"],[3,"ModInt"],[3,"ConstDiv2"],[3,"ConstDiv"],[3,"HarmonicFloorSum"],[3,"SieveN2Plus1"],[3,"SieveN2PlusNPlus1"],[3,"SlopeFunction"],[15,"u32"],[15,"i32"],[15,"u16"],[15,"u8"],[15,"i16"],[15,"i128"],[3,"String"],[15,"u128"],[3,"CommonQuotStruct"],[3,"CompactSieve"],[3,"DivisorsStruct"],[3,"FactorsStruct"],[3,"FactorsDupStruct"],[3,"Interpolation"],[3,"LinearSieve"],[3,"ModFactorialBinom"],[8,"SlopeTrickInt"],[3,"TwoSat"],[15,"isize"],[3,"KmpSearcher"],[3,"SuffixArray"],[3,"ZSearcher"],[15,"char"],[3,"Occurrences"],[15,"str"],[3,"Occurrences"],[3,"OpAddOnOpAddCount"],[8,"Add"],[8,"AddAssoc"],[8,"Zero"],[8,"Min"],[8,"Sized"],[3,"OpAddOnOpMax"],[8,"Max"],[3,"OpAddOnOpMin"],[3,"OpAffineOnOpAddCount"],[3,"OpClosureOnOpClosure"],[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[4,"OpAdd"],[4,"OpAddCount"],[4,"OpAffine"],[3,"OpClosure"],[4,"OpGcd"],[4,"OpMax"],[4,"OpMin"],[4,"OpMul"],[4,"OpRollHash"],[3,"VecMarker"],[3,"SpaceSep"],[3,"PerLine"],[3,"StrSep"],[3,"Scanner"],[3,"VecOptionsMarker"],[3,"AsciiString"],[3,"AsciiStringOfCharset"],[3,"Ascii"],[3,"AsciiGen"],[3,"AsciiStringOfDistribution"],[3,"Permutation"],[3,"ScanTupleError"],[3,"Error"],[8,"Scan"],[8,"CommonQuot"],[8,"Divisors"],[8,"Factors"],[8,"FactorsDup"],[8,"CarmichaelLambda"],[8,"DigitSum"],[8,"DLog"],[8,"EquivMod"],[8,"EquivModIter"],[8,"EulerPhi"],[8,"Gcd"],[8,"GcdRecip"],[8,"Lcm"],[8,"LinearFloorSum"],[8,"ModAckermann"],[8,"ModOrd"],[8,"ModPow"],[8,"ModTetration"],[8,"Sqrt"],[8,"Act"],[8,"Ring"],[8,"SliceHash"],[8,"Bisect"],[8,"Push"],[8,"PushFront"],[8,"PushBack"],[8,"SetValue"],[8,"PotentialFunction"],[8,"MonoidAction"],[8,"Fold"],[8,"GetMut"],[8,"MulRecip"],[8,"Pop"],[8,"PopFront"],[8,"PopBack"],[8,"Quantile"],[8,"Magma"],[8,"Count"],[8,"DisjointSet"],[8,"Count3way"],[8,"ElasticSlice"],[8,"ExpandBack"],[8,"ExpandFront"],[8,"FindNth"],[8,"FoldBisect"],[8,"FoldBisectRev"],[8,"GroupBy"],[8,"Identity"],[8,"One"],[8,"PartialRecip"],[8,"Recip"],[8,"Field"],[8,"ShrinkBack"],[8,"ShrinkFront"],[8,"UsizeGroupBy"],[8,"RandomGenerator"],[8,"MakeMax"],[8,"MakeMin"],[8,"Pdep"],[8,"Pext"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[13,"_Marker"],[8,"GenOptions"],[8,"SeedableRngInspect"]]},\
"nekolib_notes":{"doc":"<code>nekolib</code> …","t":[0],"n":["range_add_on_the_fly"],"q":["nekolib_notes"],"d":["区間加算 (imos 法 + on-the-fly で遅延解消)。"],"i":[0],"f":[0],"p":[]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
