var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","t":"AAOAAOOOAAADDDIDDIIIFAFLLLLLLLLLLFFFLAAFAFFLLLLLLLLFAAFFLLLLLLLAKAAFAAFFFAFLLFFAAFAFAKLLKLLKLLALLLLLLLLLLLLLLLLLLLLLLAFFFDLLLFFFFFFIKFDLLFFFFFFFDDDLLLFLLFIIIAKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFDDDDDDDDDDDDDDDDDDDDDDDDLAAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLALLALLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALAALLLLLLLLLLLLLLLLLLLLLLLLADLLLLDLLLLLLIDDDKLLLLLLLLLLLLLLLLLLLLLKKLLLLLLKLLLLLLLLLLKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLDLLLLLLDLLLLLLLLLLDDLLDLLIDLLLKKLKKDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLDLDLDLLLLLLLDLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLDLLLDIKLLLLKKLKNNEDNEDNDALLLLLLLLLLLLLLLLLLFAFALLLLLLLLLLLLLLFAALLLLLFALLLLALLLLLLLLLLLLLLLLLLLLFFFDLNNENEDNLLLLLLLLFDLEDIIDDDIIIIIISIIIIIIDIIIDQQDIIIDNIDDIDGGIIIIIISQQQQSDDDDDIDDNSLLLLLLLLLLLLLLLLLLFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFKLAKLLLLLLLLLLLLLLLLLLLLLAKAAFAAFFFFFFFFKKLLKALAKLLLLLLLLLLLLLLLLLLAKAKLLLLLLAKKAKAKAKLLLLLLLLLLLLAKKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAKAKKLLALALLLLLLLLLLLLLLLLLLLLKAKAKAKAAAKAAKAKAFAKAKLLLLLLLLLLLLLLLLLLLLLLLKLLALFALLLLLLLLLLLLLLLLLALLLLLLAAAAKFAFFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFIKIDQLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLDDLLLLLLFDSISSFLFKFFFFFFFFFIKLIDLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDQLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKIIKKIKIDQLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLIDQLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLEIDNSSINSKKKKKLKKKKKISSISKKLKKKIIQQKKIKIKDLLLDLLIKIKIKDLLLLLLLLLLLLLIKIKDLLLLLLIKIKFIKDEDIDDGGIIIDSLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDLLLLDLLLLLDLLLLLDILLLLLKLLLLLLIKFFFDLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLALLLLLLLLLLLLLLLADDLLLLLLLLLLLLLLLLDLLLLLLDDLLLLLLLLLLLLLLLLLIQIIQIIIIIIIIIIIIIIIIIIIIIIIIIQIQQQQQQQIIIIIIIIQIQQQQQQQQQQIIIIIIIIIIIQIQQIIIIIIIIIIAKKALAKAAKAKKKKKAAKLKKAKAKAKKKAKAKKKLLLKKLAKAKLKAKLKKKKLKKKKLKKKAKKKKAAKALLKKKKKAKKKKALKAKKLIQKIQQKKKIIIKQIIIIIIIIIIIQIIIIQQLKKLKLLKKLLLIQQKIIDLLLLKKLLLLLLLLLLLLLLLLIKLLKKLKLKIIIQQIIIKKKKKLLKKKKIKIQKIIKKIQKIKIKIKIIIIQKKCQCIKLKKKKQQQQQQIIIIIIKKKKKKQIKIIIIIIIQIKQIKKKKIKRRRRRRRRRRRIIEENDDDNEDNDDENENENENENQIDDDDDDIIDDDDNNNNNNNLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLAAAAAAAAAAAAAALLLLLLLLLLLALLKKALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRFIDDDDDILLLLLLLLLLKKFFFIILLECNNECNNDDDECNNDDLDLECNNECNNECNNECNNECNLDDDDDDDDIQQDIIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIDDLLLLLLLLLLLLLLLLKLLLLL","n":["algo","ds","e","graph","math","new_monoid","rand_gen","rand_gen_builder","seq","traits","utils","Backward","ExactCover","Forward","Inversion","Larsch","Permutations","Rle","RleBy","RleByKey","bisect","bisect_","bisect_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","convolve","cycle_mu_lambda","cycle_nth","default","exact_cover","extremum","extremum","extremum_float","extremum_float","extremum_slice","from","from","from","from","from","from","group_by","group_by","hilbert_mo","hilbert_mo_","index_order","index_order_by","index_order_by_key","into","into","into","into","into","into_iter","into_iter","inversion","inversion","karatsuba","larsch","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next","next","next_permutation","ordered_hash","ordered_hash_","parallel_bisect","parallel_bisect","permutation","prev_permutation","rle","rle","rle","rle","rle_by","rle_by","rle_by","rle_by_key","rle_by_key","rle_by_key","tortoise_hare","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","vzip","vzip","vzip","window_bisect","window_bisect","bisect","bisect_slice","ExactCover","all","any","from_matrix","extremum","extremum_slice","extremum_float","hilbert_mo","index_order_by","index_order_by_key","Inversion","inversion","convolve","Larsch","new","solve","majority","minmax","minmax_by","minmax_by_key","mo","ordered_hash","parallel_bisect","Backward","Forward","Permutations","backward","forward","next","next_permutation","peek","prev","prev_permutation","Rle","RleBy","RleByKey","rle","rle","rle_by","rle_by_key","Rle","RleBy","RleByKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","equiv_mod","equiv_mod","equiv_mod","from","from","from","group_by","group_by","group_by","into","into","into","into_iter","into_iter","into_iter","new","new","new","next","next","next","rle","rle","rle","rle_by","rle_by","rle_by","rle_by_key","rle_by_key","rle_by_key","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","usize_group_by","usize_group_by","usize_group_by","vzip","vzip","vzip","cycle_mu_lambda","cycle_nth","window_bisect","BTreeBimap","BTreeMultiset","BicrementalMedian","BicrementalMedianDev","BinaryTrie","BitSet","CuckooHashMap","CuckooHashSet","DecrementalUsizeSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IncrementalLineSet","IntervalMap","IntervalSet","N1Rmq","PotentializedUnionFind","RemovableHeap","RsDict","SkewHeap","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","binary_trie","bit_set","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_bimap","btree_multiset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","count","count","count","count_3way","count_3way","cuckoo_hash_map","cuckoo_hash_set","decremental_usize_set","default","default","default","default","default","default","default","default","diff","disjoint_sparse_table","eq","eq","eq","eq","eq","extend","extend","extend","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","get_mut","get_mut","incremental_line_set","index","index","index","interval_map","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","len","len","n1_rmq","new","new","not","not","partial_cmp","pop","pop_back","pop_front","pop_front","potentialized_union_find","push","push_back","push_back","push_front","quantile","relate","removable_heap","repr","repr_diff","rs_dict","set_value","shl","shl","shl_assign","shr","shr","shr_assign","skew_heap","sub","sub","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","with","BinaryInt","BinaryTrie","Bits","Iter","bits","borrow","borrow","borrow_mut","borrow_mut","equiv_mod","fmt","from","from","group_by","group_by","insert","into","into","into_iter","into_iter","iter","iter_dup","new","next","next","next_back","pop","push","rle","rle","rle_by","rle_by","rle_by_key","rle_by_key","test","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","zero","BitSet","Indices","Words","and","and_assign","autofix","borrow","borrow","borrow_mut","borrow_mut","capacity","contains","find_first","find_last","from","from","group_by","group_by","indices","insert","into","into","into_iter","into_iter","ior","ior_assign","is_empty","len","new","new","next","next","next_back","next_back","not","not_assign","or","or_assign","remove","reserve","reserve_exact","rle","rle","rle_by","rle_by","rle_by_key","rle_by_key","shl","shl_and","shl_and_assign","shl_and_self","shl_and_self_assign","shl_assign","shl_ior","shl_ior_assign","shl_ior_self","shl_ior_self_assign","shl_op","shl_op_assign","shl_op_self","shl_op_self_assign","shl_or","shl_or_assign","shl_or_self","shl_or_self_assign","shl_sub","shl_sub_assign","shl_sub_self","shl_sub_self_assign","shl_xor","shl_xor_assign","shl_xor_self","shl_xor_self_assign","shr","shr_and","shr_and_assign","shr_and_self","shr_and_self_assign","shr_assign","shr_ior","shr_ior_assign","shr_ior_self","shr_ior_self_assign","shr_op","shr_op_assign","shr_op_self","shr_op_self_assign","shr_or","shr_or_assign","shr_or_self","shr_or_self_assign","shr_sub","shr_sub_assign","shr_sub_self","shr_sub_self_assign","shr_xor","shr_xor_assign","shr_xor_self","shr_xor_self_assign","sub","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","words","xor","xor_assign","BTreeBimap","insert","is_empty","len","new","range_left","range_right","remove_left","remove_right","BTreeMultiset","Iter","borrow","borrow_mut","count","from","group_by","insert","insert_n","into","into_iter","is_empty","iter","len","max","min","new","new","next","remove","remove_n","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","CuckooHashMap","contains_key","insert","is_empty","len","new","remove","CuckooHashSet","contains","insert","is_empty","len","new","remove","DecrementalUsizeSet","contains","greater","greater_equal","is_empty","len","less","less_equal","new","remove","universe_len","DisjointSparseTable","FoldableDeque","new","with","FoldableQueue","new","with","ChtInt","IncrementalLineSet","inner_len","min","new","on_line","oo","push","right","simplify","Interval","IntervalMap","borrow","borrow_mut","clone","clone_into","cmp","connection","eq","fmt","from","from_bounds","inf","insert","intersection","intersection_minus","intersects","into","is_connected_with","is_empty","is_empty","is_subset_of","is_superset_of","iter","new","partial_cmp","remove","sup","superset_of","to_owned","try_from","try_into","type_id","vzip","IntervalSet","clear","covering","has_range","insert","is_empty","iter","mex","new","remove","N1Rmq","min","PotentializedUnionFind","with_len","RemovableHeap","is_empty","len","new","peek","pop","push","remove","RsDict","rank","select","IntoIter","PeekMut","SkewHeap","borrow","borrow","borrow_mut","borrow_mut","clear","deref","deref_mut","drop","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","from","group_by","into","into","into_iter","is_empty","len","len","meld","new","next","peek","peek_mut","pop","pop","push","rle","rle_by","rle_by_key","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","vzip","vzip","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","WmInt","bitlen","is_empty","len","rank","select","set","test","xored_quantile","zero","Asc","Desc","Direction","FunctionalGraph","Heavy","HlEdge","Hld","Light","TreeCata","adjlist","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dijkstra","dijkstra_","dinic","dinic_","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_root","functional_graph","hld","into","into","into","into","into","scc","scc_","to_owned","to_owned","to_owned","to_owned","tree_cata","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","from_root","dijkstra","dinic","FunctionalGraph","mu_lambda","Asc","Desc","Direction","Heavy","HlEdge","Hld","Light","decode","encode","inner","lca_decoded","new","path","rev","subtree_range","scc","TreeCata","each_root","ApproxFrac","ButterflyCache","CarmichaelLambda","CommonQuot","CompactSieve","ConstDiv","ConstDiv2","CrtMod","CrtWrapping","DLog","DigitSum","Digits","Divisors","EXP","EquivMod","EquivModIter","EulerPhi","Factors","FactorsDup","FracApprox","FracApproxIter","FractionBisect","Gcd","GcdRecip","HarmonicFloorSum","I","I","Interpolation","IsCloseFloat","Lcm","LinearFloorSum","LinearSieve","Lower","MillerRabin","Mod1000000007","Mod998244353","ModAckermann","ModFactorialBinom","ModInt1000000007","ModInt998244353","ModIntBase","ModOrd","ModPow","ModTetration","Modulus","NttFriendly","ODD","Output","Output","Output","Output","PRIMITIVE_ROOT","Polynomial","SegmentedFactorSieve","SieveN2Plus1","SieveN2PlusNPlus1","SlopeFunction","Sqrt","StaticModInt","TwoSat","Upper","VALUE","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bit_binom","bit_binom_","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","butterfly","butterfly_cache","butterfly_inv","cache","cache","carmichael_lambda","carmichael_lambda","checked_recip","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_quot","common_quot","compact_sieve","const_div","continued_fraction","continued_fraction_","convolution","convolve","convolve_u128","convolve_u128_mod","convolve_u32_mod","convolve_u64","convolve_u64_mod","convolve_wrapping_u128","convolve_wrapping_u64","crt_mod","crt_wrapping","default","default","digit_pow_sum","digit_sum","digit_sum","digits","digits","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","eq","eq","eq","equiv_mod","equiv_mod","equiv_mod","euler_phi","euler_phi","factors","factors","factors_dup","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_approx","frac_approx_iter","frac_approx_iter_bound","fraction_bisect","fraction_bisect","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","garner","gcd","gcd","gcd_recip","gcd_recip","get","get","group_by","harmonic_floor_sum","hash","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_close","is_close_float","is_prime","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","miller_rabin","mod_ackermann","mod_ackermann","mod_factorial_binom","mod_ord","mod_ord","mod_pow","mod_pow","mod_recip_table_","mod_recip_table_prime","mod_tetration","mod_tetration","modint","modulus","modulus","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new_unchecked","new_unchecked","next","polynomial","pow","prime_pi","prime_pi_","product","product","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rle_by","rle_by_key","segmented_factor_sieve","shl","shl","shl_assign","shr","shr","shr_assign","sieve_n2_plus_1","sieve_n2_plus_n_plus_1","slope_function","sqrt","sqrt","sqrt_fraction","sqrt_fraction_","sqrt_fraction_fn","stern_brocot","stern_brocot_","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usize_group_by","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","bit_binom","CarmichaelLambda","carmichael_lambda","CommonQuot","CommonQuotStruct","Output","borrow","borrow_mut","common_quot","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","continued_fraction","ButterflyCache","EXP","NttFriendly","ODD","PRIMITIVE_ROOT","butterfly","butterfly_cache","butterfly_inv","cache","convolve","convolve_u128","convolve_u128_mod","convolve_u32_mod","convolve_u64","convolve_u64_acl","convolve_u64_mod","convolve_wrapping_u128","convolve_wrapping_u64","DigitSum","digit_pow_sum","digit_sum","Digits","DigitsIter","borrow","borrow_mut","digits","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","new","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","Divisors","DivisorsStruct","Output","borrow","borrow_mut","divisors","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","DLog","dlog","EquivMod","EquivModIter","equiv_mod","equiv_mod","EulerPhi","euler_phi","Factors","FactorsStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","FactorsDup","FactorsDupStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors_dup","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","ApproxFrac","FracApprox","FracApproxIter","Lower","ONE","SIGNED","SbInt","Upper","ZERO","abs","avg","frac_approx_iter","frac_approx_iter_bound","highest_frac","into_inner","lowest_frac","lt1","neg","steps","zero_frac","FractionBisect","ONE","SIGNED","SbInt","ZERO","abs","avg","fraction_bisect","lt1","neg","steps","CrtMod","CrtWrapping","I","I","crt_mod","crt_wrapping","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","Interpolation","interpolate","with","IsCloseFloat","is_close","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","divisors_sum","dp","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","recips","MillerRabin","is_prime","ModAckermann","mod_ackermann","ModFactorialBinom","binom","factorial","factorial_recip","new","perm","recip","ModOrd","mod_ord","ModPow","mod_pow","mod_recip_table_prime","ModTetration","mod_tetration","Barrett","DefaultId","DynamicModInt","DynamicModIntId","Mod1000000007","Mod998244353","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","add","add","add","add","add_assign","add_assign","barrett","barrett","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_recip","clone","clone","clone_into","clone_into","default","default","default","div","div","div","div","div_assign","div_assign","eq","eq","fmt","fmt","fmt","from","from","from","from","get","get","hash","hash","into","into","into","modulus","modulus","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","new","new","new_unchecked","new_unchecked","pow","product","product","recip","rem_euclid_u32","set_modulus","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Polynomial","circular","cos","differential","differentiate","div_mod","div_nth","eval","exp","fft_butterfly","fft_butterfly_double","fft_inv_butterfly","fode","get","integral","integrate","into_inner","is_zero","len","log","new","polyeqn","pow","recip","ref_truncated","reverse","reversed","sin","tan","truncate","truncated","prime_pi","SegmentedFactorSieve","divisors","factors","factors_dup","new","SieveN2Plus1","factors","factors_dup","is_prime","new","primes","SieveN2PlusNPlus1","factors","factors_dup","is_prime","new","primes","SlopeFunction","SlopeTrickInt","add_abs","add_const","add_left","add_right","argmin","doz","min","min_left","min_right","new","shift","window","Sqrt","sqrt","sqrt_fraction","sqrt_fraction_fn","stern_brocot","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","index","into","into","into","kmp","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","SuffixArray","from_bytes","from_hashed","into_inner","lcpa","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","z","Act","Action","AddAssoc","AddComm","Additive","Associative","Bisect","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","GroupBy","Hashed","Identity","Input","Input","Input","Input","Input","Input","Item","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","PotentialFunction","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","UsizeGroupBy","Zero","act","act","act","action","add","additive","additive","binop","bisect","bisect","count","count","count","count","count_3way","diff","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get_mut","get_mut","group_by","group_by","hash","id","is_empty","is_empty","is_empty","len","len","len","max","max","min","min","mul","mul_recip","multiplicative","multiplicative","neg","new","new","next","one","one","op","operand","operator","partial_recip","partition","pop","pop_back","pop_front","potential_function","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","relate","repr","repr_diff","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","usize_group_by","usize_group_by","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","operand","operator","AddAssoc","AddComm","Zero","zero","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","additive","id","mul","multiplicative","neg","one","op","partial_recip","recip","recip","zero","Bisect","Input","Output","bisect","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","fmt","from","ge","gt","into","le","lt","ne","new","to_owned","try_from","try_into","type_id","vzip","DisjointSet","count","equiv","is_empty","len","new","partition","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","GroupBy","group_by","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","CommutativeGroup","Item","Magma","PotentialFunction","diff","is_empty","len","new","relate","repr_diff","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","UsizeGroupBy","usize_group_by","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","MakeMax","MakeMin","OpAdd","OpAddCount","OpAddCountV","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAddV","OpAffine","OpAffineOnOpAddCount","OpAffineV","OpClosure","OpClosureOnOpClosure","OpGcd","OpGcdV","OpMax","OpMaxV","OpMin","OpMinV","OpMul","OpMulV","OpRollHash","OpRollHashV","Output","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PerLine","Pext","RandomGenerator","Scanner","SpaceSep","StrSep","VecMarker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","act","act","act","act","act","ascii","bitop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","charset","check_bounds","check_bounds_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","e_macro","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate","id","id","id","id","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","make_max","make_min","make_minmax","op","op","op","op","op","op","op","op","op","op_add","op_add_count","op_add_on_op_add_count","op_add_on_op_max","op_add_on_op_min","op_affine","op_affine_on_op_add_count","op_closure","op_closure_on_op_closure","op_gcd","op_max","op_min","op_mul","op_roll_hash","operand","operand","operand","operand","operand","operator","operator","operator","operator","operator","options","output","partial_recip","partial_recip","pdep","pext","rand_gen_macro","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","charset","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","Pext","get","get","get","get","get","new","new","new","new","new","pdep","pext","bounds_within","check_bounds","check_bounds_range","MakeMax","MakeMin","make_max","make_min","OpAdd","OpAddV","OpAddV","_Marker","OpAddCount","OpAddCountV","OpAddCountV","_Marker","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAffine","OpAffineV","OpAffineV","_Marker","OpAffineOnOpAddCount","OpClosure","new","OpClosureOnOpClosure","new","OpGcd","OpGcdV","OpGcdV","_Marker","OpMax","OpMaxV","OpMaxV","_Marker","OpMin","OpMinV","OpMinV","_Marker","OpMul","OpMulV","OpMulV","_Marker","OpRollHash","OpRollHashV","OpRollHashV","value_of","PerLine","SpaceSep","StrSep","Ascii","AsciiGen","AsciiString","AsciiStringOfCharset","AsciiStringOfDistribution","GenOptions","OptionType","Output","Permutation","RandomGenerator","SeedableRngInspect","VecMarker","VecOptionsMarker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","charset","charset","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","distinct","distribution","from","from","from","from","from","from","from","generate","inspect","into","into","into","into","into","into","into","new","new","options","options","options","sorted","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","provide","scan","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"nekolib"],[11,"nekolib::algo"],[119,"nekolib::algo::bisect_"],[121,"nekolib::algo::exact_cover"],[125,"nekolib::algo::extremum"],[127,"nekolib::algo::extremum_float"],[128,"nekolib::algo::hilbert_mo_"],[129,"nekolib::algo::index_order"],[131,"nekolib::algo::inversion"],[133,"nekolib::algo::karatsuba"],[134,"nekolib::algo::larsch"],[137,"nekolib::algo::majority_"],[138,"nekolib::algo::minmax"],[141,"nekolib::algo::mo"],[142,"nekolib::algo::ordered_hash_"],[143,"nekolib::algo::parallel_bisect"],[144,"nekolib::algo::permutation"],[154,"nekolib::algo::rle"],[161,"nekolib::algo::rle::rle"],[215,"nekolib::algo::tortoise_hare"],[217,"nekolib::algo::window_bisect"],[218,"nekolib::ds"],[640,"nekolib::ds::bicremental_median"],[645,"nekolib::ds::bicremental_median_dev"],[652,"nekolib::ds::binary_trie"],[698,"nekolib::ds::bit_set"],[812,"nekolib::ds::btree_bimap"],[821,"nekolib::ds::btree_multiset"],[850,"nekolib::ds::cuckoo_hash_map"],[857,"nekolib::ds::cuckoo_hash_set"],[864,"nekolib::ds::decremental_usize_set"],[875,"nekolib::ds::disjoint_sparse_table"],[876,"nekolib::ds::foldable_deque"],[879,"nekolib::ds::foldable_queue"],[882,"nekolib::ds::incremental_line_set"],[892,"nekolib::ds::interval_map"],[926,"nekolib::ds::interval_set"],[936,"nekolib::ds::n1_rmq"],[938,"nekolib::ds::potentialized_union_find"],[940,"nekolib::ds::removable_heap"],[948,"nekolib::ds::rs_dict"],[951,"nekolib::ds::skew_heap"],[1004,"nekolib::ds::union_find"],[1005,"nekolib::ds::vec_act_segtree"],[1009,"nekolib::ds::vec_segtree"],[1013,"nekolib::ds::wavelet_matrix"],[1024,"nekolib::graph"],[1105,"nekolib::graph::adjlist"],[1106,"nekolib::graph::dijkstra_"],[1107,"nekolib::graph::dinic_"],[1108,"nekolib::graph::functional_graph"],[1110,"nekolib::graph::hld"],[1125,"nekolib::graph::scc_"],[1126,"nekolib::graph::tree_cata"],[1128,"nekolib::math"],[1653,"nekolib::math::bit_binom_"],[1654,"nekolib::math::carmichael_lambda"],[1656,"nekolib::math::common_quot"],[1692,"nekolib::math::compact_sieve"],[1696,"nekolib::math::const_div"],[1704,"nekolib::math::continued_fraction_"],[1705,"nekolib::math::convolution"],[1723,"nekolib::math::digit_sum"],[1726,"nekolib::math::digits"],[1762,"nekolib::math::divisors"],[1798,"nekolib::math::dlog"],[1800,"nekolib::math::equiv_mod"],[1804,"nekolib::math::euler_phi"],[1806,"nekolib::math::factors"],[1842,"nekolib::math::factors_dup"],[1878,"nekolib::math::frac_approx"],[1898,"nekolib::math::fraction_bisect"],[1909,"nekolib::math::garner"],[1915,"nekolib::math::gcd"],[1917,"nekolib::math::gcd_recip"],[1919,"nekolib::math::harmonic_floor_sum"],[1923,"nekolib::math::interpolation"],[1926,"nekolib::math::is_close_float"],[1928,"nekolib::math::lcm"],[1930,"nekolib::math::linear_floor_sum"],[1932,"nekolib::math::linear_sieve"],[1946,"nekolib::math::miller_rabin"],[1948,"nekolib::math::mod_ackermann"],[1950,"nekolib::math::mod_factorial_binom"],[1957,"nekolib::math::mod_ord"],[1959,"nekolib::math::mod_pow"],[1961,"nekolib::math::mod_recip_table_"],[1962,"nekolib::math::mod_tetration"],[1964,"nekolib::math::modint"],[2064,"nekolib::math::polynomial"],[2095,"nekolib::math::prime_pi_"],[2096,"nekolib::math::segmented_factor_sieve"],[2101,"nekolib::math::sieve_n2_plus_1"],[2107,"nekolib::math::sieve_n2_plus_n_plus_1"],[2113,"nekolib::math::slope_function"],[2127,"nekolib::math::sqrt"],[2129,"nekolib::math::sqrt_fraction_"],[2131,"nekolib::math::stern_brocot_"],[2132,"nekolib::math::two_sat"],[2136,"nekolib::seq"],[2188,"nekolib::seq::kmp"],[2206,"nekolib::seq::suffix_array"],[2213,"nekolib::seq::z_algo"],[2232,"nekolib::traits"],[2408,"nekolib::traits::act"],[2411,"nekolib::traits::action"],[2417,"nekolib::traits::additive"],[2421,"nekolib::traits::binop"],[2452,"nekolib::traits::bisect"],[2456,"nekolib::traits::count"],[2481,"nekolib::traits::disjoint_set"],[2491,"nekolib::traits::elastic_slice"],[2510,"nekolib::traits::find_nth"],[2512,"nekolib::traits::fold"],[2515,"nekolib::traits::fold_bisect"],[2519,"nekolib::traits::get_mut"],[2522,"nekolib::traits::group_by"],[2524,"nekolib::traits::max"],[2526,"nekolib::traits::min"],[2528,"nekolib::traits::multiplicative"],[2535,"nekolib::traits::potential_function"],[2545,"nekolib::traits::push_pop"],[2563,"nekolib::traits::quantile"],[2566,"nekolib::traits::range_bounds"],[2573,"nekolib::traits::set_value"],[2576,"nekolib::traits::stateful_predicate"],[2582,"nekolib::traits::usize_group_by"],[2584,"nekolib::utils"],[3027,"nekolib::utils::ascii"],[3039,"nekolib::utils::bitop"],[3058,"nekolib::utils::buf_range"],[3061,"nekolib::utils::make_minmax"],[3065,"nekolib::utils::op_add"],[3069,"nekolib::utils::op_add_count"],[3073,"nekolib::utils::op_add_on_op_add_count"],[3074,"nekolib::utils::op_add_on_op_max"],[3075,"nekolib::utils::op_add_on_op_min"],[3076,"nekolib::utils::op_affine"],[3080,"nekolib::utils::op_affine_on_op_add_count"],[3081,"nekolib::utils::op_closure"],[3083,"nekolib::utils::op_closure_on_op_closure"],[3085,"nekolib::utils::op_gcd"],[3089,"nekolib::utils::op_max"],[3093,"nekolib::utils::op_min"],[3097,"nekolib::utils::op_mul"],[3101,"nekolib::utils::op_roll_hash"],[3105,"nekolib::utils::output"],[3108,"nekolib::utils::rand_gen_macro"],[3207,"nekolib::utils::scanner"]],"d":["アルゴリズムたち。","データ構造たち。","デバッグ用マクロ。","グラフに関するものたち。","数学関連のアルゴリズムたち。","","乱数生成マクロ。","","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","","Exact cover。","","","LARSCH algorithm。","","","","","二分探索で境界を探す。","二分探索。","二分探索で境界を探す。","","","","","","","","","","","Karatsuba 法。Карацуба 法？","周期検出を行う。","$n$ 項目を求める。","","Exact cover。","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Hilbert curve に基づく Mo’s algorithm。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","添字の順序。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Karatsuba 法。","LARSCH algorithm。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","","","辞書順で次の順列の生成。","座標圧縮。","座標圧縮。","並列二分探索。","並列二分探索を行う。","順列。","","","","","","","","","","","","周期検出。","","","","","","","","","","","","","","","","","","","","","","","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","Exact cover。","解を全て探す。","…","与えられた行列に対して前計算を行う。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","","","Karatsuba 法。Карацуба 法？","LARSCH algorithm。","","","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","座標圧縮。","並列二分探索を行う。","","","","","","","辞書順で次の順列の生成。","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","周期検出を行う。","$n$ 項目を求める。","尺取り法で、各始端に対して境界を探す。","双方向連想配列。","多重集合。","中央値の管理。","中央値と偏差の管理。","","Bit set。","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","直線の集合。","区間から値への対応づけ。","区間の集合。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","ポテンシャルつき union-find。","削除可能ヒープ。","rank/select 辞書。","","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","多重集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","","","","","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","直線の集合。","","","","区間から値への対応づけ。","区間の集合。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","線形 RMQ。","","","","","","","","","","ポテンシャルつき union-find。","","","","","","","削除可能ヒープ。","","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","","","","","","","","","","","","","","","","","","","","","","","","","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bit set。","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","","","","","","","","","多重集合。","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","","","","","","","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","","","","","","","<code>usize</code> の decremental set。","$i\\\\in S$ を返す。","$\\\\min_{j\\\\gt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\min_{j\\\\ge i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S=\\\\emptyset$ を返す。","$|S|$ を返す。","$\\\\max_{j\\\\lt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\max_{j\\\\le i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S\\\\gets\\\\{0, 1, \\\\dots, u-1\\\\}$ で初期化。","$S\\\\gets S\\\\setminus\\\\{i\\\\}$ で更新する。","$u$ を返す。","disjoint sparse table。","fold 可能両端キュー。","","","fold 可能キュー。","","","","直線の集合。","","","","","","","","","","区間から値への対応づけ。","","","","","","","","","Returns the argument unchanged.","","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{\\\\cup} (k…","","","","Calls <code>U::from(self)</code>.","","","$S=\\\\emptyset$ を返す。","","","","$S\\\\gets\\\\emptyset$ で初期化する。","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{…","","$T\\\\subseteq S$ かつ <code>b</code> を含む $T$ …","","","","","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","","ポテンシャルつき union-find。","","削除可能ヒープ。","空のとき <code>true</code> を返す。","要素数を返す。","空のヒープで初期化する。","最大値を取得する。","最大値を取り出す。","要素を追加する。","要素を削除する。","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","","","","","","","","","","","function graph。","","","HL 分解。","","全方位木 DP。","","","","","","","","","","","","","","","","","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","functional graph。","HL 分解。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","lowlink に基づく強連結成分分解。","強連結成分分解。","","","","","全方位木 DP。","","","","","","","","","","","","","","","","","","","","","","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","function graph。","$(\\\\mu_i, \\\\lambda_i)$ を返す。","","","","","","HL 分解。","","","","","","","","","","lowlink に基づく強連結成分分解。","全方位木 DP。","","","","Carmichael の $\\\\lambda$ 関数。","商が共通の区間の列挙。","篩。","定数除算。","定数除算。","","","離散対数。","桁和。","","約数列挙。","","Chinese remaindering。","Chinese remaindering。","Euler の $\\\\varphi$ 関数。","素因数分解。","素因数分解。","","","","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","","Lagrange 補間。","","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","","","","","Ackermann 関数。","法 $p$ での二項係数。","","","","位数。","冪乗。","tetration。","","","","","","","","","多項式。","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","2-SAT。","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","組合せのビット表現。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","","","","","","","","商が共通の区間の列挙。","","篩。","定数除算。","連分数展開。","連分数展開。","","","","","","","","","","","","","","","桁和。","","","","","","","","","","","","","","","","","","","","","","約数列挙。","","離散対数。","","","","","","","","Chinese remaindering","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","素因数分解。","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","最大公約数。","","最大公約数と逆元。","","","","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","Lagrange 補間。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","","Ackermann 関数。","","法 $p$ での二項係数。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","多項式。","","素数の数え上げ。","素数の数え上げ。","","","","","","","","","","","","","","","","","","","","","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","平方根の連分数展開。","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","Stern–Brocot tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","Carmichael の $\\\\lambda$ 関数。","","商が共通の区間の列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","篩。","","","","定数除算。","定数除算。","","","","","","","連分数展開。","","","","","","","","","","","","","","","","","","","桁和。","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","約数列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","離散対数。","","Chinese remaindering。","Chinese remaindering。","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","Lagrange 補間。","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$n$ の約数の総和を返す。","最小素因数を用いて DP を行う。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","法 $m$ での逆元を返す。","","","Ackermann 関数。","","法 $p$ での二項係数。","$i!/(j!\\\\cdot (i-j)!) \\\\bmod p$ を返す。","$i! \\\\bmod p$ を返す。","$i!^{-1} \\\\bmod p$ を返す。","$(0!, 1!, \\\\dots, n!)$ と $(0!^{-1}, 1!^{-1}, \\\\dots, …","$i!/(i-j)! \\\\bmod p$ を返す。","$i^{-1} \\\\bmod p$ を返す。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","多項式。","$[x^0] f(x) = 0$ かつ $[x^0] g(x) = 0$ なる $h(x) = …","$\\\\cos(f(x)) \\\\bmod x^n$ を返す。","$f&#39;(x)$ を返す。","$f(x) \\\\gets f&#39;(x)$ で更新する。","$(f(x) / g(x), f(x) \\\\bmod g(x))$ を返す。","$[x^n] f(x) \\\\cdot g(x)^{-1}$ を返す。","","$[x^0] f(x) = 0$ なる $f$ に対し、$\\\\exp(f(x)) \\\\bmod …","$F_{\\\\omega}[f]$ を返す。","$F_{\\\\omega^2}[f]$ を $F_{\\\\omega}[f]$ で更新する。","$F_{\\\\omega}^{-1}[f]$ を返す。","<code>self</code> を初期解とし、$y&#39; = f(y, x)$ を満たす …","$[x^i] f(x)$ を返す。","$\\\\int_0^x f(t)\\\\, \\\\dd{t}$ を返す。","$f(x) \\\\gets \\\\int_0^x f(t)\\\\, \\\\dd{t}$ で更新する。","$([x^i] f(x))_{i=0}^{\\\\deg(f)}$ を返す。","$f(x) = 0$ を返す。","$\\\\deg(f)-1$ を返す。ただし $f(x) = 0$ のときは …","$[x^0] f(x) = 1$ なる $f$ に対し、$\\\\log(f(x)) \\\\bmod …","$f(x) = 0$ を返す。","<code>self</code> を初期解とし、$f(y) = 0$ を満たす $y$ …","$f(x)^k \\\\bmod x^n$ を返す。","$f(x)\\\\cdot g(x) \\\\equiv 1\\\\pmod{x^n}$ なる $g(x) \\\\bmod …","$f(x)\\\\bmod x^n$ を返す。","$f(x) \\\\gets f(x)^{\\\\mathrm{R}}$ で更新する。","$f(x)^{\\\\mathrm{R}} \\\\triangleq x^{\\\\deg(f)}\\\\cdot f(1/x)$ …","$\\\\sin(f(x)) \\\\bmod x^n$ を返す。","$\\\\tan(f(x)) \\\\bmod x^n$ を返す。","$f(x) \\\\gets f(x) \\\\bmod x^n$ で更新する。","$f(x)\\\\bmod x^n$ を返す。","素数の数え上げ。","","","","","","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","$n^2+1$ の形の素数を返す。","$n^2+n+1$ 型素数の篩。","$n^2+n+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+n+1$ が素数のとき真を返す。","初期化する。","$n^2+n+1$ の形の素数を返す。","区分線形凸関数。","","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","平方根。","","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KMP 法。","","","接尾辞配列。","","","","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","接尾辞配列。","","","自身を消費し、内部表現を返す。","高さ配列を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","二分探索。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","イテレータのグルーピング。","","単位元を持つ。","","","","","代入される型。","","要素の型。","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","ポテンシャル関数。","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","イテレータのグルーピング。","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","","代数的構造に関するトレイトたちです。","二分探索。","","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","ポテンシャルの差を求める。","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合の要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","分割を返す。","","","","ポテンシャル関数。","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","ポテンシャルの差を定義する。","$u$ を含む集合の代表元を返す。","代表元とのポテンシャルの差を求める。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","イテレータのグルーピング。","Examples","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","","","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","","単位元を返す。","積 $x \\\\ast y$ を返す。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","加法 $\\\\circ$ の単位元 $0$ を返す。","二分探索。","","","","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","分割を返す。","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","","要素の型。","","ポテンシャル関数。","ポテンシャルの差を求める。","集合が空であれば <code>true</code> を返す。","集合の要素数 $n$ を返す。","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","ポテンシャルの差を定義する。","代表元とのポテンシャルの差を求める。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","イテレータのグルーピング。","Examples","","","","","","","","","","","","","","和を返す演算を持つ。","","","","","","","","","","任意の結合的な演算を持つ。","","","","最大値を返す演算を持つ。","","最小値を返す演算を持つ。","","積を返す演算を持つ。","","…","","","","","","","","","形式つき出力（改行区切り）。","","","スキャナ。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","","境界チェックを行う。","境界チェックを行う。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","加法に関する wrapper クラス。","加法に関する wrapper クラス。","","","","加法に関する wrapper クラス。","","クロージャの wrapper クラス。","","","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","","","","","","","","","形式つき出力。","","","","","乱数生成マクロ。","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","境界チェックを行う。","境界チェックを行う。","","","","","和を返す演算を持つ。","","","","","","","","","","","","","","","","任意の結合的な演算を持つ。","","","","","","","","最大値を返す演算を持つ。","","","","最小値を返す演算を持つ。","","","","積を返す演算を持つ。","","","","…","","","","形式つき出力（改行区切り）。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","スキャナ。","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,16,28,29,12,38,16,28,29,12,0,0,0,12,0,0,0,0,0,0,38,16,16,28,29,12,28,29,0,0,0,0,0,38,16,28,29,12,28,29,0,198,0,0,0,0,0,0,0,0,0,0,28,29,0,0,0,0,0,0,0,0,199,28,29,200,28,29,201,28,29,0,38,16,28,29,12,38,16,28,29,12,38,16,28,29,12,28,29,38,16,28,29,12,0,0,0,0,0,12,12,12,0,0,0,0,0,0,0,198,0,0,38,38,0,0,0,0,0,0,0,0,0,0,16,16,16,0,16,16,0,0,0,0,0,199,200,201,0,0,0,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,0,0,44,46,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,44,46,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,43,64,64,59,60,64,64,0,0,0,66,43,47,52,53,54,41,61,57,0,44,46,43,48,56,66,43,49,50,64,59,66,44,46,72,43,43,47,48,49,50,52,53,54,55,56,59,41,61,74,52,53,41,61,41,61,41,61,0,0,87,74,74,74,76,76,66,64,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,59,60,41,41,41,61,61,61,66,43,49,50,41,61,0,74,64,61,0,0,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,66,48,55,55,57,60,0,57,60,43,43,43,53,52,52,53,0,53,52,53,52,64,57,0,60,57,0,61,43,43,43,43,43,43,0,43,43,43,43,43,43,44,46,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,0,60,0,0,87,74,76,66,64,44,46,72,43,47,48,49,50,52,53,54,55,56,57,58,59,60,41,61,0,0,44,44,44,44,0,46,46,46,46,46,46,0,0,0,0,79,77,78,77,78,78,78,77,78,77,78,72,77,78,77,78,72,72,72,77,78,78,79,79,77,78,77,78,77,78,79,77,78,77,78,77,78,77,78,77,78,79,0,0,0,43,43,43,83,82,83,82,43,43,43,43,83,82,83,82,43,43,83,82,83,82,43,43,43,43,82,43,83,82,83,82,43,43,43,43,43,43,43,83,82,83,82,83,82,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,83,82,83,82,83,82,83,82,83,82,43,43,43,0,47,47,47,47,47,47,47,47,0,0,86,86,48,86,86,48,48,86,86,48,48,48,48,48,86,48,86,48,48,86,86,86,86,86,86,86,86,0,49,49,49,49,49,49,0,50,50,50,50,50,50,0,87,87,87,87,87,87,87,87,87,87,0,0,52,52,0,53,53,0,0,54,54,54,73,73,54,73,73,0,0,89,89,89,89,89,89,89,89,89,89,89,55,89,89,89,89,89,89,55,89,89,55,55,89,55,89,55,89,89,89,89,89,0,56,56,56,56,56,56,56,56,56,0,76,0,57,0,58,58,58,58,58,58,58,0,59,59,0,0,0,92,91,92,91,66,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,91,92,92,91,92,66,66,92,66,66,92,66,66,66,91,66,92,92,92,92,92,91,92,91,92,91,92,92,91,0,0,41,41,41,0,61,61,61,0,0,63,64,64,64,64,63,63,64,63,96,96,0,0,95,0,0,95,0,0,98,93,94,95,96,98,93,94,95,96,93,94,95,96,93,94,95,96,0,0,0,0,93,95,96,93,94,95,96,98,98,93,93,94,95,96,0,0,0,98,93,94,95,96,0,0,93,94,95,96,0,98,93,94,95,96,98,93,94,95,96,98,93,94,95,96,98,93,94,95,96,0,0,0,0,93,96,96,0,95,0,0,95,94,94,95,94,94,94,95,94,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,202,203,0,0,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,101,204,205,206,207,101,0,0,0,0,0,0,0,0,116,99,100,100,100,100,102,102,102,102,102,102,102,102,100,100,102,102,102,102,0,0,102,102,102,102,102,102,102,102,102,102,102,102,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,0,101,0,101,105,0,208,209,106,107,100,105,108,102,109,110,111,112,106,107,100,105,108,102,109,110,111,112,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,202,203,100,112,210,0,210,0,211,100,100,100,100,102,102,102,102,102,102,102,102,100,100,102,102,102,102,0,205,0,212,106,107,100,105,108,102,0,213,214,0,215,0,206,0,207,116,106,107,100,100,102,102,109,117,110,111,112,0,216,216,0,217,131,103,118,116,116,135,136,137,144,106,107,100,100,105,108,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,109,117,110,111,112,0,0,182,0,218,209,100,118,0,100,0,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,118,219,0,220,0,221,0,222,0,0,0,223,0,0,224,0,225,0,0,0,226,0,209,100,100,100,100,100,102,102,102,102,102,102,102,102,100,100,102,102,102,102,100,102,102,209,209,100,118,0,209,0,0,100,100,209,102,102,102,102,102,102,102,102,102,102,102,102,118,118,0,102,102,102,102,102,102,0,0,0,0,227,0,0,0,0,0,100,100,100,100,102,102,102,102,102,102,102,102,100,100,102,102,102,102,100,100,106,107,100,105,108,102,109,110,111,112,100,102,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,0,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,118,131,103,118,116,135,136,137,144,106,107,100,105,108,102,109,117,110,111,112,0,0,208,0,0,204,130,130,204,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,131,131,131,0,0,106,107,106,107,106,107,0,0,101,0,101,101,0,101,0,101,0,0,0,0,0,0,0,0,0,0,210,210,0,0,114,114,211,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,0,205,132,132,205,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,212,0,0,213,214,0,215,0,0,206,133,133,133,133,133,133,133,133,133,133,133,133,133,133,206,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,207,134,134,134,134,134,134,134,134,134,134,134,134,134,134,207,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,0,0,0,116,119,119,0,116,119,119,119,216,216,119,116,119,119,119,119,119,0,228,228,0,228,228,228,217,228,228,228,0,0,202,203,202,203,0,182,0,218,0,109,109,109,0,135,135,0,219,0,221,0,222,0,136,136,136,136,136,136,136,136,136,136,136,136,136,0,220,0,223,0,137,137,137,137,137,137,0,224,0,225,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,99,139,139,139,139,139,139,138,141,140,139,141,140,139,141,209,139,141,139,141,140,140,139,139,139,139,139,139,139,139,141,139,139,141,140,139,139,141,209,139,139,141,140,139,141,209,139,139,139,139,139,139,139,139,139,209,140,209,139,209,139,139,209,120,139,139,139,139,139,139,139,139,139,139,141,139,140,139,141,140,139,141,140,139,141,140,139,141,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,117,117,117,117,0,110,110,110,110,110,0,111,111,111,111,111,0,0,112,112,112,112,112,143,112,112,112,112,112,112,0,227,0,0,0,0,144,144,144,0,0,0,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,145,145,146,146,146,147,147,146,145,146,147,0,145,145,0,145,146,147,145,146,147,145,146,147,145,146,147,145,146,147,0,0,0,149,149,149,149,149,149,149,145,149,149,149,149,149,149,149,149,0,146,146,146,146,146,146,0,0,151,151,151,151,151,151,151,147,151,151,151,151,151,151,151,151,147,0,229,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,231,232,233,234,235,31,236,0,0,0,0,0,0,0,0,230,0,40,40,231,237,238,185,239,240,241,242,0,0,0,0,0,0,0,0,0,0,0,24,0,243,230,0,0,0,0,0,0,0,0,0,0,0,229,40,0,230,0,230,0,0,231,0,244,245,31,246,236,0,0,19,245,21,20,0,247,0,237,0,248,249,19,0,238,0,250,24,251,245,19,236,245,236,19,0,158,0,156,230,185,0,230,230,245,236,31,160,230,243,40,40,252,245,239,241,240,0,31,232,234,233,0,0,242,0,253,254,236,245,236,19,31,0,235,23,22,19,0,245,245,0,255,153,230,0,229,229,0,40,40,40,40,40,0,0,0,153,230,0,0,0,0,0,0,0,0,0,0,0,230,0,0,0,0,243,230,230,230,251,230,230,230,230,243,252,253,254,230,0,231,231,231,0,0,0,65,65,65,65,244,246,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,245,245,245,245,245,245,245,245,245,0,0,0,24,24,0,0,0,19,21,20,19,24,19,19,19,23,22,19,0,247,0,237,237,0,0,248,249,0,238,238,0,250,0,158,0,156,0,0,0,0,185,185,160,0,236,0,0,236,236,236,236,236,236,232,233,234,239,240,241,0,0,0,0,0,0,239,241,240,232,234,233,242,0,242,0,0,0,0,0,0,0,235,0,235,31,0,31,31,31,31,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,168,0,0,170,0,0,0,172,0,173,0,174,0,175,0,176,256,0,0,0,0,0,0,0,0,0,0,0,0,0,168,169,170,172,173,174,175,155,157,159,161,162,0,0,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,0,0,0,0,0,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,168,169,155,157,159,170,161,171,162,172,173,174,175,176,0,168,169,170,172,173,174,175,176,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,168,169,155,157,159,170,161,171,162,172,173,174,175,176,178,179,180,181,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,256,168,169,170,171,172,173,174,175,176,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,257,258,0,168,169,170,171,172,173,174,175,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,157,159,161,162,155,157,159,161,162,177,0,168,175,259,260,0,168,0,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,178,179,180,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,178,179,180,181,163,164,165,166,167,168,169,155,157,159,170,161,171,162,172,173,174,175,176,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,164,165,166,167,163,164,165,166,167,259,260,0,0,0,0,0,257,258,0,0,168,168,0,0,169,169,0,0,0,0,0,170,170,0,0,171,0,162,0,0,172,172,0,0,173,173,0,0,174,174,0,0,175,175,0,0,176,176,0,0,0,0,0,0,0,0,0,261,256,0,0,0,0,0,183,186,187,190,188,189,191,183,186,187,190,188,189,191,186,188,186,187,190,188,189,191,186,187,190,188,189,191,183,186,183,186,187,190,188,189,191,256,262,183,186,187,190,188,189,191,189,177,261,186,188,183,186,187,190,188,189,191,183,186,187,190,188,189,191,183,186,187,190,188,189,191,183,186,187,190,188,189,191,183,186,187,190,188,189,191,194,0,0,0,192,192,192,192,192,192,181,181,181,181,181,192,181,181,181,192,194,192,192,192,192,192],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],1],0,[3,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[9,[[0,[4,5,6,7,8]]]]]],[[[0,[10,8]],11]],[[[0,[10,8]],11,1],[[0,[10,8]]]],[[],12],0,0,[[[2,[1]],3]],0,[[[14,[13]],13,3]],[3],[[]],[[]],[[[9,[15]]],[[16,[15]]]],[[]],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[3,[[18,[15,[9,[17]],17]]]],[[[0,[19,20,21,22,23,24]],9],25],0,0,[3,[[9,[1]]]],[3,[[9,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],26],0,0,[[],[[27,[10]]]],0,0,[[],27],[3,27],[3,27],0,[[[0,[19,20,21,22,23,24]],9,[27,[1]]],9],[[[28,[[0,[8,15]]]]],27],[[[29,[[0,[8,15]]]]],27],[[],30],[[],[[18,[15,1]]]],0,0,[[31,9],[[9,[1]]]],0,[[],30],0,[[],32],[[],32],[[],32],[3,[[33,[3]]]],[3,[[33,[3]]]],[3,[[33,[3]]]],[3,[[34,[3]]]],[3,[[34,[3]]]],[3,[[34,[3]]]],0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[3,[[9,[[9,[17]],17]]]],[3,[[9,[[9,[17]],17]]]],[[]],[[]],[[]],[[]],[[]],0,[[[0,[19,21,22,24]],11],[[9,[1]]]],[[[2,[1]],3],1],[3,1],0,[12,[[9,[[9,[1]]]]]],[12,[[27,[[9,[1]]]]]],[[[9,[[9,[1]]]]],12],[[[2,[1]],3]],[3],[[[14,[13]],13,3]],[[[0,[19,20,21,22,23,24]],9],25],[3,[[9,[1]]]],[3,[[9,[1]]]],0,[[],26],[[],[[9,[[0,[4,5,6,7,8]]]]]],0,[[1,1,[0,[37,15]],11,11],[[38,[[0,[37,15]],11,11]]]],[[[38,[[0,[37,15]],11,11]]]],[[],[[27,[10]]]],[[],27],[3,27],[3,27],[[[0,[19,20,21,22,23,24]],9,[27,[1]]],9],[[],[[18,[15,1]]]],[[31,9],[[9,[1]]]],0,0,0,[[[16,[[0,[15,8]]]],1],[[29,[[0,[15,8]]]]]],[[[16,[[0,[15,8]]]],1],[[28,[[0,[15,8]]]]]],[[[16,[15]]],30],[[],30],[[[16,[15]]]],[[[16,[15]]],30],[[],30],0,0,0,0,[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[]],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[3,[[18,[15,[9,[17]],17]]]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[32,[39,25]]]],[[25,3],[[33,[25,3]]]],[[25,3],[[34,[25,3]]]],[[[32,[39,25]]],27],[[[33,[25,3]]],27],[[[34,[25,3]]],27],[[],32],[[],32],[[],32],[3,[[33,[3]]]],[3,[[33,[3]]]],[3,[[33,[3]]]],[3,[[34,[3]]]],[3,[[34,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[3,[[9,[[9,[17]],17]]]],[3,[[9,[[9,[17]],17]]]],[3,[[9,[[9,[17]],17]]]],[[]],[[]],[[]],[[[0,[10,8]],11]],[[[0,[10,8]],11,1],[[0,[10,8]]]],[[[0,[19,21,22,24]],11],[[9,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[41,[40]],[42,[1]]]],0,0,0,0,[[43,43],43],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43]],[[43,43]],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43]],[[43,43]],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43]],[[43,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[44,[[0,[8,15,8]]]]],[[44,[[0,[8,15,8]]]]]],[[[46,[[0,[8,45]]]]],[[46,[[0,[8,45]]]]]],[43,43],[[[47,[[0,[8,15]],[0,[8,15]]]]],[[47,[[0,[8,15]],[0,[8,15]]]]]],[[[48,[8]]],[[48,[8]]]],[[[49,[8,8]]],[[49,[8,8]]]],[[[50,[8]]],[[50,[8]]]],[[[52,[[0,[8,51]]]]],[[52,[[0,[8,51]]]]]],[[[53,[[0,[8,51]]]]],[[53,[[0,[8,51]]]]]],[[[54,[[0,[8,15]]]]],[[54,[[0,[8,15]]]]]],[[[55,[8,8]]],[[55,[8,8]]]],[[[56,[[0,[8,15]]]]],[[56,[[0,[8,15]]]]]],[[[57,[[0,[8,45]]]]],[[57,[[0,[8,45]]]]]],[[[58,[8]]],[[58,[8]]]],[59,59],[60,60],[[[41,[[0,[40,8]]]]],[[41,[[0,[40,8]]]]]],[[[61,[[0,[51,8]]]]],[[61,[[0,[51,8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[43,43],62],[[[64,[63]],[42,[1]],[14,[63]]],1],[[[64,[63]],[42,[1]],63],1],[[59,[42,[1]],26],1],[[60,1],1],[[[64,[63]],[42,[1]],63],65],[[[64,[63]],[42,[1]],[14,[63]]],65],0,0,0,[[],[[66,[15]]]],[[],43],[[],[[47,[[0,[7,15]],[0,[7,15]]]]]],[[],[[52,[[0,[7,51]]]]]],[[],[[53,[[0,[7,51]]]]]],[[],[[54,[[0,[7,15]]]]]],[[],[[41,[[0,[40,7]]]]]],[[],[[61,[[0,[51,7]]]]]],[[[57,[45]],1,1],27],0,[[[44,[[0,[39,15,8]]]],[44,[[0,[39,15,8]]]]],30],[[[46,[[0,[39,45]]]],[46,[[0,[39,45]]]]],30],[[43,43],30],[[[48,[39]],[48,[39]]],30],[[[56,[[0,[39,15]]]],[56,[[0,[39,15]]]]],30],[[[66,[15]],67]],[[43,67]],[[[49,[[0,[10,68]]]],67]],[[[50,[[0,[10,68]]]],67]],[[[64,[63]],[42,[1]],63,1],[[27,[1]]]],[[59,[42,[1]],26,1],[[27,[1]]]],[[[66,[69]],70],71],[[[44,[[0,[69,15,8]]]],70],71],[[[46,[[0,[69,45]]]],70],71],[[[72,[69]],70],71],[[43,70],71],[[43,70],71],[[[47,[[0,[69,15]],[0,[69,15]]]],70],71],[[[48,[69]],70],71],[[[49,[69,69]],70],71],[[[50,[69]],70],71],[[[52,[[0,[69,51]]]],70],71],[[[53,[[0,[69,51]]]],70],71],[[[54,[73]],70],71],[[[55,[[0,[15,69]],69]],70],71],[[[56,[[0,[69,15]]]],70],71],[[59,70],71],[[[41,[40]],70],71],[[[61,[51]],70],71],[[[74,[51]],[42,[1]]]],[[[52,[51]],75]],[[[53,[51]],75]],[[[41,[40]],[42,[1]]]],[[[61,[51]],[42,[1]]]],[[[41,[40]],1,11]],[[[61,[51]],1,11]],[[[41,[40]],1,11]],[[[61,[51]],1,11]],0,0,[[]],[[],[[74,[51]]]],[[]],[9,[[74,[[0,[51,7]]]]]],[[]],[[[9,[[0,[8,15]]]]],[[76,[[0,[8,15]]]]]],[[]],[[[9,[63]]],[[64,[63]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[30]]],59],[[]],[[]],[[],[[41,[40]]]],[9,[[41,[[0,[40,7]]]]]],[[]],[9,[[61,[[0,[51,7]]]]]],[[]],[[],[[61,[51]]]],[67,[[66,[15]]]],[67,43],[67,[[49,[[0,[10,68]]]]]],[67,[[50,[[0,[10,68]]]]]],[[[41,[40]],1],[[27,[[0,[40]]]]]],[[[61,[51]],1],[[27,[[0,[51]]]]]],0,[[[74,[51]],1]],[[[64,[63]],1],63],[[[61,[51]],1]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[66,[15]]]],[[[48,[15]]]],[[[55,[15,10]]]],[[[55,[15,10]]]],[[[57,[45]]],1],[60,1],0,[[1,45],[[57,[45]]]],[1,60],[43,43],[43,43],[[43,43],[[27,[62]]]],[[[53,[51]]],27],[[[52,[51]]],27],[[[52,[51]]],27],[[[53,[51]]],27],0,[[[53,[51]]]],[[[52,[51]]]],[[[53,[51]]]],[[[52,[51]]]],[[[64,[63]],[42,[1]],1],[[27,[63]]]],[[[57,[45]],1,1],[[35,[30]]]],0,[[60,1],1],[[[57,[45]],1]],0,[[[61,[51]],1]],[[43,1],43],[[43,1],43],[[43,1]],[[43,1],43],[[43,1],43],[[43,1]],0,[[43,43],43],[[43,43],43],[[43,43],43],[[43,43],43],[[43,43]],[[43,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],0,[[60,1,1],30],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[44,[[0,[15,8]]]],[0,[15,8]]]],[[[44,[[0,[15,8]]]]],[[27,[[0,[15,8]]]]]],[[],[[44,[[0,[15,8]]]]]],[[[44,[[0,[15,8]]]],[0,[15,8]]],30],0,[[[46,[45]]]],[[[46,[45]]],27],[[[46,[45]]]],[[],[[46,[7,45]]]],[[[46,[45]]],30],[45,[[46,[45]]]],0,0,0,0,[[],77],[[]],[[]],[[]],[[]],[[],27],[[[78,[69]],70],71],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[3,[[18,[15,[9,[17]],17]]]],[[[72,[79]],79]],[[]],[[]],[[]],[[]],[[[72,[79]]],[[78,[79]]]],[[[72,[79]]],[[0,[25,80]]]],[[],[[72,[79]]]],[[[77,[79]]],[[27,[30]]]],[[[78,[79]]],27],[[[78,[79]]],27],[[]],[30],[[],32],[[],32],[3,[[33,[3]]]],[3,[[33,[3]]]],[3,[[34,[3]]]],[3,[[34,[3]]]],[81,30],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[3,[[9,[[9,[17]],17]]]],[3,[[9,[[9,[17]],17]]]],[[]],[[]],[[]],0,0,0,[[43,43],43],[[43,43]],[[43,30]],[[]],[[]],[[]],[[]],[43,1],[[43,1],30],[[43,[42,[1]]],[[27,[1]]]],[[43,[42,[1]]],[[27,[1]]]],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[3,[[18,[15,[9,[17]],17]]]],[[43,[42,[1]]],82],[[43,1]],[[]],[[]],[[]],[[]],[[43,43],43],[[43,43]],[43,30],[43,1],[[43,[2,[1]]],82],[1,43],[83,27],[82,27],[83,27],[82,27],[43,43],[43],[[43,43],43],[[43,43]],[[43,1]],[[43,1]],[[43,1]],[[],32],[[],32],[3,[[33,[3]]]],[3,[[33,[3]]]],[3,[[34,[3]]]],[3,[[34,[3]]]],[[43,1],43],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1,43,11],43],[[43,1,43,11]],[[43,1,11],43],[[43,1,11]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1],43],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1,43,11],43],[[43,1,43,11]],[[43,1,11],43],[[43,1,11]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,1,43],43],[[43,1,43]],[[43,1],43],[[43,1]],[[43,43],43],[[43,43]],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[3,[[9,[[9,[17]],17]]]],[3,[[9,[[9,[17]],17]]]],[[]],[[]],[[43,[42,[1]]],83],[[43,43],43],[[43,43]],0,[[[47,[[0,[8,15]],[0,[8,15]]]],[0,[8,15]],[0,[8,15]]]],[[[47,[[0,[8,15]],[0,[8,15]]]]],30],[[[47,[[0,[8,15]],[0,[8,15]]]]],1],[[],[[47,[[0,[8,15]],[0,[8,15]]]]]],[[[47,[[84,[15]],[0,[8,15]],[0,[8,15]]]],[42,[15]]],[[85,[[84,[15]],[0,[8,15]],[0,[8,15]]]]]],[[[47,[[0,[8,15]],[84,[15]],[0,[8,15]]]],[42,[15]]],[[85,[[84,[15]],[0,[8,15]],[0,[8,15]]]]]],[[[47,[[0,[8,15]],[0,[8,15]]]],[0,[8,15]]]],[[[47,[[0,[8,15]],[0,[8,15]]]],[0,[8,15]]]],0,0,[[]],[[]],[[[48,[15]],15],1],[[]],[3,[[18,[15,[9,[17]],17]]]],[[[48,[15]],15]],[[[48,[15]],15,1]],[[]],[[]],[[[48,[15]]],30],[[[48,[15]]],[[86,[15]]]],[[[48,[15]]],1],[[[48,[15]]],[[27,[15]]]],[[[48,[15]]],[[27,[15]]]],[[[48,[15]]],[[86,[15]]]],[[],[[48,[15]]]],[86,27],[[[48,[15]],15]],[[[48,[15]],15,1]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,[[[49,[[0,[10,68]]]],[0,[10,68]]],30],[[[49,[[0,[10,68]]]],[0,[10,68]]],27],[[[49,[[0,[10,68]]]]],30],[[[49,[[0,[10,68]]]]],1],[[],[[49,[[0,[10,68]]]]]],[[[49,[[0,[10,68]]]],[0,[10,68]]],27],0,[[[50,[[0,[10,68]]]],[0,[10,68]]],30],[[[50,[[0,[10,68]]]],[0,[10,68]]],30],[[[50,[[0,[10,68]]]]],30],[[[50,[[0,[10,68]]]]],1],[[],[[50,[[0,[10,68]]]]]],[[[50,[[0,[10,68]]]],[0,[10,68]]],30],0,[[87,1],30],[[87,1],[[27,[1]]]],[[87,1],[[27,[1]]]],[87,30],[87,1],[[87,1],[[27,[1]]]],[[87,1],[[27,[1]]]],[1,87],[[87,1],30],[87,1],0,0,[[],[[52,[7,51]]]],[51,[[52,[51]]]],0,[[],[[53,[7,51]]]],[51,[[53,[51]]]],0,0,[[[54,[73]]],1],[[[54,[73]],73],[[27,[73]]]],[[],[[54,[73]]]],[[]],[[]],[[[54,[73]]]],[[]],[[],88],0,0,[[]],[[]],[[[89,[8]]],[[89,[8]]]],[[]],[[[89,[15]],[89,[15]]],62],[[[89,[15]],[89,[15]]],[[27,[[89,[15]]]]]],[[[89,[39]],[89,[39]]],30],[[[89,[69]],70],71],[[]],[[[42,[[0,[15,8]]]]],[[89,[[0,[15,8]]]]]],[[[89,[15]]],[[27,[15]]]],[[[55,[[0,[15,8]],[0,[10,8]]]],[42,[[0,[15,8]]]],[0,[10,8]]]],[[[89,[15]],[89,[15]]],[[27,[[89,[15]]]]]],[[[89,[[0,[15,8]]]],[89,[[0,[15,8]]]]]],[[[89,[15]],[89,[15]]],30],[[]],[[[89,[15]],[89,[15]]],30],[[[89,[15]]],30],[[[55,[[0,[15,8]],[0,[10,8]]]]],30],[[[89,[15]],[89,[15]]],30],[[[89,[15]],[89,[15]]],30],[[[55,[[0,[15,8]],[0,[10,8]]]]],[[0,[25,80]]]],[[],[[55,[[0,[15,8]],[0,[10,8]]]]]],[[[89,[15]],[89,[15]]],[[27,[62]]]],[[[55,[[0,[15,8]],[0,[10,8]]]],[42,[[0,[15,8]]]]],9],[[[89,[15]]],[[27,[15]]]],[[[55,[[0,[15,8]],[0,[10,8]]]],[42,[[0,[15,8]]]]],27],[[]],[[],35],[[],35],[[],36],[[]],0,[[[56,[[0,[8,69,15]]]]]],[[[56,[[0,[8,69,15]]]],[42,[[0,[8,69,15]]]]],27],[[[56,[[0,[8,69,15]]]],[42,[[0,[8,69,15]]]]],30],[[[56,[[0,[8,69,15]]]],[42,[[0,[8,69,15]]]]]],[[[56,[[0,[8,69,15]]]]],30],[[[56,[[0,[8,69,15]]]]],[[0,[25,80]]]],[[[56,[[0,[8,69,15]]]],[0,[8,69,15]]],[[90,[[0,[8,69,15]]]]]],[[],[[56,[[0,[8,69,15]]]]]],[[[56,[[0,[8,69,15]]]],[42,[[0,[8,69,15]]]]]],0,[[[76,[[0,[8,15]]]],1,1],[[0,[8,15]]]],0,[1,[[57,[7,45]]]],0,[[[58,[15]]],30],[[[58,[15]]],1],[[],[[58,[15]]]],[[[58,[15]]],[[27,[15]]]],[[[58,[15]]],[[27,[15]]]],[[[58,[15]],15]],[[[58,[15]],15]],0,[[59,1,26],1],[[59,26,1],[[27,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[[66,[15]]]],[[[91,[15]]],15],[[[91,[15]]],15],[[[91,[15]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[]],[[[66,[15]]],30],[[[66,[15]]],1],[[[92,[15]]],1],[[[66,[15]],[66,[15]]]],[[],[[66,[15]]]],[[[92,[15]]],27],[[[66,[15]]],[[27,[15]]]],[[[66,[15]]],[[27,[[91,[15]]]]]],[[[66,[15]]],[[27,[15]]]],[[[91,[15]]],15],[[[66,[15]],15]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[[92,[15]]]],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],[[]],0,0,[[[41,[40]]],30],[[[41,[40]]],1],[1,[[41,[7,40]]]],0,[[[61,[51]]],30],[[[61,[51]]],1],[1,[[61,[7,51]]]],0,0,[[],1],[[[64,[63]]],30],[[[64,[63]]],1],[[[64,[63]],1,63],1],[[[64,[63]],63,1],[[27,[1]]]],[1],[1,30],[[[64,[63]],[42,[1]],1,63],[[27,[63]]]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,93],[94,94],[95,95],[96,96],[[]],[[]],[[]],[[]],[[1,15,[0,[15,[37,[[0,[15,[37,[[0,[15,[37,[[0,[15,[37,[[0,[15,37,8]]]],8]]]],8]]]],8]]]],8]],3,3],[[9,[[27,[[0,[15,[37,[[0,[15,[37,[[0,[15,[37,[[0,[15,37,8]]]],8]]]],8]]]],8]]]]]]]],0,[[1,8,8,[0,[25,8]],[0,[15,8,4,5]],[0,[11,97]],[0,[11,97]],[0,[11,97]]],[[0,[15,8,4,5]]]],0,[[93,93],30],[[95,95],30],[[96,96],30],[[93,70],71],[[94,70],71],[[95,70],71],[[96,70],71],[[[9,[9]]],98],[[]],[[]],[[[9,[1]]],93],[[]],[[]],[[]],[[1,1],[[9,[9]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[1,25,[0,[11,97]],[0,[11,97]]],[[9,[1]]]],0,[[]],[[]],[[]],[[]],0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[1,1],[[9,[9]]]],[[1,15,[0,[15,[37,[[0,[15,[37,[[0,[15,[37,[[0,[15,[37,[[0,[15,37,8]]]],8]]]],8]]]],8]]]],8]],3,3],[[9,[[27,[[0,[15,[37,[[0,[15,[37,[[0,[15,[37,[[0,[15,37,8]]]],8]]]],8]]]],8]]]]]]]],[[1,8,8,[0,[25,8]],[0,[15,8,4,5]],[0,[11,97]],[0,[11,97]],[0,[11,97]]],[[0,[15,8,4,5]]]],0,[[93,1]],0,0,0,0,0,0,0,[[94,1],1],[[94,1],1],[95],[[94,1,1],1],[[[9,[[9,[1]]]],1],94],[[94,1,1],25],[95,95],[[94,1]],[[1,25,[0,[11,97]],[0,[11,97]]],[[9,[1]]]],0,[[98,8,3,3],[[9,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[100,[99]],[100,[99]]]],[[[100,[99]],[100,[99]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[102,[101]]]],[[1,1],25],0,[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],103],[[]],[[],[[104,[103]]]],[[],[[104,[[103,[105]]]]]],0,[[]],[[],27],[106,106],[107,107],[[[100,[8]]],[[100,[8]]]],[105,105],[108,108],[[[102,[[0,[8,101]]]]],[[102,[[0,[8,101]]]]]],[109,109],[110,110],[111,111],[[[112,[[0,[8,15]]]]],[[112,[[0,[8,15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,[25,25],0,0,[[[9,[[100,[101]]]],[9,[[100,[101]]]]],[[9,[[100,[101]]]]]],[[],[[9,[113]]]],[113,[[9,[113]]]],[81,[[9,[81]]]],[[],[[9,[26]]]],[26,[[9,[26]]]],[[],[[9,[113]]]],[[],[[9,[26]]]],[[]],[[]],[[],[[100,[99]]]],[[],[[112,[[0,[7,15]]]]]],[81],0,[[]],0,[[],114],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[100,[99]],[100,[99]]]],[[[100,[99]],[100,[99]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[102,[101]]]],0,[[]],0,[[],27],[[106,106],30],[[107,107],30],[[[100,[39]],[100,[39]]],30],[[105,105],30],[[108,108],30],[[[102,[[0,[39,101]]]],[102,[[0,[39,101]]]]],30],0,[[],27],[[],27],0,[[]],0,[[]],0,[[]],[[[116,[115]],70],71],[[106,70],71],[[107,70],71],[[[100,[99]],70],71],[[[100,[99]],70],71],[[[102,[101]],70],71],[[[102,[101]],70],71],[[109,70],71],[[117,70],71],[[110,70],71],[[111,70],71],[[[112,[[0,[69,15]]]],70],71],0,[[],118],[[],118],0,[11],[[]],[[]],[[]],[[]],[[],[[116,[119]]]],[[]],[[]],[[]],[[]],[[]],[[]],[120,[[100,[99]]]],[[]],[[]],[[]],[[],[[102,[101]]]],[[[9,[121]]],[[102,[101]]]],[[],[[102,[101]]]],[[]],[[],[[102,[101]]]],[[[9,[122]]],[[102,[101]]]],[[[9,[123]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[124]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[125]]],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[113]]],[[102,[101]]]],[[[9,[[100,[101]]]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[1]]],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[81]]],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[26]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[126]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[88]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[[9,[127]]],[[102,[101]]]],[[],[[102,[101]]]],[[],[[102,[101]]]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],0,[[]],[[],81],[[[100,[99]]],81],[3,[[18,[15,[9,[17]],17]]]],0,[[[100,[99]],128]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],0,[[],30],0,[[]],0,[[]],0,0,0,[[]],0,0,[[],27],0,[[]],0,[[26,26],[[9,[26]]]],0,[[]],0,[[],81],[[],81],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[100,[99]],[100,[99]]]],[[[100,[99]],[100,[99]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[100,[101]]]],[[[100,[99]]],[[100,[99]]]],[[[102,[101]]],[[102,[101]]]],[[[102,[101]]],[[102,[101]]]],[120],[81],[81,[[100,[99]]]],[[[118,[119,11]]],27],0,[26],[1,1],0,[25,[[100,[99]]]],[25,[[100,[99]]]],[[]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[100,[101]]]],[3,[[33,[3]]]],[3,[[34,[3]]]],0,[[[102,[101]],1]],[[[102,[101]],1]],[[[102,[101]],1]],[[[102,[101]],1]],[[[102,[101]],1]],[[[102,[101]],1]],0,0,0,0,[[]],[126,25],0,[126],[[126,3,3],35],0,[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[100,[99]],[100,[99]]],[[100,[99]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[102,[101]]],[[102,[101]]]],[[[102,[101]],[100,[101]]],[[102,[101]]]],[[[100,[99]],[100,[99]]]],[[[100,[99]],[100,[99]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[100,[101]]]],[[[102,[101]],[102,[101]]]],[25,[[100,[99]]]],[25,[[100,[99]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],129],[[],129],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],25],0,[[]],0,0,0,[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[[130,[127]]],27],[[[130,[113]]],27],[[[130,[122]]],27],[[[130,[81]]],27],[[[130,[26]]],27],[[[130,[1]]],27],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,[[131,1],30],[1,131],[131,25],0,0,[26,106],[26,107],[[106,26],26],[[107,26],26],[[106,26],26],[[107,26],26],[25,25],0,0,0,0,0,[[]],[[],103],[[]],[[],[[104,[103]]]],[[[9,[[100,[101]]]],[9,[[100,[101]]]]],[[9,[[100,[101]]]]]],[[],[[9,[113]]]],[113,[[9,[113]]]],[81,[[9,[81]]]],[[],[[9,[26]]]],[[],[[9,[26]]]],[26,[[9,[26]]]],[[],[[9,[113]]]],[[],[[9,[26]]]],0,[81],[[]],0,0,[[]],[[]],[[],114],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[],114],[[[114,[81]]],[[27,[81]]]],[[[114,[122]]],[[27,[122]]]],[[[114,[1]]],[[27,[1]]]],[[[114,[26]]],[[27,[26]]]],[[[114,[113]]],[[27,[113]]]],[[[114,[127]]],[[27,[127]]]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,0,0,[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[[132,[122]]],[[27,[122]]]],[[[132,[113]]],[[27,[113]]]],[[[132,[81]]],[[27,[81]]]],[[[132,[127]]],[[27,[127]]]],[[[132,[26]]],[[27,[26]]]],[[[132,[1]]],[[27,[1]]]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,[[],27],0,0,[[],27],[[],27],0,[[]],0,0,0,[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[[133,[127]]],27],[[[133,[26]]],27],[[[133,[81]]],27],[[[133,[1]]],27],[[[133,[122]]],27],[[[133,[113]]],27],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,0,0,[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[[134,[113]]],[[27,[113]]]],[[[134,[81]]],[[27,[81]]]],[[[134,[26]]],[[27,[26]]]],[[[134,[122]]],[[27,[122]]]],[[[134,[127]]],[[27,[127]]]],[[[134,[1]]],[[27,[1]]]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],118],[[],118],[[]],[116],[[]],[[],30],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[11],[[],30],[[]],[[]],0,0,0,0,[[]],[[]],0,[[]],0,[[]],0,[1,109],[[109,[42,[1]]],1],[[109,[42,[1]]],1],0,[[135,26],26],[[[9,[26]],26],135],0,[[],30],0,[[]],0,[[]],0,[[136,1],[[0,[25,80]]]],[[136,1],1],[[136,1],1],[[136,11,11],9],[[136,1],1],[[136,1],1],[[136,1],25],[[136,1],25],[[136,1],30],[[136,1],[[27,[1]]]],[1,136],[136,[[0,[25,80]]]],[[136,1,1],[[9,[1]]]],0,[[],30],0,[[]],0,[[137,1,1],26],[[137,1],26],[[137,1],26],[[1,26],137],[[137,1,1],26],[[137,1],26],0,[[],27],0,[[]],[[26,26],[[9,[26]]]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]]],[[[139,[138]],[139,[138]]]],[[],140],[[],140],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[[139,[8]]],[[139,[8]]]],[141,141],[[]],[[]],[[],140],[[],140],[[],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]]],[[[139,[138]],[139,[138]]]],[[[139,[39]],[139,[39]]],30],[[141,141],30],[[[139,[138]],70],71],[[[139,[138]],70],71],[[141,70],71],[[]],[[]],[120,[[139,[138]]]],[[]],[[],81],[[[139,[138]]],81],[[[139,[138]],128]],[[141,128]],[[]],[[]],[[]],[[],81],[[],81],[[],81],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]]],[[[139,[138]],[139,[138]]]],[[[139,[138]]],[[139,[138]]]],[120],[81,140],[81],[81,[[139,[138]]]],[26],[25,[[139,[138]]]],[25,[[139,[138]]]],[[]],[81,81],[81],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]],[[139,[138]]]],[[[139,[138]],[139,[138]]]],[[[139,[138]],[139,[138]]]],[25,[[139,[138]]]],[25,[[139,[138]]]],[[]],[[]],[[],129],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[]],[[]],[[]],0,[[[102,[101]],[102,[101]],1]],[[[102,[101]],1],[[102,[101]]]],[[[102,[101]]],[[102,[101]]]],[[[102,[101]]]],[[[102,[101]],[102,[101]]]],[[[102,[101]],[102,[101]],1],[[100,[101]]]],[[[102,[101]],[142,[[100,[101]]]]],[[100,[101]]]],[[[102,[101]],1],[[102,[101]]]],[[[102,[101]],1]],[[[102,[101]],1]],[[[102,[101]],1]],[[[102,[101]],1,11],[[102,[101]]]],[[[102,[101]],1],[[100,[101]]]],[[[102,[101]]],[[102,[101]]]],[[[102,[101]]]],[[[102,[101]]],[[9,[[100,[101]]]]]],[[[102,[101]]],30],[[[102,[101]]],1],[[[102,[101]],1],[[102,[101]]]],[[],[[102,[101]]]],[[[102,[101]],1,11],[[102,[101]]]],[[[102,[101]],[142,[[100,[101]]]],1],[[102,[101]]]],[[[102,[101]],1],[[102,[101]]]],[[[102,[101]],1],[[102,[101]]]],[[[102,[101]]]],[[[102,[101]]],[[102,[101]]]],[[[102,[101]],1],[[102,[101]]]],[[[102,[101]],1],[[102,[101]]]],[[[102,[101]],1]],[[[102,[101]],1],[[102,[101]]]],[1,1],0,[[117,1],25],[[117,1],25],[[117,1],25],[[[14,[1]]],117],0,[[110,1],25],[[110,1],25],[[110,1],30],[1,110],[110,25],0,[[111,1],25],[[111,1],25],[[111,1],30],[1,111],[111,25],0,0,[[[112,[143]],143]],[[[112,[143]],143]],[[[112,[143]],143]],[[[112,[143]],143]],[[[112,[143]]]],[[]],[[[112,[143]]],143],[[[112,[143]]]],[[[112,[143]]]],[[],[[112,[143]]]],[[[112,[143]],143]],[[[112,[143]],[14,[143]]]],0,[[]],[126,25],[126],[[126,3,3],35],0,[[144,121,121]],[1,144],[144,[[27,[[9,[30]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[145,[[0,[8,10]]]]],[[145,[[0,[8,10]]]]]],[[[146,[[0,[8,15]]]]],[[146,[[0,[8,15]]]]]],[[[147,[[0,[8,10]]]]],[[147,[[0,[8,10]]]]]],[[]],[[]],[[]],[[[145,[[0,[39,10]]]],[145,[[0,[39,10]]]]],30],[[[146,[[0,[39,15]]]],[146,[[0,[39,15]]]]],30],[[[147,[[0,[39,10]]]],[147,[[0,[39,10]]]]],30],[[[145,[[0,[69,10]]]],70],71],[[[146,[[0,[69,15]]]],70],71],[[[147,[[0,[69,10]]]],70],71],[[]],[[[9,[10]]],[[145,[10]]]],[[]],[[[9,[15]]],[[146,[15]]]],[129,[[146,[148]]]],[[]],[[[9,[[0,[8,10]]]]],[[147,[[0,[8,10]]]]]],[[[146,[15]],1],1],[[]],[[]],[[]],0,[[[145,[10]]],[[27,[1]]]],[[[145,[10]],10]],0,[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[[149,[10]]],27],[[[145,[10]]],[[149,[10]]]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],0,[[[9,[127]]],[[146,[127]]]],[[[9,[1]]],[[146,[1]]]],[[[146,[15]]],[[9,[1]]]],[[[146,[15]]],[[9,[1]]]],[[[146,[15]]],25],[[[146,[148]],150],25],0,0,[[]],[[]],[[]],[3,[[18,[15,[9,[17]],17]]]],[[]],[[]],[[[151,[10]]],27],[[[147,[10]]],[[151,[10]]]],[[],32],[3,[[33,[3]]]],[3,[[34,[3]]]],[[],35],[[],35],[[],36],[3,[[9,[[9,[17]],17]]]],[[]],[[[147,[10]],1],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[]],0,[[]],0,0,[3],0,[[[42,[1]]],1],[1,1],[[],1],[[[42,[1]]],65],[[1,1],27],0,0,[[],1],[[1,1],30],[[]],[[]],0,[[[42,[1]],1],[[27,[1]]]],0,[[]],0,[[1,11]],[[1,11]],[[],1],0,[1,27],0,[3,[[18,[15,9]]]],[[]],[[]],[[],30],[[],30],[[],30],[[],1],[[],1],[[],1],0,[[]],0,[[]],[[]],[[]],0,[[]],[[]],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],[[9,[[9,[1]]]]]],[[],27],[[],27],[[],27],0,[[],30],[[]],[[]],[[]],0,0,[[[42,[1]],1],27],0,[[]],[[]],[[1,1],[[35,[30]]]],[1,1],[1],[[]],[[]],0,[[]],[[]],[[]],[[],1],0,[1,[[9,[1]]]],[[1,1],30],0,[3,[[9,[9]]]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],[[]],0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[]],[[]],[[]],0,0,0,[3],0,0,0,[[]],[[]],[65,65],[[]],[[[42,[1]]],1],[[[42,[1]]],65],[65,1],[[65,65],30],[[65,70],71],[[]],[65,1],[65,1],[[]],[65,1],[65,1],[65,1],[[1,1,1],65],[[]],[[],35],[[],35],[[],36],[[]],0,[1,1],[[1,1],30],[[],30],[[],1],[1],[[],[[9,[[9,[1]]]]]],[1,1],[1,[[9,[1]]]],[[1,1],30],0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[],1],[[]],[[],30],[[],1],[[]],[[]],[[]],[[],1],0,[[[42,[1]],1],[[27,[1]]]],0,0,[[]],0,0,[[1,11]],[[1,11]],0,0,[1,27],0,[3,[[18,[15,9]]]],0,[[]],0,[[]],0,0,0,0,0,[[]],[[]],0,0,0,0,[[1,1],27],[[],30],[[],1],[1],[[1,1],[[35,[30]]]],[1],0,0,0,0,0,0,0,0,0,0,0,0,[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,[[[42,[1]],1],27],0,0,0,0,0,0,0,0,0,[[]],0,0,[[],1],[[]],[[],30],[[]],0,[3,[[9,[9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[155,[[0,[15,10,8,37,152,6,153,154]]]],[0,[15,10,8,37,152,6,153,154]]]],[[[157,[[0,[15,10,37,152,153,156,154]]]],[0,[15,10,37,152,153,156,154]],[0,[15,10,37,152,153,156,154]]],[[0,[15,10,37,152,153,156,154]]]],[[[159,[[0,[15,10,37,152,153,158,154]]]],[0,[15,10,37,152,153,158,154]],[0,[15,10,37,152,153,158,154]]],[[0,[15,10,37,152,153,158,154]]]],[[[161,[[0,[15,10,8,37,152,6,153,160,154]]]]]],[[[162,[[0,[10,154]],11,11,[0,[10,154]],11,11,11]],[0,[10,154]],[0,[10,154]]],[[0,[10,154]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[1]],1],[[2,[1]]]],0,[[],113],[[1,1]],[[1,[0,[[42,[1]],69]]]],[163,163],[164,164],[165,165],[166,166],[167,167],[[[168,[8]]],[[168,[8]]]],[[[169,[8]]],[[169,[8]]]],[[[155,[8]]],[[155,[8]]]],[[[157,[8]]],[[157,[8]]]],[[[159,[8]]],[[159,[8]]]],[[[170,[8]]],[[170,[8]]]],[[[161,[8]]],[[161,[8]]]],[[[171,[8,[0,[8,11]],[0,[8,11]]]]],[[171,[8,[0,[8,11]],[0,[8,11]]]]]],[[[162,[8,[0,[11,8]],[0,[11,8]],8,[0,[11,8]],[0,[11,8]],[0,[11,8]]]]],[[162,[8,[0,[11,8]],[0,[11,8]],8,[0,[11,8]],[0,[11,8]],[0,[11,8]]]]]],[[[172,[8]]],[[172,[8]]]],[[[173,[8]]],[[173,[8]]]],[[[174,[8]]],[[174,[8]]]],[[[175,[8]]],[[175,[8]]]],[176,176],[[[177,[8]]],[[177,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],168],[[],169],[[],[[155,[7]]]],[[],[[157,[7]]]],[[],[[159,[7]]]],[[],170],[[],[[161,[7]]]],[[],[[171,[7,[0,[7,11]],[0,[7,11]]]]]],[[],[[162,[7,[0,[11,7]],[0,[11,7]],7,[0,[11,7]],[0,[11,7]],[0,[11,7]]]]]],[[],172],[[],173],[[],174],[[],175],[[],176],0,[[[168,[39]],[168,[39]]],30],[[[169,[39]],[169,[39]]],30],[[[170,[39]],[170,[39]]],30],[[[172,[39]],[172,[39]]],30],[[[173,[39]],[173,[39]]],30],[[[174,[39]],[174,[39]]],30],[[[175,[39]],[175,[39]]],30],[[176,176],30],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[178,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[179,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[180,[154]],70],71],[[[168,[69]],70],71],[[[169,[69]],70],71],[[[155,[69]],70],71],[[[157,[69]],70],71],[[[159,[69]],70],71],[[[170,[69]],70],71],[[[161,[69]],70],71],[[[171,[69,[0,[69,11]],[0,[69,11]]]],70],71],[[[162,[69,[0,[11,69]],[0,[11,69]],69,[0,[11,69]],[0,[11,69]],[0,[11,69]]]],70],71],[[[172,[69]],70],71],[[[173,[69]],70],71],[[[174,[69]],70],71],[[[175,[69]],70],71],[[176,70],71],[[]],[[]],[[]],[129,181],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[168,[[0,[37,10,154,153]]]]]],[[[169,[[0,[37,10,154,153]]]]]],[[[170,[[0,[37,6,10,8,154,153,160]]]]]],[[[171,[10,11,11]]],10],[[[172,[[0,[182,10,153,154]]]]]],[[[173,[[0,[15,10,154,156]]]]]],[[[174,[[0,[15,10,154,158]]]]]],[[[175,[[0,[6,10,154,160]]]]]],[176],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],0,[[[168,[[0,[37,10,154]]]]]],[[[169,[[0,[37,10,154]]]]]],[[[170,[[0,[37,6,10,8,154]]]]]],[[[171,[10,11,11]],10,10],10],[[[172,[[0,[182,10,154]]]]]],[[[173,[[0,[15,10,154]]]]]],[[[174,[[0,[15,10,154]]]]]],[[[175,[[0,[6,10,154]]]]]],[176],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[155,[[0,[15,10,8,37,152,6,153,154]]]]]],[[[157,[[0,[15,10,37,152,153,156,154]]]]]],[[[159,[[0,[15,10,37,152,153,158,154]]]]]],[[[161,[[0,[15,10,8,37,152,6,153,160,154]]]]]],[[[162,[[0,[10,154]],11,11,[0,[10,154]],11,11,11]]]],[[[155,[[0,[15,10,8,37,152,6,153,154]]]]]],[[[157,[[0,[15,10,37,152,153,156,154]]]]]],[[[159,[[0,[15,10,37,152,153,158,154]]]]]],[[[161,[[0,[15,10,8,37,152,6,153,160,154]]]]]],[[[162,[[0,[10,154]],11,11,[0,[10,154]],11,11,11]]]],[177,183],0,[[[168,[[0,[37,10,154,184]]]]],27],[[[175,[[0,[6,10,154,185]]]]],27],[[]],[[]],0,[[[168,[[0,[37,10,154,184]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],129],[[],129],[[],129],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[],113],0,0,0,0,0,0,0,[163,127],[164,122],[165,81],[166,26],[167,113],[127,163],[122,164],[81,165],[26,166],[113,167],[[]],[[]],[[[42,[1]],1],[[2,[1]]]],[[1,1]],[[1,[0,[[42,[1]],69]]]],0,0,[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,11],[[171,[10,11,11]]]],0,[[[171,[[0,[10,154]],11,11]],[171,[[0,[10,154]],11,11]],11],[[162,[[0,[10,154]],11,11,[0,[10,154]],11,11,11]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[176,150]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[186,113],187],[[188,113],189],[186,186],[187,187],[190,190],[188,188],[189,189],[191,191],[[]],[[]],[[]],[[]],[[]],[[]],[183,183],[186,190],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],129],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113,189],[1,177],[[]],[186,186],[188,188],[183,183],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[192,192],30],[[192,70],71],[[192,70],71],[[]],[[],[[35,[181,193]]]],[181,150],[[181,11],150],[181],[[181,11]],[[]],[181,[[35,[194]]]],[181,[[35,[[0,[194,195,[196,[127]]]]]]]],[[181,1],[[35,[[9,[[0,[194,8]]]]]]]],[197],[150],[[],129],[[],35],[[],35],[[],36],[[]]],"c":[],"p":[[15,"usize"],[3,"Range"],[8,"FnMut"],[8,"AddAssign"],[8,"SubAssign"],[8,"Mul"],[8,"Default"],[8,"Clone"],[3,"Vec"],[8,"Eq"],[8,"Fn"],[3,"ExactCover"],[15,"f64"],[3,"RangeInclusive"],[8,"Ord"],[3,"Permutations"],[3,"Global"],[3,"BTreeMap"],[8,"ElasticSlice"],[8,"ExpandFront"],[8,"ExpandBack"],[8,"ShrinkFront"],[8,"ShrinkBack"],[8,"SliceHash"],[8,"Iterator"],[15,"u64"],[4,"Option"],[3,"Forward"],[3,"Backward"],[15,"bool"],[8,"StatefulPred"],[3,"Rle"],[3,"RleBy"],[3,"RleByKey"],[4,"Result"],[3,"TypeId"],[8,"Add"],[3,"Larsch"],[8,"PartialEq"],[8,"MonoidAction"],[3,"VecActSegtree"],[8,"RangeBounds"],[3,"BitSet"],[3,"BicrementalMedian"],[8,"CommutativeGroup"],[3,"BicrementalMedianDev"],[3,"BTreeBimap"],[3,"BTreeMultiset"],[3,"CuckooHashMap"],[3,"CuckooHashSet"],[8,"Monoid"],[3,"FoldableDeque"],[3,"FoldableQueue"],[3,"IncrementalLineSet"],[3,"IntervalMap"],[3,"IntervalSet"],[3,"PotentializedUnionFind"],[3,"RemovableHeap"],[3,"RsDict"],[3,"UnionFind"],[3,"VecSegtree"],[4,"Ordering"],[8,"WmInt"],[3,"WaveletMatrix"],[3,"Count3wayResult"],[3,"SkewHeap"],[8,"IntoIterator"],[8,"Hash"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"BinaryTrie"],[8,"ChtInt"],[3,"DisjointSparseTable"],[3,"RangeFull"],[3,"N1Rmq"],[3,"Bits"],[3,"Iter"],[8,"BinaryInt"],[8,"DoubleEndedIterator"],[15,"u32"],[3,"Indices"],[3,"Words"],[8,"Borrow"],[3,"Range"],[3,"Iter"],[3,"DecrementalUsizeSet"],[15,"i8"],[3,"Interval"],[4,"Bound"],[3,"PeekMut"],[3,"IntoIter"],[3,"FunctionalGraph"],[3,"Hld"],[4,"HlEdge"],[4,"Direction"],[8,"Copy"],[3,"TreeCata"],[8,"Modulus"],[3,"StaticModInt"],[8,"NttFriendly"],[3,"Polynomial"],[3,"ButterflyCache"],[3,"OnceLock"],[3,"Mod998244353"],[3,"ConstDiv2"],[3,"ConstDiv"],[3,"Mod1000000007"],[3,"HarmonicFloorSum"],[3,"SieveN2Plus1"],[3,"SieveN2PlusNPlus1"],[3,"SlopeFunction"],[15,"u128"],[3,"DigitsIter"],[8,"Display"],[4,"ApproxFrac"],[3,"SegmentedFactorSieve"],[3,"FracApproxIter"],[8,"SbInt"],[8,"RemEuclidU32"],[15,"isize"],[15,"u16"],[15,"i16"],[15,"i64"],[15,"i32"],[15,"i128"],[15,"u8"],[8,"Hasher"],[3,"String"],[3,"CommonQuotStruct"],[3,"CompactSieve"],[3,"DivisorsStruct"],[3,"FactorsStruct"],[3,"FactorsDupStruct"],[3,"Interpolation"],[3,"LinearSieve"],[3,"ModFactorialBinom"],[8,"DynamicModIntId"],[3,"DynamicModInt"],[3,"Barrett"],[4,"DefaultId"],[8,"Into"],[8,"SlopeTrickInt"],[3,"TwoSat"],[3,"KmpSearcher"],[3,"SuffixArray"],[3,"ZSearcher"],[15,"char"],[3,"Occurrences"],[15,"str"],[3,"Occurrences"],[8,"AddAssoc"],[8,"Zero"],[8,"Sized"],[3,"OpAddOnOpAddCount"],[8,"Min"],[3,"OpAddOnOpMax"],[8,"Max"],[3,"OpAddOnOpMin"],[8,"One"],[3,"OpAffineOnOpAddCount"],[3,"OpClosureOnOpClosure"],[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[4,"OpAdd"],[4,"OpAddCount"],[4,"OpAffine"],[3,"OpClosure"],[4,"OpGcd"],[4,"OpMax"],[4,"OpMin"],[4,"OpMul"],[4,"OpRollHash"],[3,"VecMarker"],[3,"SpaceSep"],[3,"PerLine"],[3,"StrSep"],[3,"Scanner"],[8,"Gcd"],[3,"VecOptionsMarker"],[8,"Neg"],[8,"MulRecip"],[3,"AsciiString"],[3,"AsciiStringOfCharset"],[3,"Ascii"],[3,"AsciiGen"],[3,"AsciiStringOfDistribution"],[3,"Permutation"],[3,"ScanTupleError"],[3,"Error"],[8,"Scan"],[8,"Sub"],[8,"From"],[3,"Demand"],[8,"Inversion"],[8,"Rle"],[8,"RleBy"],[8,"RleByKey"],[8,"CrtMod"],[8,"CrtWrapping"],[8,"CommonQuot"],[8,"Divisors"],[8,"Factors"],[8,"FactorsDup"],[8,"CarmichaelLambda"],[8,"ModIntBase"],[8,"DigitSum"],[8,"Digits"],[8,"DLog"],[8,"EquivMod"],[8,"EquivModIter"],[8,"EulerPhi"],[8,"FracApprox"],[8,"FractionBisect"],[8,"GcdRecip"],[8,"IsCloseFloat"],[8,"MillerRabin"],[8,"Lcm"],[8,"LinearFloorSum"],[8,"ModAckermann"],[8,"ModOrd"],[8,"ModPow"],[8,"ModTetration"],[8,"Sqrt"],[8,"SbInt"],[8,"Act"],[8,"Ring"],[8,"Bisect"],[8,"Push"],[8,"PushFront"],[8,"PushBack"],[8,"SetValue"],[8,"PotentialFunction"],[8,"Fold"],[8,"GetMut"],[8,"Pop"],[8,"PopFront"],[8,"PopBack"],[8,"Quantile"],[8,"Magma"],[8,"Count"],[8,"DisjointSet"],[8,"Count3way"],[8,"FindNth"],[8,"FoldBisect"],[8,"FoldBisectRev"],[8,"GroupBy"],[8,"Identity"],[8,"PartialRecip"],[8,"Recip"],[8,"Field"],[8,"UsizeGroupBy"],[8,"RandomGenerator"],[8,"MakeMax"],[8,"MakeMin"],[8,"Pdep"],[8,"Pext"],[8,"GenOptions"],[8,"SeedableRngInspect"]]},\
"nekolib_notes":{"doc":"<code>nekolib</code> …","t":"AA","n":["debug","range_add_on_the_fly"],"q":[[0,"nekolib_notes"]],"d":["デバッグ用ツールたち。","区間加算 (imos 法 + on-the-fly で遅延解消)。"],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
