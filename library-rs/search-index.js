var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","t":"AAOAAOOOAAADDDIDDIIIFAFLLLLLLLLLLFFFLAAFAFFLLLLLLLLFAAFFLLLLLLLAKAAFAAFFFAFLLFFAAFAFAKLLKLLKLLALLLLLLLLLLLLLLLLLLLLLLAFFFDLLLFFFFFFIKFDLLFFFFFFFDDDLLLFLLFIIIAKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFDDDDDDDDDDDDDDDDDDDDDDDDLAAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLALLALLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALAALLLLLLLLLLLLLLLLLLLLLLLLADLLLLDLLLLLLIDDDKLLLLLLLLLLLLLLLLLLLLLKKLLLLLLKLLLLLLLLLLKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLDLLLLLLDLLLLLLLLLLDDLLDLLIDLLLKKLKKDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLDLDLDLLLLLLLDLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLDLLLDIKLLLLKKLKNNEDNEDNDALLLLLLLLLLLLLLLLLLFAFALLLLLLLLLLLLLLFAALLLLLFALLLLALLLLLLLLLLLLLLLLLLLLFFFDLNNENEDNLLLLLLLLFDLEDIIDDDIIIIIISIIIIIIDIIIDQQDIIIDNIDDIDGGIIIIIISQQQQSDDDDDIDDNSLLLLLLLLLLLLLLLLLLFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLFAKLLLLLLLLLLLLLLLLLLLLLAKAAFAAFFFFFFFFKKLLKALAKLLLLLLLLLLLLLLLLLLAKAKLLLLLLAKKAKAKAKLLLLLLLLLLLLAKKALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAKAKKLLALALLLLLLLLLLLLLLLLLLLLKAKAKAKAAAKAAKAKAFAKAKLLLLLLLLLLLLLLLLLLLLLLLKLLALFFALLLLLLLLLLLLLLLLLALLLLLLAAAAKFAFFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFIKIDQLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLDDLLLLLLFDSISSFKFFFFFFFFFFFIKLIDLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDQLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKIIKKIKIDQLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLIDQLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLEIDNSSINSKKKKKLKKKKKISSISKKLKKKIIQQKKIKIKDLLLDLLIKIKIKDLLLLLLLLLLLLIKIKDLLLLLLIKIKFIKDEDIDDGGIIIDSLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLFDLLLLDLLLLLDLLLLLDILLLLLKLLLLLLIKFFFDLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLALLLLLLLLLLLLLLLADDLLLLLLLLLLLLLLLLDLLLLLLDDLLLLLLLLLLLLLLLLLIQIIQIIIIIIIIIIIIIIIIIIIIIIIIIQIQQQQQQQIIIIIIIIQIQQQQQQQQQQIIIIIIIIIIIQIQQIIIIIIIIIIAKKALAKAAKAKKKKKAAKLKKAKAKAKKKAKAKKKLLLKKLAKAKLKAKLKKKKLKKKKLKKKAKKKKAAKALLKKKKKAKKKKALKAKKLIQKIQQKKKIIIKQIIIIIIIIIIIQIIIIQQLKKLKLLKKLLLIQQKIIDLLLLKKLLLLLLLLLLLLLLLLIKLLKKLKLKIIIQQIIIKKKKKLLKKKKIKIQKIIKKIQKIKIKIKIIIIQKKCQCIKLKKKKQQQQQQIIIIIIKKKKKKQIKIIIIIIIQIKQIKKKKIKRRRRRRRRRRRIIEENDDDNEDNDDENENENENENQIDDDDDDIIDDDDNNNNNNNLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLAAAAAAAAAAAAAALLLLLLLLLLLALLKKALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRFIDDDDDILLLLLLLLLLKKFFFIILLECNNECNNDDDECNNDDLDLECNNECNNECNNECNNECNLDDDDDDDDIQQDIIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIDDLLLLLLLLLLLLLLLLKLLLLL","n":["algo","ds","e","graph","math","new_monoid","rand_gen","rand_gen_builder","seq","traits","utils","Backward","ExactCover","Forward","Inversion","Larsch","Permutations","Rle","RleBy","RleByKey","bisect","bisect_","bisect_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","convolve","cycle_mu_lambda","cycle_nth","default","exact_cover","extremum","extremum","extremum_float","extremum_float","extremum_slice","from","from","from","from","from","from","group_by","group_by","hilbert_mo","hilbert_mo_","index_order","index_order_by","index_order_by_key","into","into","into","into","into","into_iter","into_iter","inversion","inversion","karatsuba","larsch","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next","next","next_permutation","ordered_hash","ordered_hash_","parallel_bisect","parallel_bisect","permutation","prev_permutation","rle","rle","rle","rle","rle_by","rle_by","rle_by","rle_by_key","rle_by_key","rle_by_key","tortoise_hare","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","vzip","vzip","vzip","window_bisect","window_bisect","bisect","bisect_slice","ExactCover","all","any","from_matrix","extremum","extremum_slice","extremum_float","hilbert_mo","index_order_by","index_order_by_key","Inversion","inversion","convolve","Larsch","new","solve","majority","minmax","minmax_by","minmax_by_key","mo","ordered_hash","parallel_bisect","Backward","Forward","Permutations","backward","forward","next","next_permutation","peek","prev","prev_permutation","Rle","RleBy","RleByKey","rle","rle","rle_by","rle_by_key","Rle","RleBy","RleByKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","equiv_mod","equiv_mod","equiv_mod","from","from","from","group_by","group_by","group_by","into","into","into","into_iter","into_iter","into_iter","new","new","new","next","next","next","rle","rle","rle","rle_by","rle_by","rle_by","rle_by_key","rle_by_key","rle_by_key","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","usize_group_by","usize_group_by","usize_group_by","vzip","vzip","vzip","cycle_mu_lambda","cycle_nth","window_bisect","BTreeBimap","BTreeMultiset","BicrementalMedian","BicrementalMedianDev","BinaryTrie","BitSet","CuckooHashMap","CuckooHashSet","DecrementalUsizeSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IncrementalLineSet","IntervalMap","IntervalSet","N1Rmq","PotentializedUnionFind","RemovableHeap","RsDict","SkewHeap","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","binary_trie","bit_set","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_bimap","btree_multiset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","count","count","count","count_3way","count_3way","cuckoo_hash_map","cuckoo_hash_set","decremental_usize_set","default","default","default","default","default","default","default","default","diff","disjoint_sparse_table","eq","eq","eq","eq","eq","extend","extend","extend","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","get_mut","get_mut","incremental_line_set","index","index","index","interval_map","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","len","len","n1_rmq","new","new","not","not","partial_cmp","pop","pop_back","pop_front","pop_front","potentialized_union_find","push","push_back","push_back","push_front","quantile","relate","removable_heap","repr","repr_diff","rs_dict","set_value","shl","shl","shl_assign","shr","shr","shr_assign","skew_heap","sub","sub","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","with","BinaryInt","BinaryTrie","Bits","Iter","bits","borrow","borrow","borrow_mut","borrow_mut","equiv_mod","fmt","from","from","group_by","group_by","insert","into","into","into_iter","into_iter","iter","iter_dup","new","next","next","next_back","pop","push","rle","rle","rle_by","rle_by","rle_by_key","rle_by_key","test","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","zero","BitSet","Indices","Words","and","and_assign","autofix","borrow","borrow","borrow_mut","borrow_mut","capacity","contains","find_first","find_last","from","from","group_by","group_by","indices","insert","into","into","into_iter","into_iter","ior","ior_assign","is_empty","len","new","new","next","next","next_back","next_back","not","not_assign","or","or_assign","remove","reserve","reserve_exact","rle","rle","rle_by","rle_by","rle_by_key","rle_by_key","shl","shl_and","shl_and_assign","shl_and_self","shl_and_self_assign","shl_assign","shl_ior","shl_ior_assign","shl_ior_self","shl_ior_self_assign","shl_op","shl_op_assign","shl_op_self","shl_op_self_assign","shl_or","shl_or_assign","shl_or_self","shl_or_self_assign","shl_sub","shl_sub_assign","shl_sub_self","shl_sub_self_assign","shl_xor","shl_xor_assign","shl_xor_self","shl_xor_self_assign","shr","shr_and","shr_and_assign","shr_and_self","shr_and_self_assign","shr_assign","shr_ior","shr_ior_assign","shr_ior_self","shr_ior_self_assign","shr_op","shr_op_assign","shr_op_self","shr_op_self_assign","shr_or","shr_or_assign","shr_or_self","shr_or_self_assign","shr_sub","shr_sub_assign","shr_sub_self","shr_sub_self_assign","shr_xor","shr_xor_assign","shr_xor_self","shr_xor_self_assign","sub","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","usize_group_by","vzip","vzip","words","xor","xor_assign","BTreeBimap","insert","is_empty","len","new","range_left","range_right","remove_left","remove_right","BTreeMultiset","Iter","borrow","borrow_mut","count","from","group_by","insert","insert_n","into","into_iter","is_empty","iter","len","max","min","new","new","next","remove","remove_n","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","CuckooHashMap","contains_key","insert","is_empty","len","new","remove","CuckooHashSet","contains","insert","is_empty","len","new","remove","DecrementalUsizeSet","contains","greater","greater_equal","is_empty","len","less","less_equal","new","remove","universe_len","DisjointSparseTable","FoldableDeque","new","with","FoldableQueue","new","with","ChtInt","IncrementalLineSet","inner_len","min","new","on_line","oo","push","right","simplify","Interval","IntervalMap","borrow","borrow_mut","clone","clone_into","cmp","connection","eq","fmt","from","from_bounds","inf","insert","intersection","intersection_minus","intersects","into","is_connected_with","is_empty","is_empty","is_subset_of","is_superset_of","iter","new","partial_cmp","remove","sup","superset_of","to_owned","try_from","try_into","type_id","vzip","IntervalSet","clear","covering","has_range","insert","is_empty","iter","mex","new","remove","N1Rmq","min","PotentializedUnionFind","with_len","RemovableHeap","is_empty","len","new","peek","pop","push","remove","RsDict","rank","select","IntoIter","PeekMut","SkewHeap","borrow","borrow","borrow_mut","borrow_mut","clear","deref","deref_mut","drop","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","from","group_by","into","into","into_iter","is_empty","len","len","meld","new","next","peek","peek_mut","pop","pop","push","rle","rle_by","rle_by_key","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","usize_group_by","vzip","vzip","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","WmInt","bitlen","is_empty","len","rank","select","set","test","xored_quantile","zero","Asc","Desc","Direction","FunctionalGraph","Heavy","HlEdge","Hld","Light","TreeCata","adjlist","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dijkstra","dijkstra_","dinic","dinic_","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_root","functional_graph","hld","into","into","into","into","into","scc","scc_","to_owned","to_owned","to_owned","to_owned","tree_cata","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","from_root","dijkstra","dinic","FunctionalGraph","mu_lambda","Asc","Desc","Direction","Heavy","HlEdge","Hld","Light","decode","encode","inner","lca_decoded","new","path","rev","subtree_range","scc","TreeCata","each_root","ApproxFrac","ButterflyCache","CarmichaelLambda","CommonQuot","CompactSieve","ConstDiv","ConstDiv2","CrtMod","CrtWrapping","DLog","DigitSum","Digits","Divisors","EXP","EquivMod","EquivModIter","EulerPhi","Factors","FactorsDup","FracApprox","FracApproxIter","FractionBisect","Gcd","GcdRecip","HarmonicFloorSum","I","I","Interpolation","IsCloseFloat","Lcm","LinearFloorSum","LinearSieve","Lower","MillerRabin","Mod1000000007","Mod998244353","ModAckermann","ModFactorialBinom","ModInt1000000007","ModInt998244353","ModIntBase","ModOrd","ModPow","ModTetration","Modulus","NttFriendly","ODD","Output","Output","Output","Output","PRIMITIVE_ROOT","Polynomial","SegmentedFactorSieve","SieveN2Plus1","SieveN2PlusNPlus1","SlopeFunction","Sqrt","StaticModInt","TwoSat","Upper","VALUE","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bit_binom","bit_binom_","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","butterfly","butterfly_cache","butterfly_cache","butterfly_inv","carmichael_lambda","carmichael_lambda","checked_recip","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","common_quot","common_quot","compact_sieve","const_div","continued_fraction","continued_fraction_","convolution","convolve","convolve_u128","convolve_u128_mod","convolve_u32_mod","convolve_u64","convolve_u64_mod","convolve_wrapping_u128","convolve_wrapping_u64","crt_mod","crt_wrapping","default","default","digit_pow_sum","digit_sum","digit_sum","digits","digits","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","eq","eq","eq","equiv_mod","equiv_mod","equiv_mod","euler_phi","euler_phi","factors","factors","factors_dup","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_approx","frac_approx_iter","frac_approx_iter_bound","fraction_bisect","fraction_bisect","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","garner","gcd","gcd","gcd_recip","gcd_recip","get","get","group_by","harmonic_floor_sum","hash","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_close","is_close_float","is_prime","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","miller_rabin","mod_ackermann","mod_ackermann","mod_factorial_binom","mod_ord","mod_ord","mod_pow","mod_pow","mod_recip_table_","mod_recip_table_prime","mod_tetration","mod_tetration","modint","modulus","modulus","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new_unchecked","new_unchecked","next","polynomial","pow","precompute_butterfly","prime_pi","prime_pi_","product","product","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rle_by","rle_by_key","segmented_factor_sieve","shl","shl","shl_assign","shr","shr","shr_assign","sieve_n2_plus_1","sieve_n2_plus_n_plus_1","slope_function","sqrt","sqrt","sqrt_fraction","sqrt_fraction_","sqrt_fraction_fn","stern_brocot","stern_brocot_","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usize_group_by","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","bit_binom","CarmichaelLambda","carmichael_lambda","CommonQuot","CommonQuotStruct","Output","borrow","borrow_mut","common_quot","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","continued_fraction","ButterflyCache","EXP","NttFriendly","ODD","PRIMITIVE_ROOT","butterfly","butterfly_cache","butterfly_inv","convolve","convolve_u128","convolve_u128_mod","convolve_u32_mod","convolve_u64","convolve_u64_acl","convolve_u64_mod","convolve_wrapping_u128","convolve_wrapping_u64","precompute_butterfly","DigitSum","digit_pow_sum","digit_sum","Digits","DigitsIter","borrow","borrow_mut","digits","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","new","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","Divisors","DivisorsStruct","Output","borrow","borrow_mut","divisors","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","DLog","dlog","EquivMod","EquivModIter","equiv_mod","equiv_mod","EulerPhi","euler_phi","Factors","FactorsStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","FactorsDup","FactorsDupStruct","Output","borrow","borrow_mut","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","equiv_mod","factors_dup","from","group_by","into","into_iter","next","next","next","next","next","next","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","ApproxFrac","FracApprox","FracApproxIter","Lower","ONE","SIGNED","SbInt","Upper","ZERO","abs","avg","frac_approx_iter","frac_approx_iter_bound","highest_frac","into_inner","lowest_frac","lt1","neg","steps","zero_frac","FractionBisect","ONE","SIGNED","SbInt","ZERO","abs","avg","fraction_bisect","lt1","neg","steps","CrtMod","CrtWrapping","I","I","crt_mod","crt_wrapping","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","Interpolation","interpolate","with","IsCloseFloat","is_close","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","divisors_sum","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","recips","MillerRabin","is_prime","ModAckermann","mod_ackermann","ModFactorialBinom","binom","factorial","factorial_recip","new","perm","recip","ModOrd","mod_ord","ModPow","mod_pow","mod_recip_table_prime","ModTetration","mod_tetration","Barrett","DefaultId","DynamicModInt","DynamicModIntId","Mod1000000007","Mod998244353","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","add","add","add","add","add_assign","add_assign","barrett","barrett","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_recip","clone","clone","clone_into","clone_into","default","default","default","div","div","div","div","div_assign","div_assign","eq","eq","fmt","fmt","fmt","from","from","from","from","get","get","hash","hash","into","into","into","modulus","modulus","modulus","mul","mul","mul","mul","mul_assign","mul_assign","neg","new","new","new_unchecked","new_unchecked","pow","product","product","recip","rem_euclid_u32","set_modulus","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Polynomial","differential","differentiate","div_mod","div_nth","exp","fft_butterfly","fft_inv_butterfly","fode","get","integral","integrate","into_inner","is_zero","len","log","new","newton","pow","recip","recip_naive","reverse","reversed","truncate","truncated","prime_pi","SegmentedFactorSieve","divisors","factors","factors_dup","new","SieveN2Plus1","factors","factors_dup","is_prime","new","primes","SieveN2PlusNPlus1","factors","factors_dup","is_prime","new","primes","SlopeFunction","SlopeTrickInt","add_abs","add_const","add_left","add_right","argmin","doz","min","min_left","min_right","new","shift","window","Sqrt","sqrt","sqrt_fraction","sqrt_fraction_fn","stern_brocot","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","index","into","into","into","kmp","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","SuffixArray","from_bytes","from_hashed","into_inner","lcpa","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","group_by","into","into_iter","next","occurrences","rle","rle_by","rle_by_key","try_from","try_into","type_id","usize_group_by","vzip","z","Act","Action","AddAssoc","AddComm","Additive","Associative","Bisect","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","GroupBy","Hashed","Identity","Input","Input","Input","Input","Input","Input","Item","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","PotentialFunction","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","UsizeGroupBy","Zero","act","act","act","action","add","additive","additive","binop","bisect","bisect","count","count","count","count","count_3way","diff","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get_mut","get_mut","group_by","group_by","hash","id","is_empty","is_empty","is_empty","len","len","len","max","max","min","min","mul","mul_recip","multiplicative","multiplicative","neg","new","new","next","one","one","op","operand","operator","partial_recip","partition","pop","pop_back","pop_front","potential_function","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","relate","repr","repr_diff","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","usize_group_by","usize_group_by","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","operand","operator","AddAssoc","AddComm","Zero","zero","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","additive","id","mul","multiplicative","neg","one","op","partial_recip","recip","recip","zero","Bisect","Input","Output","bisect","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","fmt","from","ge","gt","into","le","lt","ne","new","to_owned","try_from","try_into","type_id","vzip","DisjointSet","count","equiv","is_empty","len","new","partition","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","GroupBy","group_by","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","CommutativeGroup","Item","Magma","PotentialFunction","diff","is_empty","len","new","relate","repr_diff","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","UsizeGroupBy","usize_group_by","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","MakeMax","MakeMin","OpAdd","OpAddCount","OpAddCountV","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAddV","OpAffine","OpAffineOnOpAddCount","OpAffineV","OpClosure","OpClosureOnOpClosure","OpGcd","OpGcdV","OpMax","OpMaxV","OpMin","OpMinV","OpMul","OpMulV","OpRollHash","OpRollHashV","Output","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","PerLine","Pext","RandomGenerator","Scanner","SpaceSep","StrSep","VecMarker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","_Marker","act","act","act","act","act","ascii","bitop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","charset","check_bounds","check_bounds_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","e_macro","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate","id","id","id","id","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","make_max","make_min","make_minmax","op","op","op","op","op","op","op","op","op","op_add","op_add_count","op_add_on_op_add_count","op_add_on_op_max","op_add_on_op_min","op_affine","op_affine_on_op_add_count","op_closure","op_closure_on_op_closure","op_gcd","op_max","op_min","op_mul","op_roll_hash","operand","operand","operand","operand","operand","operator","operator","operator","operator","operator","options","output","partial_recip","partial_recip","pdep","pext","rand_gen_macro","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ASCII","ASCII_ALPHABETIC","ASCII_ALPHANUMERIC","ASCII_CONTROL","ASCII_DIGIT","ASCII_GRAPHIC","ASCII_HEXDIGIT","ASCII_LOWERCASE","ASCII_PUNCTUATION","ASCII_UPPERCASE","ASCII_WHITESPACE","charset","Pdep","PdepPextMaskU128","PdepPextMaskU16","PdepPextMaskU32","PdepPextMaskU64","PdepPextMaskU8","Pext","get","get","get","get","get","new","new","new","new","new","pdep","pext","bounds_within","check_bounds","check_bounds_range","MakeMax","MakeMin","make_max","make_min","OpAdd","OpAddV","OpAddV","_Marker","OpAddCount","OpAddCountV","OpAddCountV","_Marker","OpAddOnOpAddCount","OpAddOnOpMax","OpAddOnOpMin","OpAffine","OpAffineV","OpAffineV","_Marker","OpAffineOnOpAddCount","OpClosure","new","OpClosureOnOpClosure","new","OpGcd","OpGcdV","OpGcdV","_Marker","OpMax","OpMaxV","OpMaxV","_Marker","OpMin","OpMinV","OpMinV","_Marker","OpMul","OpMulV","OpMulV","_Marker","OpRollHash","OpRollHashV","OpRollHashV","value_of","PerLine","SpaceSep","StrSep","Ascii","AsciiGen","AsciiString","AsciiStringOfCharset","AsciiStringOfDistribution","GenOptions","OptionType","Output","Permutation","RandomGenerator","SeedableRngInspect","VecMarker","VecOptionsMarker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","charset","charset","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","distinct","distribution","from","from","from","from","from","from","from","generate","inspect","into","into","into","into","into","into","into","new","new","options","options","options","sorted","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","provide","scan","to_string","try_from","try_into","type_id","vzip"],"q":["nekolib","","","","","","","","","","","nekolib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::algo::bisect_","","nekolib::algo::exact_cover","","","","nekolib::algo::extremum","","nekolib::algo::extremum_float","nekolib::algo::hilbert_mo_","nekolib::algo::index_order","","nekolib::algo::inversion","","nekolib::algo::karatsuba","nekolib::algo::larsch","","","nekolib::algo::majority_","nekolib::algo::minmax","","","nekolib::algo::mo","nekolib::algo::ordered_hash_","nekolib::algo::parallel_bisect","nekolib::algo::permutation","","","","","","","","","","nekolib::algo::rle","","","","","","","nekolib::algo::rle::rle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::algo::tortoise_hare","","nekolib::algo::window_bisect","nekolib::dsnekolib::ds::bicremental_median","","","","","nekolib::ds::bicremental_median_dev","","","","","","","nekolib::ds::binary_trie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::bit_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::btree_bimap","","","","","","","","","nekolib::ds::btree_multiset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::cuckoo_hash_map","","","","","","","nekolib::ds::cuckoo_hash_set","","","","","","","nekolib::ds::decremental_usize_set","","","","","","","","","","","nekolib::ds::disjoint_sparse_table","nekolib::ds::foldable_deque","","","nekolib::ds::foldable_queue","","","nekolib::ds::incremental_line_set","","","","","","","","","","nekolib::ds::interval_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::interval_set","","","","","","","","","","nekolib::ds::n1_rmq","","nekolib::ds::potentialized_union_find","","nekolib::ds::removable_heap","","","","","","","","nekolib::ds::rs_dict","","","nekolib::ds::skew_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::ds::union_find","nekolib::ds::vec_act_segtree","","","","nekolib::ds::vec_segtree","","","","nekolib::ds::wavelet_matrix","","","","","","","","","","","nekolib::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::graph::adjlist","nekolib::graph::dijkstra_","nekolib::graph::dinic_","nekolib::graph::functional_graph","","nekolib::graph::hld","","","","","","","","","","","","","","","nekolib::graph::scc_","nekolib::graph::tree_cata","","nekolib::mathnekolib::math::bit_binom_","nekolib::math::carmichael_lambda","","nekolib::math::common_quot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::compact_sieve","","","","nekolib::math::const_div","","","","","","","","nekolib::math::continued_fraction_","nekolib::math::convolution","","","","","","","","","","","","","","","","","","nekolib::math::digit_sum","","","nekolib::math::digits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::divisors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::dlog","","nekolib::math::equiv_mod","","","","nekolib::math::euler_phi","","nekolib::math::factors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::factors_dup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::frac_approx","","","","","","","","","","","","","","","","","","","","nekolib::math::fraction_bisect","","","","","","","","","","","nekolib::math::garner","","","","","","nekolib::math::gcd","","nekolib::math::gcd_recip","","nekolib::math::harmonic_floor_sum","","","","nekolib::math::interpolation","","","nekolib::math::is_close_float","","nekolib::math::lcm","","nekolib::math::linear_floor_sum","","nekolib::math::linear_sieve","","","","","","","","","","","","","nekolib::math::miller_rabin","","nekolib::math::mod_ackermann","","nekolib::math::mod_factorial_binom","","","","","","","nekolib::math::mod_ord","","nekolib::math::mod_pow","","nekolib::math::mod_recip_table_","nekolib::math::mod_tetration","","nekolib::math::modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::math::prime_pi_","nekolib::math::segmented_factor_sieve","","","","","nekolib::math::sieve_n2_plus_1","","","","","","nekolib::math::sieve_n2_plus_n_plus_1","","","","","","nekolib::math::slope_function","","","","","","","","","","","","","","nekolib::math::sqrt","","nekolib::math::sqrt_fraction_","","nekolib::math::stern_brocot_","nekolib::math::two_sat","","","","nekolib::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::seq::kmp","","","","","","","","","","","","","","","","","","nekolib::seq::suffix_array","","","","","","","nekolib::seq::z_algo","","","","","","","","","","","","","","","","","","","nekolib::traitsnekolib::traits::act","","","nekolib::traits::action","","","","","","nekolib::traits::additive","","","","nekolib::traits::binop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::bisect","","","","nekolib::traits::count","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::disjoint_set","","","","","","","","","","nekolib::traits::elastic_slice","","","","","","","","","","","","","","","","","","","nekolib::traits::find_nth","","nekolib::traits::fold","","","nekolib::traits::fold_bisect","","","","nekolib::traits::get_mut","","","nekolib::traits::group_by","","nekolib::traits::max","","nekolib::traits::min","","nekolib::traits::multiplicative","","","","","","","nekolib::traits::potential_function","","","","","","","","","","nekolib::traits::push_pop","","","","","","","","","","","","","","","","","","nekolib::traits::quantile","","","nekolib::traits::range_bounds","","","","","","","nekolib::traits::set_value","","","nekolib::traits::stateful_predicate","","","","","","nekolib::traits::usize_group_by","","nekolib::utilsnekolib::utils::ascii","","","","","","","","","","","","nekolib::utils::bitop","","","","","","","","","","","","","","","","","","","nekolib::utils::buf_range","","","nekolib::utils::make_minmax","","","","nekolib::utils::op_add","","","","nekolib::utils::op_add_count","","","","nekolib::utils::op_add_on_op_add_count","nekolib::utils::op_add_on_op_max","nekolib::utils::op_add_on_op_min","nekolib::utils::op_affine","","","","nekolib::utils::op_affine_on_op_add_count","nekolib::utils::op_closure","","nekolib::utils::op_closure_on_op_closure","","nekolib::utils::op_gcd","","","","nekolib::utils::op_max","","","","nekolib::utils::op_min","","","","nekolib::utils::op_mul","","","","nekolib::utils::op_roll_hash","","","","nekolib::utils::output","","","nekolib::utils::rand_gen_macro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::utils::scanner","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["アルゴリズムたち。","データ構造たち。","デバッグ用マクロ。","グラフに関するものたち。","数学関連のアルゴリズムたち。","","乱数生成マクロ。","","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","","Exact cover。","","","LARSCH algorithm。","","","","","二分探索で境界を探す。","二分探索。","二分探索で境界を探す。","","","","","","","","","","","Karatsuba 法。Карацуба 法？","周期検出を行う。","$n$ 項目を求める。","","Exact cover。","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Hilbert curve に基づく Mo’s algorithm。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","添字の順序。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Karatsuba 法。","LARSCH algorithm。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","","","辞書順で次の順列の生成。","座標圧縮。","座標圧縮。","並列二分探索。","並列二分探索を行う。","順列。","","","","","","","","","","","","周期検出。","","","","","","","","","","","","","","","","","","","","","","","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","Exact cover。","解を全て探す。","…","与えられた行列に対して前計算を行う。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Hilbert curve に基づく Mo’s algorithm。","添字の順序。","添字の順序。","","","Karatsuba 法。Карацуба 法？","LARSCH algorithm。","","","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","座標圧縮。","並列二分探索を行う。","","","","","","","辞書順で次の順列の生成。","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","周期検出を行う。","$n$ 項目を求める。","尺取り法で、各始端に対して境界を探す。","双方向連想配列。","多重集合。","中央値の管理。","中央値と偏差の管理。","","Bit set。","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","直線の集合。","区間から値への対応づけ。","区間の集合。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","ポテンシャルつき union-find。","削除可能ヒープ。","rank/select 辞書。","","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","多重集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","<code>usize</code> の decremental set。","","","","","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","直線の集合。","","","","区間から値への対応づけ。","区間の集合。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","線形 RMQ。","","","","","","","","","","ポテンシャルつき union-find。","","","","","","","削除可能ヒープ。","","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","","","","","","","","","","","","","","","","","","","","","","","","","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bit set。","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","双方向連想配列。","","","","","","","","","多重集合。","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Cuckoo hashing による連想配列。","","","","","","","<code>CuckooHashMap&lt;K, ()&gt;</code> の wrapper。","","","","","","","<code>usize</code> の decremental set。","$i\\\\in S$ を返す。","$\\\\min_{j\\\\gt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\min_{j\\\\ge i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S=\\\\emptyset$ を返す。","$|S|$ を返す。","$\\\\max_{j\\\\lt i}\\\\text{ s.t. }j\\\\in S$ を返す。","$\\\\max_{j\\\\le i}\\\\text{ s.t. }j\\\\in S$ を返す。","$S\\\\gets\\\\{0, 1, \\\\dots, u-1\\\\}$ で初期化。","$S\\\\gets S\\\\setminus\\\\{i\\\\}$ で更新する。","$u$ を返す。","disjoint sparse table。","fold 可能両端キュー。","","","fold 可能キュー。","","","","直線の集合。","","","","","","","","","","区間から値への対応づけ。","","","","","","","","","Returns the argument unchanged.","","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{\\\\cup} (k…","","","","Calls <code>U::from(self)</code>.","","","$S=\\\\emptyset$ を返す。","","","","$S\\\\gets\\\\emptyset$ で初期化する。","","区間 <code>b</code> 中の各 $k$ に対して $S\\\\xleftarrow{…","","$T\\\\subseteq S$ かつ <code>b</code> を含む $T$ …","","","","","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","$\\\\langle O(n), O(1)\\\\rangle$ RMQ。","","ポテンシャルつき union-find。","","削除可能ヒープ。","空のとき <code>true</code> を返す。","要素数を返す。","空のヒープで初期化する。","最大値を取得する。","最大値を取り出す。","要素を追加する。","要素を削除する。","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","","","","","","","","","","","function graph。","","","HL 分解。","","全方位木 DP。","","","","","","","","","","","","","","","","","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","functional graph。","HL 分解。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","lowlink に基づく強連結成分分解。","強連結成分分解。","","","","","全方位木 DP。","","","","","","","","","","","","","","","","","","","","","","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","function graph。","$(\\\\mu_i, \\\\lambda_i)$ を返す。","","","","","","HL 分解。","","","","","","","","","","lowlink に基づく強連結成分分解。","全方位木 DP。","","","","Carmichael の $\\\\lambda$ 関数。","商が共通の区間の列挙。","篩。","定数除算。","定数除算。","","","離散対数。","桁和。","","約数列挙。","","Chinese remaindering。","Chinese remaindering。","Euler の $\\\\varphi$ 関数。","素因数分解。","素因数分解。","","","","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","","Lagrange 補間。","","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","","","","","Ackermann 関数。","法 $p$ での二項係数。","","","","位数。","冪乗。","tetration。","","","","","","","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","2-SAT。","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","組合せのビット表現。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","","","","","","","","商が共通の区間の列挙。","","篩。","定数除算。","連分数展開。","連分数展開。","","","","","","","","","","","","","","","桁和。","","","","","","","","","","","","","","","","","","","","","","約数列挙。","","離散対数。","","","","","","","","Chinese remaindering","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","素因数分解。","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","最大公約数。","","最大公約数と逆元。","","","","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","","Lagrange 補間。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","","Ackermann 関数。","","法 $p$ での二項係数。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","多項式。","","","素数の数え上げ。","素数の数え上げ。","","","","","","","","","","","","","","","","","","","","","","","","","$n^2+1$ 型素数の篩。","$n^2+n+1$ 型素数の篩。","区分線形凸関数。","平方根。","","平方根の連分数展開。","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","Stern–Brocot tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","組合せのビット表現。","Carmichael の $\\\\lambda$ 関数。","","商が共通の区間の列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","篩。","","","","定数除算。","定数除算。","","","","","","","連分数展開。","","","","","","","","","","","","","","","","","","","桁和。","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","約数列挙。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","離散対数。","","Chinese remaindering。","Chinese remaindering。","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","素因数分解。","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","Lagrange 補間。","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$n$ の約数の総和を返す。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","法 $m$ での逆元を返す。","","","Ackermann 関数。","","法 $p$ での二項係数。","$i!/(j!\\\\cdot (i-j)!) \\\\bmod p$ を返す。","$i! \\\\bmod p$ を返す。","$i!^{-1} \\\\bmod p$ を返す。","$(0!, 1!, \\\\dots, n!)$ と $(0!^{-1}, 1!^{-1}, \\\\dots, …","$i!/(i-j)! \\\\bmod p$ を返す。","$i^{-1} \\\\bmod p$ を返す。","位数。","","冪乗。","","素数 $m$ を法とした逆元のテーブル。","tetration。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","素数の数え上げ。","","","","","","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","$n^2+1$ の形の素数を返す。","$n^2+n+1$ 型素数の篩。","$n^2+n+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+n+1$ が素数のとき真を返す。","初期化する。","$n^2+n+1$ の形の素数を返す。","区分線形凸関数。","","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","平方根。","","平方根の連分数展開。","平方根の連分数展開。","Stern–Brocot tree","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KMP 法。","","","接尾辞配列。","","","","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","接尾辞配列。","","","自身を消費し、内部表現を返す。","高さ配列を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","二分探索。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","イテレータのグルーピング。","","単位元を持つ。","","","","","代入される型。","","要素の型。","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","ポテンシャル関数。","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","イテレータのグルーピング。","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","","代数的構造に関するトレイトたちです。","二分探索。","","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","ポテンシャルの差を求める。","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合の要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","分割を返す。","","","","ポテンシャル関数。","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","ポテンシャルの差を定義する。","$u$ を含む集合の代表元を返す。","代表元とのポテンシャルの差を求める。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","イテレータのグルーピング。","Examples","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","","","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","","単位元を返す。","積 $x \\\\ast y$ を返す。","","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 $x^{-1}$ …","加法 $\\\\circ$ の単位元 $0$ を返す。","二分探索。","","","","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","分割を返す。","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","イテレータのグルーピング。","Examples","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","","要素の型。","","ポテンシャル関数。","ポテンシャルの差を求める。","集合が空であれば <code>true</code> を返す。","集合の要素数 $n$ を返す。","要素数 $n$ の集合 $\\\\{0, 1, \\\\dots, n-1\\\\}$ …","ポテンシャルの差を定義する。","代表元とのポテンシャルの差を求める。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","イテレータのグルーピング。","Examples","","","","","","","","","","","","","","和を返す演算を持つ。","","","","","","","","","","任意の結合的な演算を持つ。","","","","最大値を返す演算を持つ。","","最小値を返す演算を持つ。","","積を返す演算を持つ。","","…","","","","","","","","","形式つき出力（改行区切り）。","","","スキャナ。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","","境界チェックを行う。","境界チェックを行う。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","加法に関する wrapper クラス。","加法に関する wrapper クラス。","","","","加法に関する wrapper クラス。","","クロージャの wrapper クラス。","","","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","","","","","","","","","形式つき出力。","","","","","乱数生成マクロ。","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","境界チェックを行う。","境界チェックを行う。","","","","","和を返す演算を持つ。","","","","","","","","","","","","","","","","任意の結合的な演算を持つ。","","","","","","","","最大値を返す演算を持つ。","","","","最小値を返す演算を持つ。","","","","積を返す演算を持つ。","","","","…","","","","形式つき出力（改行区切り）。","形式つき出力（スペース区切り）。","形式つき出力（任意文字列区切り）。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","スキャナ。","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,9,16,17,5,25,9,16,17,5,0,0,0,5,0,0,0,0,0,0,25,9,9,16,17,5,16,17,0,0,0,0,0,25,9,16,17,5,16,17,0,180,0,0,0,0,0,0,0,0,0,0,16,17,0,0,0,0,0,0,0,0,181,16,17,182,16,17,183,16,17,0,25,9,16,17,5,25,9,16,17,5,25,9,16,17,5,16,17,25,9,16,17,5,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,180,0,0,25,25,0,0,0,0,0,0,0,0,0,0,9,9,9,0,9,9,0,0,0,0,0,181,182,183,0,0,0,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,0,0,29,31,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,29,31,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,28,49,49,44,45,49,49,0,0,0,52,28,32,37,38,39,27,46,42,0,29,31,28,33,41,52,28,34,35,49,44,52,29,31,60,28,28,32,33,34,35,37,38,39,40,41,44,27,46,62,37,38,27,46,27,46,27,46,0,0,75,62,62,62,64,64,52,49,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,44,45,27,27,27,46,46,46,52,28,34,35,27,46,0,62,49,46,0,0,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,52,33,40,40,42,45,0,42,45,28,28,28,38,37,37,38,0,38,37,38,37,49,42,0,45,42,0,46,28,28,28,28,28,28,0,28,28,28,28,28,28,29,31,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,0,45,0,0,75,62,64,52,49,29,31,60,28,32,33,34,35,37,38,39,40,41,42,43,44,45,27,46,0,0,29,29,29,29,0,31,31,31,31,31,31,0,0,0,0,67,65,66,65,66,66,66,65,66,65,66,60,65,66,65,66,60,60,60,65,66,66,67,67,65,66,65,66,65,66,67,65,66,65,66,65,66,65,66,65,66,67,0,0,0,28,28,28,71,70,71,70,28,28,28,28,71,70,71,70,28,28,71,70,71,70,28,28,28,28,70,28,71,70,71,70,28,28,28,28,28,28,28,71,70,71,70,71,70,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,71,70,71,70,71,70,71,70,71,70,28,28,28,0,32,32,32,32,32,32,32,32,0,0,74,74,33,74,74,33,33,74,74,33,33,33,33,33,74,33,74,33,33,74,74,74,74,74,74,74,74,0,34,34,34,34,34,34,0,35,35,35,35,35,35,0,75,75,75,75,75,75,75,75,75,75,0,0,37,37,0,38,38,0,0,39,39,39,61,61,39,61,61,0,0,77,77,77,77,77,77,77,77,77,77,77,40,77,77,77,77,77,77,40,77,77,40,40,77,40,77,40,77,77,77,77,77,0,41,41,41,41,41,41,41,41,41,0,64,0,42,0,43,43,43,43,43,43,43,0,44,44,0,0,0,80,79,80,79,52,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,79,80,80,79,80,52,52,80,52,52,80,52,52,52,79,52,80,80,80,80,80,79,80,79,80,79,80,80,79,0,0,27,27,27,0,46,46,46,0,0,48,49,49,49,49,48,48,49,48,84,84,0,0,83,0,0,83,0,0,86,81,82,83,84,86,81,82,83,84,81,82,83,84,81,82,83,84,0,0,0,0,81,83,84,81,82,83,84,86,86,81,81,82,83,84,0,0,0,86,81,82,83,84,0,0,81,82,83,84,0,86,81,82,83,84,86,81,82,83,84,86,81,82,83,84,86,81,82,83,84,0,0,0,0,81,84,84,0,83,0,0,83,82,82,83,82,82,82,83,82,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,184,185,0,0,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,89,186,187,188,189,89,0,0,0,0,0,0,0,0,103,88,87,87,87,87,90,90,90,90,90,90,90,90,87,87,90,90,90,90,0,0,90,90,90,90,90,90,90,90,90,90,90,90,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,0,89,94,0,0,190,191,92,93,87,94,95,90,96,97,98,99,92,93,87,94,95,90,96,97,98,99,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,87,99,192,0,192,0,193,87,87,87,87,90,90,90,90,90,90,90,90,87,87,90,90,90,90,0,187,0,194,92,93,87,94,95,90,0,195,196,0,197,0,188,0,189,103,92,93,87,87,90,90,96,104,97,98,99,0,198,198,0,199,118,115,105,103,103,122,123,124,131,92,93,87,87,94,95,90,90,90,90,90,90,90,90,90,90,90,90,90,90,96,104,97,98,99,0,0,200,0,201,191,87,105,0,87,0,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,105,202,0,203,0,204,0,205,0,0,0,206,0,0,207,0,208,0,0,0,209,0,191,87,87,87,87,87,90,90,90,90,90,90,90,90,87,87,90,90,90,90,87,90,90,191,191,87,105,0,191,0,0,0,87,87,191,90,90,90,90,90,90,90,90,90,90,90,90,105,105,0,90,90,90,90,90,90,0,0,0,0,210,0,0,0,0,0,87,87,87,87,90,90,90,90,90,90,90,90,87,87,90,90,90,90,87,87,92,93,87,94,95,90,96,97,98,99,87,90,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,0,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,105,118,115,105,103,122,123,124,131,92,93,87,94,95,90,96,104,97,98,99,0,0,190,0,0,186,117,117,186,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,118,118,118,0,0,92,93,92,93,92,93,0,0,89,0,89,89,0,89,0,0,0,0,0,0,0,0,0,0,0,0,192,192,0,0,101,101,193,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,187,119,119,187,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,194,0,0,195,196,0,197,0,0,188,120,120,120,120,120,120,120,120,120,120,120,120,120,120,188,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,189,121,121,121,121,121,121,121,121,121,121,121,121,121,121,189,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,0,0,103,106,106,0,103,106,106,106,198,198,106,103,106,106,106,106,106,0,211,211,0,211,211,211,199,211,211,211,0,0,184,185,184,185,0,200,0,201,0,96,96,96,0,122,122,0,202,0,204,0,205,0,123,123,123,123,123,123,123,123,123,123,123,123,0,203,0,206,0,124,124,124,124,124,124,0,207,0,208,0,0,209,0,0,0,0,0,0,0,0,0,0,0,0,88,126,126,126,126,126,126,125,128,127,126,128,127,126,128,191,126,128,126,128,127,127,126,126,126,126,126,126,126,126,128,126,126,128,127,126,126,128,191,126,126,128,127,126,128,191,126,126,126,126,126,126,126,126,126,191,127,191,126,191,126,126,191,107,126,126,126,126,126,126,126,126,126,126,128,126,127,126,128,127,126,128,127,126,128,127,126,128,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,104,104,104,104,0,97,97,97,97,97,0,98,98,98,98,98,0,0,99,99,99,99,99,130,99,99,99,99,99,99,0,210,0,0,0,0,131,131,131,0,0,0,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,132,133,133,133,134,134,133,132,133,134,0,132,132,0,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,0,0,0,136,136,136,136,136,136,136,132,136,136,136,136,136,136,136,136,0,133,133,133,133,133,133,0,0,138,138,138,138,138,138,138,134,138,138,138,138,138,138,138,138,134,0,212,0,0,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,0,215,216,217,218,219,19,220,0,0,0,0,0,0,0,0,213,0,221,221,215,222,223,224,225,226,227,228,0,0,0,0,0,0,0,0,0,0,0,214,0,229,213,0,0,0,0,0,0,0,0,0,0,0,212,221,0,213,0,213,0,0,215,0,230,231,19,232,220,0,0,233,231,234,235,0,236,0,222,0,237,238,233,0,223,0,239,214,240,231,233,220,231,220,233,0,146,0,143,213,224,0,213,213,231,220,19,241,213,229,221,221,242,231,225,227,226,0,19,216,218,217,0,0,228,0,243,244,220,231,220,233,19,0,219,245,246,233,0,231,231,0,247,142,213,0,212,212,0,221,221,221,221,221,0,0,0,142,213,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,229,213,213,213,240,213,213,213,213,229,242,243,244,213,0,215,215,215,0,0,0,51,51,51,51,230,232,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,231,231,231,231,231,231,231,231,231,0,0,0,214,214,0,0,0,233,234,235,233,214,233,233,233,245,246,233,0,236,0,222,222,0,0,237,238,0,223,223,0,239,0,146,0,143,0,0,0,0,224,224,241,0,220,0,0,220,220,220,220,220,220,216,217,218,225,226,227,0,0,0,0,0,0,225,227,226,216,218,217,228,0,228,0,0,0,0,0,0,0,219,0,219,19,0,19,19,19,19,0,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,155,0,0,157,0,0,0,159,0,160,0,161,0,162,0,163,248,0,0,0,0,0,0,0,0,0,0,0,0,0,155,156,157,159,160,161,162,139,145,147,148,149,0,0,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,0,0,0,0,0,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,155,156,139,145,147,157,148,158,149,159,160,161,162,163,0,155,156,157,159,160,161,162,163,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,155,156,139,145,147,157,148,158,149,159,160,161,162,163,165,166,167,168,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,248,155,156,157,158,159,160,161,162,163,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,249,250,0,155,156,157,158,159,160,161,162,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,145,147,148,149,139,145,147,148,149,164,0,155,162,251,252,0,155,0,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,165,166,167,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,165,166,167,168,150,151,152,153,154,155,156,139,145,147,157,148,158,149,159,160,161,162,163,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,151,152,153,154,150,151,152,153,154,251,252,0,0,0,0,0,249,250,0,0,155,155,0,0,156,156,0,0,0,0,0,157,157,0,0,158,0,149,0,0,159,159,0,0,160,160,0,0,161,161,0,0,162,162,0,0,163,163,0,0,0,0,0,0,0,0,0,253,248,0,0,0,0,0,169,170,171,174,172,173,175,169,170,171,174,172,173,175,170,172,170,171,174,172,173,175,170,171,174,172,173,175,169,170,169,170,171,174,172,173,175,248,254,169,170,171,174,172,173,175,173,164,253,170,172,169,170,171,174,172,173,175,169,170,171,174,172,173,175,169,170,171,174,172,173,175,169,170,171,174,172,173,175,169,170,171,174,172,173,175,178,0,0,0,176,176,176,176,176,176,168,168,168,168,168,176,168,168,168,176,178,176,176,176,176,176],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],1],0,[3,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[1],[[],5],0,0,[[[2,[1]],3]],0,[[[7,[6]],6,3]],[3],[[]],[[]],[[[4,[8]]],[[9,[8]]]],[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[4,12],0,0,[3,[[4,[1]]]],[3,[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],13],0,0,[[],14],0,0,[[],14],[3,14],[[],14],0,[[4,[14,[1]]],4],[[[16,[[0,[15,8]]]]],14],[[[17,[[0,[15,8]]]]],14],[[],18],[[],[[11,[1]]]],0,0,[[19,4],[[4,[1]]]],0,[[],18],0,[[],20],[[],20],[[],20],[3,[[21,[3]]]],[[],21],[[],21],[3,[[22,[3]]]],[[],22],[[],22],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[]],[[]],[[]],0,[[],[[4,[1]]]],[[[2,[1]],3],1],[3,1],0,[5,[[4,[[4,[1]]]]]],[5,[[14,[[4,[1]]]]]],[4,5],[[[2,[1]],3]],[3],[[[7,[6]],6,3]],[4,12],[3,[[4,[1]]]],[3,[[4,[1]]]],0,[[],13],[[],4],0,[[1,1],25],[25],[[],14],[[],14],[3,14],[[],14],[[4,[14,[1]]],4],[[],[[11,[1]]]],[[19,4],[[4,[1]]]],0,0,0,[[[9,[[0,[8,15]]]],1],[[17,[[0,[8,15]]]]]],[[[9,[[0,[8,15]]]],1],[[16,[[0,[8,15]]]]]],[[[9,[8]]],18],[[],18],[[[9,[8]]]],[[[9,[8]]],18],[[],18],0,0,0,0,[[],20],[3,[[21,[3]]]],[3,[[22,[3]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[12,[[20,[26,12]]]],[[12,3],[[21,[12,3]]]],[[12,3],[[22,[12,3]]]],[[[20,[26,12]]],14],[[[21,[12,3]]],14],[[[22,[12,3]]],14],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[]],[[]],[1],[[],[[4,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27],0,0,0,0,[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28]],[[28,28]],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28]],[[28,28]],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28]],[[28,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[29,[[0,[15,8,15]]]]],[[29,[[0,[15,8,15]]]]]],[[[31,[[0,[15,30]]]]],[[31,[[0,[15,30]]]]]],[28,28],[[[32,[[0,[15,8]],[0,[15,8]]]]],[[32,[[0,[15,8]],[0,[15,8]]]]]],[[[33,[15]]],[[33,[15]]]],[[[34,[15,15]]],[[34,[15,15]]]],[[[35,[15]]],[[35,[15]]]],[[[37,[[0,[15,36]]]]],[[37,[[0,[15,36]]]]]],[[[38,[[0,[15,36]]]]],[[38,[[0,[15,36]]]]]],[[[39,[[0,[15,8]]]]],[[39,[[0,[15,8]]]]]],[[[40,[15,15]]],[[40,[15,15]]]],[[[41,[[0,[15,8]]]]],[[41,[[0,[15,8]]]]]],[[[42,[[0,[15,30]]]]],[[42,[[0,[15,30]]]]]],[[[43,[15]]],[[43,[15]]]],[44,44],[45,45],[27,27],[46,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,28],47],[[[49,[48]],[50,[1]],[7,[48]]],1],[[[49,[48]],[50,[1]],48],1],[[44,[50,[1]],13],1],[[45,1],1],[[[49,[48]],[50,[1]],48],51],[[[49,[48]],[50,[1]],[7,[48]]],51],0,0,0,[[],[[52,[8]]]],[[],28],[[],[[32,[[0,[53,8]],[0,[53,8]]]]]],[[],37],[[],38],[[],[[39,[[0,[53,8]]]]]],[[],27],[[],46],[[[42,[30]],1,1],14],0,[[[29,[[0,[26,8,15]]]],29],18],[[[31,[[0,[26,30]]]],31],18],[[28,28],18],[[[33,[26]],33],18],[[[41,[[0,[26,8]]]],41],18],[[[52,[8]],54]],[28],[[[34,[[0,[55,56]]]]]],[[[35,[[0,[55,56]]]]]],[[[49,[48]],[50,[1]],48,1],[[14,[1]]]],[[44,[50,[1]],13,1],[[14,[1]]]],[[[52,[57]],58],59],[[[29,[[0,[57,8,15]]]],58],59],[[[31,[[0,[57,30]]]],58],59],[[[60,[57]],58],59],[[28,58],59],[[28,58],59],[[[32,[[0,[57,8]],[0,[57,8]]]],58],59],[[[33,[57]],58],59],[[[34,[57,57]],58],59],[[[35,[57]],58],59],[[[37,[[0,[57,36]]]],58],59],[[[38,[[0,[57,36]]]],58],59],[[[39,[61]],58],59],[[[40,[[0,[8,57]],57]],58],59],[[[41,[[0,[57,8]]]],58],59],[[44,58],59],[[27,58],59],[[46,58],59],[62],[[[37,[36]],63]],[[[38,[36]],63]],[27],[46],[[27,1]],[[46,1]],[[27,1]],[[46,1]],0,0,[[]],[[],62],[[]],[4,62],[[[4,[[0,[15,8]]]]],[[64,[[0,[15,8]]]]]],[[]],[[]],[[]],[[[4,[48]]],[[49,[48]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[18]]],44],[[]],[[]],[[]],[[],27],[4,27],[[],46],[4,46],[[]],[54,[[52,[8]]]],[[],28],[[],[[34,[[0,[55,56]]]]]],[[],[[35,[[0,[55,56]]]]]],[[27,1],[[14,[0]]]],[[46,1],[[14,[0]]]],0,[[62,1]],[[[49,[48]],1]],[[46,1]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[8]]]],[33],[40],[[[40,[8,55]]]],[[[42,[30]]],1],[45,1],0,[[1,30],[[42,[30]]]],[1,45],[28,28],[28,28],[[28,28],[[14,[47]]]],[[[38,[36]]],14],[[[37,[36]]],14],[[[37,[36]]],14],[[[38,[36]]],14],0,[[[38,[36]]]],[[[37,[36]]]],[[[38,[36]]]],[[[37,[36]]]],[[[49,[48]],[50,[1]],1],[[14,[48]]]],[[[42,[30]],1,1],[[23,[18]]]],0,[[45,1],1],[[[42,[30]],1]],0,[[46,1]],[[28,1],28],[[28,1],28],[[28,1]],[[28,1],28],[[28,1],28],[[28,1]],0,[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28]],[[28,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,[[45,1,1],18],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[29,[[0,[8,15]]]],[0,[8,15]]]],[[[29,[[0,[8,15]]]]],14],[[],[[29,[[0,[8,15]]]]]],[[[29,[[0,[8,15]]]]],18],0,[[[31,[30]]]],[[[31,[30]]],14],[[[31,[30]]]],[[],[[31,[30]]]],[[[31,[30]]],18],[30,[[31,[30]]]],0,0,0,0,[[],65],[[]],[[]],[[]],[[]],[[],14],[[[66,[57]],58],59],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[[[60,[67]],67]],[[]],[[]],[[]],[[]],[[[60,[67]]],[[66,[67]]]],[[[60,[67]]],[[0,[12,68]]]],[[],[[60,[67]]]],[[[65,[67]]],[[14,[18]]]],[[[66,[67]]],14],[[[66,[67]]],14],[[]],[18],[[],20],[[],20],[[],21],[[],21],[[],22],[[],22],[69,18],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[]],0,0,0,[[28,28],28],[[28,28]],[[28,18]],[[]],[[]],[[]],[[]],[28,1],[[28,1],18],[[28,[50,[1]]],[[14,[1]]]],[[28,[50,[1]]],[[14,[1]]]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[3,[[11,[[4,[10]],10]]]],[[28,[50,[1]]],70],[[28,1]],[[]],[[]],[[]],[[]],[[28,28],28],[[28,28]],[28,18],[28,1],[[28,[2,[1]]],70],[1,28],[71,14],[70,14],[71,14],[70,14],[28,28],[28],[[28,28],28],[[28,28]],[[28,1]],[[28,1]],[[28,1]],[[],20],[[],20],[[],21],[[],21],[[],22],[[],22],[[28,1],28],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1,28,72],28],[[28,1,28,72]],[[28,1,72],28],[[28,1,72]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1],28],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1,28,72],28],[[28,1,28,72]],[[28,1,72],28],[[28,1,72]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,1,28],28],[[28,1,28]],[[28,1],28],[[28,1]],[[28,28],28],[[28,28]],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[3,[[4,[[4,[10]],10]]]],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[28,[50,[1]]],71],[[28,28],28],[[28,28]],0,[[[32,[[0,[15,8]],[0,[15,8]]]],[0,[15,8]],[0,[15,8]]]],[[[32,[[0,[15,8]],[0,[15,8]]]]],18],[[[32,[[0,[15,8]],[0,[15,8]]]]],1],[[],[[32,[[0,[15,8]],[0,[15,8]]]]]],[[[32,[[0,[15,8]],[0,[15,8]]]]],[[73,[[0,[15,8]],[0,[15,8]]]]]],[[[32,[[0,[15,8]],[0,[15,8]]]]],[[73,[[0,[15,8]],[0,[15,8]]]]]],[[[32,[[0,[15,8]],[0,[15,8]]]]]],[[[32,[[0,[15,8]],[0,[15,8]]]]]],0,0,[[]],[[]],[[[33,[8]]],1],[[]],[3,[[11,[[4,[10]],10]]]],[[[33,[8]],8]],[[[33,[8]],8,1]],[[]],[[]],[[[33,[8]]],18],[[[33,[8]]],[[74,[8]]]],[[[33,[8]]],1],[[[33,[8]]],14],[[[33,[8]]],14],[33,[[74,[8]]]],[[],[[33,[8]]]],[74,14],[[[33,[8]]]],[[[33,[8]],1]],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,[[[34,[[0,[55,56]]]]],18],[[[34,[[0,[55,56]]]],[0,[55,56]]],14],[[[34,[[0,[55,56]]]]],18],[[[34,[[0,[55,56]]]]],1],[[],[[34,[[0,[55,56]]]]]],[[[34,[[0,[55,56]]]]],14],0,[[[35,[[0,[55,56]]]]],18],[[[35,[[0,[55,56]]]],[0,[55,56]]],18],[[[35,[[0,[55,56]]]]],18],[[[35,[[0,[55,56]]]]],1],[[],[[35,[[0,[55,56]]]]]],[[[35,[[0,[55,56]]]]],18],0,[[75,1],18],[[75,1],[[14,[1]]]],[[75,1],[[14,[1]]]],[75,18],[75,1],[[75,1],[[14,[1]]]],[[75,1],[[14,[1]]]],[1,75],[[75,1],18],[75,1],0,0,[[],[[37,[36]]]],[36,[[37,[36]]]],0,[[],[[38,[36]]]],[36,[[38,[36]]]],0,0,[[[39,[61]]],1],[[[39,[61]],61],[[14,[61]]]],[[],[[39,[61]]]],[[]],[[]],[[[39,[61]]]],[[]],[[],76],0,0,[[]],[[]],[[[77,[15]]],[[77,[15]]]],[[]],[[[77,[8]],[77,[8]]],47],[[[77,[8]],[77,[8]]],[[14,[[77,[8]]]]]],[[[77,[26]],77],18],[[[77,[57]],58],59],[[]],[[[50,[[0,[8,15]]]]],[[77,[[0,[8,15]]]]]],[[[77,[8]]],14],[[[40,[[0,[8,15]],[0,[55,15]]]],[50,[[0,[8,15]]]],[0,[55,15]]]],[[[77,[8]],[77,[8]]],[[14,[[77,[8]]]]]],[[[77,[[0,[8,15]]]],[77,[[0,[8,15]]]]]],[[[77,[8]],[77,[8]]],18],[[]],[[[77,[8]],[77,[8]]],18],[[[77,[8]]],18],[[[40,[[0,[8,15]],[0,[55,15]]]]],18],[[[77,[8]],[77,[8]]],18],[[[77,[8]],[77,[8]]],18],[[[40,[[0,[8,15]],[0,[55,15]]]]],[[0,[12,68]]]],[[],[[40,[[0,[8,15]],[0,[55,15]]]]]],[[[77,[8]],[77,[8]]],[[14,[47]]]],[[[40,[[0,[8,15]],[0,[55,15]]]],[50,[[0,[8,15]]]]],4],[[[77,[8]]],14],[[[40,[[0,[8,15]],[0,[55,15]]]],[50,[[0,[8,15]]]]],14],[[]],[[],23],[[],23],[[],24],[[]],0,[[[41,[[0,[15,57,8]]]]]],[[[41,[[0,[15,57,8]]]]],14],[[[41,[[0,[15,57,8]]]]],18],[[[41,[[0,[15,57,8]]]],[50,[[0,[15,57,8]]]]]],[[[41,[[0,[15,57,8]]]]],18],[[[41,[[0,[15,57,8]]]]],[[0,[12,68]]]],[[[41,[[0,[15,57,8]]]]],78],[[],[[41,[[0,[15,57,8]]]]]],[[[41,[[0,[15,57,8]]]],[50,[[0,[15,57,8]]]]]],0,[[[64,[[0,[15,8]]]],1,1]],0,[1,[[42,[30]]]],0,[[[43,[8]]],18],[[[43,[8]]],1],[[],[[43,[8]]]],[[[43,[8]]],14],[[[43,[8]]],[[14,[8]]]],[[[43,[8]],8]],[[[43,[8]],8]],0,[[44,1,13],1],[[44,13,1],[[14,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[[52,[8]]]],[[[79,[8]]]],[[[79,[8]]]],[[[79,[8]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[]],[[[52,[8]]],18],[[[52,[8]]],1],[[[80,[8]]],1],[[[52,[8]],[52,[8]]]],[[],[[52,[8]]]],[[[80,[8]]],14],[[[52,[8]]],14],[[[52,[8]]],[[14,[[79,[8]]]]]],[[[52,[8]]],[[14,[8]]]],[[[79,[8]]],8],[[[52,[8]],8]],[[],20],[[],21],[[],22],[[[80,[8]]]],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],[[]],0,0,[27,18],[27,1],[1,27],0,[46,18],[46,1],[1,46],0,0,[[],1],[[[49,[48]]],18],[[[49,[48]]],1],[[[49,[48]],1,48],1],[[[49,[48]],48,1],[[14,[1]]]],[1],[1,18],[[[49,[48]],[50,[1]],1,48],[[14,[48]]]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,81],[82,82],[83,83],[84,84],[[]],[[]],[[]],[[]],[[1,3,3],[[4,[14]]]],0,[[1,[0,[12,15]],[0,[72,85]],[0,[72,85]],[0,[72,85]]]],0,[[81,81],18],[[83,83],18],[[84,84],18],[[81,58],59],[[82,58],59],[[83,58],59],[[84,58],59],[[]],[[[4,[4]]],86],[[]],[[[4,[1]]],81],[[]],[[]],[[]],[[1,1],[[4,[4]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[1,12,[0,[72,85]],[0,[72,85]]],[[4,[1]]]],0,[[]],[[]],[[]],[[]],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[1,1],[[4,[4]]]],[[1,3,3],[[4,[14]]]],[[1,[0,[12,15]],[0,[72,85]],[0,[72,85]],[0,[72,85]]]],0,[[81,1]],0,0,0,0,0,0,0,[[82,1],1],[[82,1],1],[83],[[82,1,1],1],[[[4,[[4,[1]]]],1],82],[[82,1,1],12],[83,83],[[82,1]],[[1,12,[0,[72,85]],[0,[72,85]]],[[4,[1]]]],0,[[86,15,3,3],[[4,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[87,[87,[88]]],[[87,[88]]]],[[[87,[88]],87],[[87,[88]]]],[[87,87],[[87,[88]]]],[[[87,[88]],[87,[88]]],[[87,[88]]]],[[[90,[89]],87],[[90,[89]]]],[[[90,[89]],90],[[90,[89]]]],[[[90,[89]],[87,[89]]],[[90,[89]]]],[[90,90],[[90,[89]]]],[[90,[87,[89]]],[[90,[89]]]],[[90,[90,[89]]],[[90,[89]]]],[[90,87],[[90,[89]]]],[[[90,[89]],[90,[89]]],[[90,[89]]]],[[[87,[88]],87]],[[[87,[88]],[87,[88]]]],[[[90,[89]],[87,[89]]]],[[[90,[89]],[90,[89]]]],[[[90,[89]],87]],[[[90,[89]],90]],[[1,1],12],0,[[90,90],[[90,[89]]]],[[[90,[89]],87],[[90,[89]]]],[[90,[87,[89]]],[[90,[89]]]],[[90,87],[[90,[89]]]],[[[90,[89]],[87,[89]]],[[90,[89]]]],[[90,[90,[89]]],[[90,[89]]]],[[[90,[89]],[90,[89]]],[[90,[89]]]],[[[90,[89]],90],[[90,[89]]]],[[[90,[89]],87]],[[[90,[89]],90]],[[[90,[89]],[90,[89]]]],[[[90,[89]],[87,[89]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],91],[[],91],[[]],0,[[]],[[],14],[92,92],[93,93],[[[87,[15]]],[[87,[15]]]],[94,94],[95,95],[[[90,[[0,[15,89]]]]],[[90,[[0,[15,89]]]]]],[96,96],[97,97],[98,98],[[[99,[[0,[15,8]]]]],[[99,[[0,[15,8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,[12,12],0,0,[[[4,[[87,[89]]]],[4,[[87,[89]]]]],[[4,[[87,[89]]]]]],[[],[[4,[100]]]],[100,[[4,[100]]]],[69,[[4,[69]]]],[[],[[4,[13]]]],[13,[[4,[13]]]],[[],[[4,[100]]]],[[],[[4,[13]]]],[[]],[[]],[[],[[87,[88]]]],[[],[[99,[[0,[53,8]]]]]],[69],0,[[]],0,[[],101],[[87,[87,[88]]],[[87,[88]]]],[[[87,[88]],[87,[88]]],[[87,[88]]]],[[[87,[88]],87],[[87,[88]]]],[[87,87],[[87,[88]]]],[[90,87],[[90,[89]]]],[[[90,[89]],[90,[89]]],[[90,[89]]]],[[[90,[89]],87],[[90,[89]]]],[[90,[90,[89]]],[[90,[89]]]],[[[90,[89]],[87,[89]]],[[90,[89]]]],[[[90,[89]],90],[[90,[89]]]],[[90,90],[[90,[89]]]],[[90,[87,[89]]],[[90,[89]]]],[[[87,[88]],87]],[[[87,[88]],[87,[88]]]],[[[90,[89]],[90,[89]]]],[[[90,[89]],[87,[89]]]],[[[90,[89]],90]],[[[90,[89]],87]],0,[[]],0,[[],14],[[92,92],18],[[93,93],18],[[[87,[26]],87],18],[[94,94],18],[[95,95],18],[[[90,[[0,[26,89]]]],90],18],0,[[],14],[[],14],0,[[]],0,[[]],0,[[]],[[[103,[102]],58],59],[[92,58],59],[[93,58],59],[[[87,[88]],58],59],[[[87,[88]],58],59],[[[90,[89]],58],59],[[[90,[89]],58],59],[[96,58],59],[[104,58],59],[[97,58],59],[[98,58],59],[[[99,[[0,[57,8]]]],58],59],0,[[],105],[[],105],0,[72],[[]],[[]],[[]],[[],[[103,[106]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[107,[[87,[88]]]],[[]],[[]],[[]],[[[4,[108]]],[[90,[89]]]],[[[4,[109]]],[[90,[89]]]],[[[4,[76]]],[[90,[89]]]],[[[4,[110]]],[[90,[89]]]],[[[4,[111]]],[[90,[89]]]],[[]],[[[4,[112]]],[[90,[89]]]],[[[4,[[87,[89]]]]],[[90,[89]]]],[[[4,[1]]],[[90,[89]]]],[[[4,[113]]],[[90,[89]]]],[[[4,[69]]],[[90,[89]]]],[[[4,[114]]],[[90,[89]]]],[[[4,[100]]],[[90,[89]]]],[[[4,[13]]],[[90,[89]]]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],0,[[]],[[],69],[[[87,[88]]],69],[3,[[11,[[4,[10]],10]]]],0,[[[87,[88]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],0,[[],18],0,[[]],0,[[]],0,0,0,[[]],0,0,[[],14],0,[[]],0,[[13,13],[[4,[13]]]],0,[[]],0,[[],69],[[],69],[[87,[87,[88]]],[[87,[88]]]],[[[87,[88]],87],[[87,[88]]]],[[87,87],[[87,[88]]]],[[[87,[88]],[87,[88]]],[[87,[88]]]],[[[90,[89]],[87,[89]]],[[90,[89]]]],[[[90,[89]],87],[[90,[89]]]],[[[90,[89]],[90,[89]]],[[90,[89]]]],[[90,87],[[90,[89]]]],[[90,90],[[90,[89]]]],[[90,[90,[89]]],[[90,[89]]]],[[90,[87,[89]]],[[90,[89]]]],[[[90,[89]],90],[[90,[89]]]],[[[87,[88]],87]],[[[87,[88]],[87,[88]]]],[[[90,[89]],[87,[89]]]],[[[90,[89]],[90,[89]]]],[[[90,[89]],90]],[[[90,[89]],87]],[[[87,[88]]],[[87,[88]]]],[90,[[90,[89]]]],[[[90,[89]]],[[90,[89]]]],[107],[69],[69,[[87,[88]]]],[[[105,[106,72]]],14],0,[13],[[],[[115,[89]]]],[1,1],0,[[],[[87,[88]]]],[[],[[87,[88]]]],[[]],[[[90,[89]],87],[[90,[89]]]],[[[90,[89]],[87,[89]]],[[90,[89]]]],[[90,[90,[89]]],[[90,[89]]]],[[[90,[89]],90],[[90,[89]]]],[[90,[87,[89]]],[[90,[89]]]],[[90,90],[[90,[89]]]],[[[90,[89]],[90,[89]]],[[90,[89]]]],[[90,87],[[90,[89]]]],[[[90,[89]],[87,[89]]]],[[[90,[89]],[90,[89]]]],[[[90,[89]],87]],[[[90,[89]],90]],[[],21],[[],22],0,[[[90,[89]],1]],[[90,1]],[[[90,[89]],1]],[[[90,[89]],1]],[[90,1]],[[[90,[89]],1]],0,0,0,0,[[]],[109,12],0,[109],[[109,3,3],23],0,[[[87,[88]],87],[[87,[88]]]],[[87,87],[[87,[88]]]],[[87,[87,[88]]],[[87,[88]]]],[[[87,[88]],[87,[88]]],[[87,[88]]]],[[[90,[89]],[90,[89]]],[[90,[89]]]],[[[90,[89]],90],[[90,[89]]]],[[[90,[89]],87],[[90,[89]]]],[[90,87],[[90,[89]]]],[[[90,[89]],[87,[89]]],[[90,[89]]]],[[90,[87,[89]]],[[90,[89]]]],[[90,90],[[90,[89]]]],[[90,[90,[89]]],[[90,[89]]]],[[[87,[88]],[87,[88]]]],[[[87,[88]],87]],[[[90,[89]],90]],[[[90,[89]],[90,[89]]]],[[[90,[89]],[87,[89]]]],[[[90,[89]],87]],[[],[[87,[88]]]],[[],[[87,[88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],116],[[],116],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],12],0,[[]],0,0,0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[117,[13]]],14],[[[117,[111]]],14],[[[117,[100]]],14],[[[117,[69]]],14],[[[117,[1]]],14],[[[117,[112]]],14],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,[[118,1],18],[1,118],[118,12],0,0,[13,92],[13,93],[[92,13],13],[[93,13],13],[[92,13],13],[[93,13],13],[12,12],0,0,0,0,0,[[]],[[],91],[[]],[[[4,[[87,[89]]]],[4,[[87,[89]]]]],[[4,[[87,[89]]]]]],[[],[[4,[100]]]],[100,[[4,[100]]]],[69,[[4,[69]]]],[[],[[4,[13]]]],[[],[[4,[13]]]],[13,[[4,[13]]]],[[],[[4,[100]]]],[[],[[4,[13]]]],[[],[[115,[89]]]],0,[69],[[]],0,0,[[]],[[]],[[],101],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[],101],[[[101,[111]]],[[14,[111]]]],[[[101,[1]]],[[14,[1]]]],[[[101,[112]]],[[14,[112]]]],[[[101,[69]]],[[14,[69]]]],[[[101,[13]]],[[14,[13]]]],[[[101,[100]]],[[14,[100]]]],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,0,0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[119,[100]]],[[14,[100]]]],[[[119,[13]]],[[14,[13]]]],[[[119,[112]]],[[14,[112]]]],[[[119,[111]]],[[14,[111]]]],[[[119,[1]]],[[14,[1]]]],[[[119,[69]]],[[14,[69]]]],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,[[],14],0,0,[[],14],[[],14],0,[[]],0,0,0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[120,[100]]],14],[[[120,[112]]],14],[[[120,[111]]],14],[[[120,[1]]],14],[[[120,[13]]],14],[[[120,[69]]],14],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,0,0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[121,[100]]],[[14,[100]]]],[[[121,[69]]],[[14,[69]]]],[[[121,[1]]],[[14,[1]]]],[[[121,[13]]],[[14,[13]]]],[[[121,[111]]],[[14,[111]]]],[[[121,[112]]],[[14,[112]]]],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],105],[[],105],[[]],[103],[[]],[[],18],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[72],[[],18],[[]],[[]],0,0,0,0,[[]],[[]],0,[[]],0,[[]],0,[1,96],[[96,[50,[1]]],1],[[96,[50,[1]]],1],0,[[122,13],13],[[[4,[13]],13],122],0,[[],18],0,[[]],0,[[]],0,[[123,1],[[0,[12,68]]]],[[123,1],1],[[123,1],1],[[123,1],1],[[123,1],1],[[123,1],12],[[123,1],12],[[123,1],18],[[123,1],[[14,[1]]]],[1,123],[123,[[0,[12,68]]]],[[123,1,1],[[4,[1]]]],0,[[],18],0,[[]],0,[[124,1,1],13],[[124,1],13],[[124,1],13],[[1,13],124],[[124,1,1],13],[[124,1],13],0,[[],14],0,[[]],[[13,13],[[4,[13]]]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[126,[125]],[126,[125]]],[[126,[125]]]],[[126,[126,[125]]],[[126,[125]]]],[[126,126],[[126,[125]]]],[[[126,[125]],126],[[126,[125]]]],[[[126,[125]],[126,[125]]]],[[[126,[125]],126]],[[],127],[[],127],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[[126,[15]]],[[126,[15]]]],[128,128],[[]],[[]],[[],127],[[],127],[[],[[126,[125]]]],[[126,[126,[125]]],[[126,[125]]]],[[[126,[125]],126],[[126,[125]]]],[[[126,[125]],[126,[125]]],[[126,[125]]]],[[126,126],[[126,[125]]]],[[[126,[125]],[126,[125]]]],[[[126,[125]],126]],[[[126,[26]],126],18],[[128,128],18],[[[126,[125]],58],59],[[[126,[125]],58],59],[[128,58],59],[[]],[107,[[126,[125]]]],[[]],[[]],[[],69],[[[126,[125]]],69],[[[126,[125]]]],[128],[[]],[[]],[[]],[[],69],[[],69],[[],69],[[126,[126,[125]]],[[126,[125]]]],[[[126,[125]],[126,[125]]],[[126,[125]]]],[[126,126],[[126,[125]]]],[[[126,[125]],126],[[126,[125]]]],[[[126,[125]],[126,[125]]]],[[[126,[125]],126]],[[[126,[125]]],[[126,[125]]]],[107],[69,127],[69],[69,[[126,[125]]]],[13],[[],[[126,[125]]]],[[],[[126,[125]]]],[[]],[69,69],[69],[[126,126],[[126,[125]]]],[[[126,[125]],126],[[126,[125]]]],[[126,[126,[125]]],[[126,[125]]]],[[[126,[125]],[126,[125]]],[[126,[125]]]],[[[126,[125]],126]],[[[126,[125]],[126,[125]]]],[[],[[126,[125]]]],[[],[[126,[125]]]],[[]],[[]],[[],116],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[]],[[]],[[]],0,[[[90,[89]]],[[90,[89]]]],[[[90,[89]]]],[[[90,[89]],90]],[[[90,[89]],90,1],[[87,[89]]]],[[[90,[89]],1],[[90,[89]]]],[[[90,[89]],1]],[[[90,[89]],1]],[[[90,[89]],1,72],[[90,[89]]]],[[[90,[89]],1],[[87,[89]]]],[[[90,[89]]],[[90,[89]]]],[[[90,[89]]]],[[[90,[89]]],[[4,[[87,[89]]]]]],[[[90,[89]]],18],[[[90,[89]]],1],[[[90,[89]],1],[[90,[89]]]],[[],[[90,[89]]]],[[[90,[89]],1,72],[[90,[89]]]],[[[90,[89]],[129,[[87,[89]]]],1],[[90,[89]]]],[[[90,[89]],1],[[90,[89]]]],[[[90,[89]],1],[[90,[89]]]],[[[90,[89]]]],[[[90,[89]]],[[90,[89]]]],[[[90,[89]],1]],[[[90,[89]],1],[[90,[89]]]],[1,1],0,[[104,1],12],[[104,1],12],[[104,1],12],[[[7,[1]]],104],0,[[97,1],12],[[97,1],12],[[97,1],18],[1,97],[97,12],0,[[98,1],12],[[98,1],12],[[98,1],18],[1,98],[98,12],0,0,[[[99,[130]],130]],[[[99,[130]],130]],[[[99,[130]],130]],[[[99,[130]],130]],[[[99,[130]]]],[[]],[[[99,[130]]],130],[[[99,[130]]]],[[[99,[130]]]],[[],[[99,[130]]]],[[[99,[130]],130]],[[[99,[130]],[7,[130]]]],0,[[]],[109,12],[109],[[109,3,3],23],0,[[131,113,113]],[1,131],[131,[[14,[[4,[18]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[132,[[0,[15,55]]]]],[[132,[[0,[15,55]]]]]],[[[133,[[0,[15,8]]]]],[[133,[[0,[15,8]]]]]],[[[134,[[0,[15,55]]]]],[[134,[[0,[15,55]]]]]],[[]],[[]],[[]],[[[132,[[0,[26,55]]]],132],18],[[[133,[[0,[26,8]]]],133],18],[[[134,[[0,[26,55]]]],134],18],[[[132,[[0,[57,55]]]],58],59],[[[133,[[0,[57,8]]]],58],59],[[[134,[[0,[57,55]]]],58],59],[[]],[[[4,[55]]],[[132,[55]]]],[[]],[116,[[133,[135]]]],[[[4,[8]]],[[133,[8]]]],[[[4,[[0,[15,55]]]]],[[134,[[0,[15,55]]]]]],[[]],[[[133,[8]],1],1],[[]],[[]],[[]],0,[[[132,[55]]],[[14,[1]]]],[[[132,[55]],55]],0,[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[136,[55]]],14],[[[132,[55]]],[[136,[55]]]],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],0,[[[4,[112]]],[[133,[112]]]],[[[4,[1]]],[[133,[1]]]],[[[133,[8]]],[[4,[1]]]],[[[133,[8]]],[[4,[1]]]],[[[133,[8]]],12],[[[133,[135]],137],12],0,0,[[]],[[]],[[]],[3,[[11,[[4,[10]],10]]]],[[]],[[]],[[[138,[55]]],14],[[[134,[55]]],[[138,[55]]]],[[],20],[[],21],[[],22],[[],23],[[],23],[[],24],[3,[[4,[[4,[10]],10]]]],[[]],[[[134,[55]],1],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[]],0,[[]],0,0,[3],0,[[[50,[1]]],1],[1,1],[[],1],[[[50,[1]]],51],[[1,1],14],0,0,[[],1],[[1,1],18],[[]],[[]],0,[[[50,[1]],1],[[14,[1]]]],0,[[]],0,[1],[1],[[],1],0,[1,14],0,[3,[[11,[8,4]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],1],[[],1],[[],1],0,[[]],0,[[]],[[]],[[]],0,[[]],[[]],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],[[4,[[4,[1]]]]]],[[],14],[[],14],[[],14],0,[[],18],[[]],[[]],[[]],0,0,[[[50,[1]],1],14],0,[[]],[[]],[[1,1],[[23,[18]]]],[1,1],[1],[[]],[[]],0,[[]],[[]],[[]],[[],1],0,[1,[[4,[1]]]],[[1,1],18],0,[3,[[4,[4]]]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],[[]],0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[]],[[]],[[]],0,0,0,[3],0,0,0,[[]],[[]],[51,51],[[]],[[[50,[1]]],1],[[[50,[1]]],51],[51,1],[[51,51],18],[[51,58],59],[[]],[51,1],[51,1],[[]],[51,1],[51,1],[51,1],[[1,1,1],51],[[]],[[],23],[[],23],[[],24],[[]],0,[1,1],[[1,1],18],[[],18],[[],1],[1],[[],[[4,[[4,[1]]]]]],[1,1],[1,[[4,[1]]]],[[1,1],18],0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[],1],[[]],[[],18],[[],1],[[]],[[]],[[]],[[],1],0,[[[50,[1]],1],[[14,[1]]]],0,0,[[]],0,0,[1],[1],0,0,[1,14],0,[3,[[11,[8,4]]]],0,[[]],0,[[]],0,0,0,0,0,[[]],[[]],0,0,0,0,[[1,1],14],[[],18],[[],1],[1],[[1,1],[[23,[18]]]],[1],0,0,0,0,0,0,0,0,0,0,0,0,[[],14],[[],14],[[],14],[[]],[[]],[[]],0,0,[[[50,[1]],1],14],0,0,0,0,0,0,0,0,0,[[]],0,0,[[],1],[[]],[[],18],[[]],0,[3,[[4,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[139],[[[145,[[0,[8,55,140,141,142,143,144]]]],[0,[8,55,140,141,142,143,144]],[0,[8,55,140,141,142,143,144]]],[[0,[8,55,140,141,142,143,144]]]],[[[147,[[0,[8,55,140,141,142,146,144]]]],[0,[8,55,140,141,142,146,144]],[0,[8,55,140,141,142,146,144]]],[[0,[8,55,140,141,142,146,144]]]],[148],[149],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[1]],1],[[2,[1]]]],0,[[],100],[[1,1]],[[1,[0,[[50,[1]],57]]]],[150,150],[151,151],[152,152],[153,153],[154,154],[[[155,[15]]],[[155,[15]]]],[[[156,[15]]],[[156,[15]]]],[[[139,[15]]],[[139,[15]]]],[[[145,[15]]],[[145,[15]]]],[[[147,[15]]],[[147,[15]]]],[[[157,[15]]],[[157,[15]]]],[[[148,[15]]],[[148,[15]]]],[[[158,[15,[0,[15,72]],[0,[15,72]]]]],[[158,[15,[0,[15,72]],[0,[15,72]]]]]],[[[149,[15,15]]],[[149,[15,15]]]],[[[159,[15]]],[[159,[15]]]],[[[160,[15]]],[[160,[15]]]],[[[161,[15]]],[[161,[15]]]],[[[162,[15]]],[[162,[15]]]],[163,163],[[[164,[15]]],[[164,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],155],[[],156],[[],[[139,[53]]]],[[],[[145,[53]]]],[[],[[147,[53]]]],[[],157],[[],[[148,[53]]]],[[],[[158,[53,[0,[53,72]],[0,[53,72]]]]]],[[],[[149,[53,53]]]],[[],159],[[],160],[[],161],[[],162],[[],163],0,[[[155,[26]],155],18],[[[156,[26]],156],18],[[[157,[26]],157],18],[[[159,[26]],159],18],[[[160,[26]],160],18],[[[161,[26]],161],18],[[[162,[26]],162],18],[[163,163],18],[[165,58],59],[[165,58],59],[[165,58],59],[[165,58],59],[[165,58],59],[[165,58],59],[[165,58],59],[[165,58],59],[[165,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[166,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[167,58],59],[[[155,[57]],58],59],[[[156,[57]],58],59],[[[139,[57]],58],59],[[[145,[57]],58],59],[[[147,[57]],58],59],[[[157,[57]],58],59],[[[148,[57]],58],59],[[[158,[57,[0,[57,72]],[0,[57,72]]]],58],59],[[[149,[57,57]],58],59],[[[159,[57]],58],59],[[[160,[57]],58],59],[[[161,[57]],58],59],[[[162,[57]],58],59],[[163,58],59],[[]],[[]],[[]],[116,168],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[155],[156],[157],[[[158,[55,72,72]]],55],[159],[160],[161],[162],[163],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],0,[155],[156],[157],[[[158,[55,72,72]],55,55],55],[159],[160],[161],[162],[163],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[139],[[[145,[[0,[8,55,140,141,142,143,144]]]]]],[[[147,[[0,[8,55,140,141,142,146,144]]]]]],[148],[149],[139],[[[145,[[0,[8,55,140,141,142,143,144]]]]]],[[[147,[[0,[8,55,140,141,142,146,144]]]]]],[148],[149],[164,169],0,[155,14],[162,14],[[]],[[]],0,[155],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],116],[[],116],[[],116],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[],100],0,0,0,0,0,0,0,[150,112],[151,111],[152,69],[153,13],[154,100],[112,150],[111,151],[69,152],[13,153],[100,154],[[]],[[]],[[[50,[1]],1],[[2,[1]]]],[[1,1]],[[1,[0,[[50,[1]],57]]]],0,0,[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[72,72],[[158,[55,72,72]]]],0,[[158,158],149],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[163,137]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[170,100],171],[[172,100],173],[170,170],[171,171],[174,174],[172,172],[173,173],[175,175],[[]],[[]],[[]],[[]],[[]],[[]],[169,169],[170,174],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100,173],[1,164],[[]],[170,170],[172,172],[169,169],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[176,176],18],[[176,58],59],[[176,58],59],[[]],[[],[[23,[168,177]]]],[168,137],[168,137],[168],[168],[[]],[168,[[23,[178]]]],[168,23],[[168,1],[[23,[4]]]],[179],[137],[[],116],[[],23],[[],23],[[],24],[[]]],"p":[[15,"usize"],[3,"Range"],[8,"FnMut"],[3,"Vec"],[3,"ExactCover"],[15,"f64"],[3,"RangeInclusive"],[8,"Ord"],[3,"Permutations"],[3,"Global"],[3,"BTreeMap"],[8,"Iterator"],[15,"u64"],[4,"Option"],[8,"Clone"],[3,"Forward"],[3,"Backward"],[15,"bool"],[8,"StatefulPred"],[3,"Rle"],[3,"RleBy"],[3,"RleByKey"],[4,"Result"],[3,"TypeId"],[3,"Larsch"],[8,"PartialEq"],[3,"VecActSegtree"],[3,"BitSet"],[3,"BicrementalMedian"],[8,"CommutativeGroup"],[3,"BicrementalMedianDev"],[3,"BTreeBimap"],[3,"BTreeMultiset"],[3,"CuckooHashMap"],[3,"CuckooHashSet"],[8,"Monoid"],[3,"FoldableDeque"],[3,"FoldableQueue"],[3,"IncrementalLineSet"],[3,"IntervalMap"],[3,"IntervalSet"],[3,"PotentializedUnionFind"],[3,"RemovableHeap"],[3,"RsDict"],[3,"UnionFind"],[3,"VecSegtree"],[4,"Ordering"],[8,"WmInt"],[3,"WaveletMatrix"],[8,"RangeBounds"],[3,"Count3wayResult"],[3,"SkewHeap"],[8,"Default"],[8,"IntoIterator"],[8,"Eq"],[8,"Hash"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"BinaryTrie"],[8,"ChtInt"],[3,"DisjointSparseTable"],[3,"RangeFull"],[3,"N1Rmq"],[3,"Bits"],[3,"Iter"],[8,"BinaryInt"],[8,"DoubleEndedIterator"],[15,"u32"],[3,"Indices"],[3,"Words"],[8,"Fn"],[3,"Range"],[3,"Iter"],[3,"DecrementalUsizeSet"],[15,"i8"],[3,"Interval"],[4,"Bound"],[3,"PeekMut"],[3,"IntoIter"],[3,"FunctionalGraph"],[3,"Hld"],[4,"HlEdge"],[4,"Direction"],[8,"Copy"],[3,"TreeCata"],[3,"StaticModInt"],[8,"Modulus"],[8,"NttFriendly"],[3,"Polynomial"],[3,"LocalKey"],[3,"ConstDiv2"],[3,"ConstDiv"],[3,"Mod998244353"],[3,"Mod1000000007"],[3,"HarmonicFloorSum"],[3,"SieveN2Plus1"],[3,"SieveN2PlusNPlus1"],[3,"SlopeFunction"],[15,"u128"],[3,"DigitsIter"],[8,"Display"],[4,"ApproxFrac"],[3,"SegmentedFactorSieve"],[3,"FracApproxIter"],[8,"SbInt"],[8,"RemEuclidU32"],[15,"i32"],[15,"i128"],[15,"i16"],[15,"u16"],[15,"u8"],[15,"isize"],[15,"i64"],[3,"ButterflyCache"],[3,"String"],[3,"CommonQuotStruct"],[3,"CompactSieve"],[3,"DivisorsStruct"],[3,"FactorsStruct"],[3,"FactorsDupStruct"],[3,"Interpolation"],[3,"LinearSieve"],[3,"ModFactorialBinom"],[8,"DynamicModIntId"],[3,"DynamicModInt"],[3,"Barrett"],[4,"DefaultId"],[8,"Into"],[8,"SlopeTrickInt"],[3,"TwoSat"],[3,"KmpSearcher"],[3,"SuffixArray"],[3,"ZSearcher"],[15,"char"],[3,"Occurrences"],[15,"str"],[3,"Occurrences"],[3,"OpAddOnOpAddCount"],[8,"Add"],[8,"AddAssoc"],[8,"Zero"],[8,"Min"],[8,"Sized"],[3,"OpAddOnOpMax"],[8,"Max"],[3,"OpAddOnOpMin"],[3,"OpAffineOnOpAddCount"],[3,"OpClosureOnOpClosure"],[3,"PdepPextMaskU8"],[3,"PdepPextMaskU16"],[3,"PdepPextMaskU32"],[3,"PdepPextMaskU64"],[3,"PdepPextMaskU128"],[4,"OpAdd"],[4,"OpAddCount"],[4,"OpAffine"],[3,"OpClosure"],[4,"OpGcd"],[4,"OpMax"],[4,"OpMin"],[4,"OpMul"],[4,"OpRollHash"],[3,"VecMarker"],[3,"SpaceSep"],[3,"PerLine"],[3,"StrSep"],[3,"Scanner"],[3,"VecOptionsMarker"],[3,"AsciiString"],[3,"AsciiStringOfCharset"],[3,"Ascii"],[3,"AsciiGen"],[3,"AsciiStringOfDistribution"],[3,"Permutation"],[3,"ScanTupleError"],[3,"Error"],[8,"Scan"],[3,"Demand"],[8,"Inversion"],[8,"Rle"],[8,"RleBy"],[8,"RleByKey"],[8,"CrtMod"],[8,"CrtWrapping"],[8,"CommonQuot"],[8,"Divisors"],[8,"Factors"],[8,"FactorsDup"],[8,"CarmichaelLambda"],[8,"ModIntBase"],[8,"DigitSum"],[8,"Digits"],[8,"DLog"],[8,"EquivMod"],[8,"EquivModIter"],[8,"EulerPhi"],[8,"FracApprox"],[8,"FractionBisect"],[8,"Gcd"],[8,"GcdRecip"],[8,"IsCloseFloat"],[8,"MillerRabin"],[8,"Lcm"],[8,"LinearFloorSum"],[8,"ModAckermann"],[8,"ModOrd"],[8,"ModPow"],[8,"ModTetration"],[8,"Sqrt"],[8,"SbInt"],[8,"Act"],[8,"Ring"],[8,"SliceHash"],[8,"Bisect"],[8,"Push"],[8,"PushFront"],[8,"PushBack"],[8,"SetValue"],[8,"PotentialFunction"],[8,"MonoidAction"],[8,"Fold"],[8,"GetMut"],[8,"MulRecip"],[8,"Pop"],[8,"PopFront"],[8,"PopBack"],[8,"Quantile"],[8,"Magma"],[8,"Count"],[8,"DisjointSet"],[8,"Count3way"],[8,"ElasticSlice"],[8,"ExpandBack"],[8,"ExpandFront"],[8,"FindNth"],[8,"FoldBisect"],[8,"FoldBisectRev"],[8,"GroupBy"],[8,"Identity"],[8,"One"],[8,"PartialRecip"],[8,"Recip"],[8,"Field"],[8,"ShrinkBack"],[8,"ShrinkFront"],[8,"UsizeGroupBy"],[8,"RandomGenerator"],[8,"MakeMax"],[8,"MakeMin"],[8,"Pdep"],[8,"Pext"],[8,"GenOptions"],[8,"SeedableRngInspect"]]},\
"nekolib_notes":{"doc":"<code>nekolib</code> …","t":"AA","n":["debug","range_add_on_the_fly"],"q":["nekolib_notes",""],"d":["デバッグ用ツールたち。","区間加算 (imos 法 + on-the-fly で遅延解消)。"],"i":[0,0],"f":[0,0],"p":[]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
